// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/consensus/twopc/message.proto

package twopc

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 2pc prepare 阶段信息
type PrepareMsg struct {
	ProposalId           []byte      `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	TaskOption           *TaskOption `protobuf:"bytes,2,opt,name=task_option,json=taskOption,proto3" json:"task_option,omitempty"`
	CreateAt             uint64      `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Sign                 []byte      `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PrepareMsg) Reset()         { *m = PrepareMsg{} }
func (m *PrepareMsg) String() string { return proto.CompactTextString(m) }
func (*PrepareMsg) ProtoMessage()    {}
func (*PrepareMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{0}
}
func (m *PrepareMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareMsg.Merge(m, src)
}
func (m *PrepareMsg) XXX_Size() int {
	return m.Size()
}
func (m *PrepareMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareMsg proto.InternalMessageInfo

func (m *PrepareMsg) GetProposalId() []byte {
	if m != nil {
		return m.ProposalId
	}
	return nil
}

func (m *PrepareMsg) GetTaskOption() *TaskOption {
	if m != nil {
		return m.TaskOption
	}
	return nil
}

func (m *PrepareMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *PrepareMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// 2pc prepareVote
type PrepareVote struct {
	ProposalId           []byte                        `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	TaskRole             []byte                        `protobuf:"bytes,2,opt,name=task_role,json=taskRole,proto3" json:"task_role,omitempty"`
	Owner                *TaskOrganizationIdentityInfo `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	VoteOption           []byte                        `protobuf:"bytes,4,opt,name=vote_option,json=voteOption,proto3" json:"vote_option,omitempty"`
	PeerInfo             *TaskPeerInfo                 `protobuf:"bytes,5,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info,omitempty"`
	CreateAt             uint64                        `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Sign                 []byte                        `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PrepareVote) Reset()         { *m = PrepareVote{} }
func (m *PrepareVote) String() string { return proto.CompactTextString(m) }
func (*PrepareVote) ProtoMessage()    {}
func (*PrepareVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{1}
}
func (m *PrepareVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareVote.Merge(m, src)
}
func (m *PrepareVote) XXX_Size() int {
	return m.Size()
}
func (m *PrepareVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareVote.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareVote proto.InternalMessageInfo

func (m *PrepareVote) GetProposalId() []byte {
	if m != nil {
		return m.ProposalId
	}
	return nil
}

func (m *PrepareVote) GetTaskRole() []byte {
	if m != nil {
		return m.TaskRole
	}
	return nil
}

func (m *PrepareVote) GetOwner() *TaskOrganizationIdentityInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *PrepareVote) GetVoteOption() []byte {
	if m != nil {
		return m.VoteOption
	}
	return nil
}

func (m *PrepareVote) GetPeerInfo() *TaskPeerInfo {
	if m != nil {
		return m.PeerInfo
	}
	return nil
}

func (m *PrepareVote) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *PrepareVote) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// 2pc confirm 阶段信息
type ConfirmMsg struct {
	ProposalId           []byte                        `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	TaskRole             []byte                        `protobuf:"bytes,2,opt,name=task_role,json=taskRole,proto3" json:"task_role,omitempty"`
	Epoch                uint64                        `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Owner                *TaskOrganizationIdentityInfo `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	CreateAt             uint64                        `protobuf:"varint,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Sign                 []byte                        `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ConfirmMsg) Reset()         { *m = ConfirmMsg{} }
func (m *ConfirmMsg) String() string { return proto.CompactTextString(m) }
func (*ConfirmMsg) ProtoMessage()    {}
func (*ConfirmMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{2}
}
func (m *ConfirmMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmMsg.Merge(m, src)
}
func (m *ConfirmMsg) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmMsg proto.InternalMessageInfo

func (m *ConfirmMsg) GetProposalId() []byte {
	if m != nil {
		return m.ProposalId
	}
	return nil
}

func (m *ConfirmMsg) GetTaskRole() []byte {
	if m != nil {
		return m.TaskRole
	}
	return nil
}

func (m *ConfirmMsg) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ConfirmMsg) GetOwner() *TaskOrganizationIdentityInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ConfirmMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *ConfirmMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// 2pc confirmVote
type ConfirmVote struct {
	ProposalId           []byte                        `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Epoch                uint64                        `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	TaskRole             []byte                        `protobuf:"bytes,3,opt,name=task_role,json=taskRole,proto3" json:"task_role,omitempty"`
	Owner                *TaskOrganizationIdentityInfo `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	VoteOption           []byte                        `protobuf:"bytes,5,opt,name=vote_option,json=voteOption,proto3" json:"vote_option,omitempty"`
	CreateAt             uint64                        `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Sign                 []byte                        `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ConfirmVote) Reset()         { *m = ConfirmVote{} }
func (m *ConfirmVote) String() string { return proto.CompactTextString(m) }
func (*ConfirmVote) ProtoMessage()    {}
func (*ConfirmVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{3}
}
func (m *ConfirmVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmVote.Merge(m, src)
}
func (m *ConfirmVote) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmVote.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmVote proto.InternalMessageInfo

func (m *ConfirmVote) GetProposalId() []byte {
	if m != nil {
		return m.ProposalId
	}
	return nil
}

func (m *ConfirmVote) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ConfirmVote) GetTaskRole() []byte {
	if m != nil {
		return m.TaskRole
	}
	return nil
}

func (m *ConfirmVote) GetOwner() *TaskOrganizationIdentityInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ConfirmVote) GetVoteOption() []byte {
	if m != nil {
		return m.VoteOption
	}
	return nil
}

func (m *ConfirmVote) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *ConfirmVote) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// 触发任务执行消息
type CommitMsg struct {
	ProposalId           []byte                        `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	TaskRole             []byte                        `protobuf:"bytes,2,opt,name=task_role,json=taskRole,proto3" json:"task_role,omitempty"`
	Owner                *TaskOrganizationIdentityInfo `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	CreateAt             uint64                        `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Sign                 []byte                        `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CommitMsg) Reset()         { *m = CommitMsg{} }
func (m *CommitMsg) String() string { return proto.CompactTextString(m) }
func (*CommitMsg) ProtoMessage()    {}
func (*CommitMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{4}
}
func (m *CommitMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitMsg.Merge(m, src)
}
func (m *CommitMsg) XXX_Size() int {
	return m.Size()
}
func (m *CommitMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CommitMsg proto.InternalMessageInfo

func (m *CommitMsg) GetProposalId() []byte {
	if m != nil {
		return m.ProposalId
	}
	return nil
}

func (m *CommitMsg) GetTaskRole() []byte {
	if m != nil {
		return m.TaskRole
	}
	return nil
}

func (m *CommitMsg) GetOwner() *TaskOrganizationIdentityInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *CommitMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *CommitMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// 参与方反馈 各自对某个task的执行结果 (发给发起方)
type TaskResultMsg struct {
	ProposalId           []byte       `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	TaskRole             []byte       `protobuf:"bytes,2,opt,name=task_role,json=taskRole,proto3" json:"task_role,omitempty"`
	TaskId               []byte       `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskEventList        []*TaskEvent `protobuf:"bytes,4,rep,name=task_event_list,json=taskEventList,proto3" json:"task_event_list,omitempty"`
	CreateAt             uint64       `protobuf:"varint,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Sign                 []byte       `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TaskResultMsg) Reset()         { *m = TaskResultMsg{} }
func (m *TaskResultMsg) String() string { return proto.CompactTextString(m) }
func (*TaskResultMsg) ProtoMessage()    {}
func (*TaskResultMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{5}
}
func (m *TaskResultMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskResultMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskResultMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskResultMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResultMsg.Merge(m, src)
}
func (m *TaskResultMsg) XXX_Size() int {
	return m.Size()
}
func (m *TaskResultMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResultMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResultMsg proto.InternalMessageInfo

func (m *TaskResultMsg) GetProposalId() []byte {
	if m != nil {
		return m.ProposalId
	}
	return nil
}

func (m *TaskResultMsg) GetTaskRole() []byte {
	if m != nil {
		return m.TaskRole
	}
	return nil
}

func (m *TaskResultMsg) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskResultMsg) GetTaskEventList() []*TaskEvent {
	if m != nil {
		return m.TaskEventList
	}
	return nil
}

func (m *TaskResultMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *TaskResultMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type TaskOption struct {
	TaskRole              []byte                        `protobuf:"bytes,1,opt,name=task_role,json=taskRole,proto3" json:"task_role,omitempty"`
	TaskId                []byte                        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName              []byte                        `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	Owner                 *TaskOrganizationIdentityInfo `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	AlgoSupplier          *TaskOrganizationIdentityInfo `protobuf:"bytes,5,opt,name=algo_supplier,json=algoSupplier,proto3" json:"algo_supplier,omitempty"`
	DataSupplier          []*DataSupplierOption         `protobuf:"bytes,6,rep,name=data_supplier,json=dataSupplier,proto3" json:"data_supplier,omitempty"`
	PowerSupplier         []*PowerSupplierOption        `protobuf:"bytes,7,rep,name=power_supplier,json=powerSupplier,proto3" json:"power_supplier,omitempty"`
	Receivers             []*ReceiverOption             `protobuf:"bytes,8,rep,name=receivers,proto3" json:"receivers,omitempty"`
	OperationCost         *TaskOperationCost            `protobuf:"bytes,9,opt,name=operation_cost,json=operationCost,proto3" json:"operation_cost,omitempty"`
	CalculateContractCode []byte                        `protobuf:"bytes,10,opt,name=calculate_contract_code,json=calculateContractCode,proto3" json:"calculate_contract_code,omitempty"`
	DatasplitContractCode []byte                        `protobuf:"bytes,11,opt,name=datasplit_contract_code,json=datasplitContractCode,proto3" json:"datasplit_contract_code,omitempty"`
	CreateAt              uint64                        `protobuf:"varint,12,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                      `json:"-"`
	XXX_unrecognized      []byte                        `json:"-"`
	XXX_sizecache         int32                         `json:"-"`
}

func (m *TaskOption) Reset()         { *m = TaskOption{} }
func (m *TaskOption) String() string { return proto.CompactTextString(m) }
func (*TaskOption) ProtoMessage()    {}
func (*TaskOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{6}
}
func (m *TaskOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskOption.Merge(m, src)
}
func (m *TaskOption) XXX_Size() int {
	return m.Size()
}
func (m *TaskOption) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskOption.DiscardUnknown(m)
}

var xxx_messageInfo_TaskOption proto.InternalMessageInfo

func (m *TaskOption) GetTaskRole() []byte {
	if m != nil {
		return m.TaskRole
	}
	return nil
}

func (m *TaskOption) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskOption) GetTaskName() []byte {
	if m != nil {
		return m.TaskName
	}
	return nil
}

func (m *TaskOption) GetOwner() *TaskOrganizationIdentityInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TaskOption) GetAlgoSupplier() *TaskOrganizationIdentityInfo {
	if m != nil {
		return m.AlgoSupplier
	}
	return nil
}

func (m *TaskOption) GetDataSupplier() []*DataSupplierOption {
	if m != nil {
		return m.DataSupplier
	}
	return nil
}

func (m *TaskOption) GetPowerSupplier() []*PowerSupplierOption {
	if m != nil {
		return m.PowerSupplier
	}
	return nil
}

func (m *TaskOption) GetReceivers() []*ReceiverOption {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *TaskOption) GetOperationCost() *TaskOperationCost {
	if m != nil {
		return m.OperationCost
	}
	return nil
}

func (m *TaskOption) GetCalculateContractCode() []byte {
	if m != nil {
		return m.CalculateContractCode
	}
	return nil
}

func (m *TaskOption) GetDatasplitContractCode() []byte {
	if m != nil {
		return m.DatasplitContractCode
	}
	return nil
}

func (m *TaskOption) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

type DataSupplierOption struct {
	MemberInfo           *TaskOrganizationIdentityInfo `protobuf:"bytes,1,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
	MetaDataId           []byte                        `protobuf:"bytes,2,opt,name=meta_data_id,json=metaDataId,proto3" json:"meta_data_id,omitempty"`
	ColumnIndexList      []uint64                      `protobuf:"varint,3,rep,packed,name=column_index_list,json=columnIndexList,proto3" json:"column_index_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *DataSupplierOption) Reset()         { *m = DataSupplierOption{} }
func (m *DataSupplierOption) String() string { return proto.CompactTextString(m) }
func (*DataSupplierOption) ProtoMessage()    {}
func (*DataSupplierOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{7}
}
func (m *DataSupplierOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataSupplierOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataSupplierOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataSupplierOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSupplierOption.Merge(m, src)
}
func (m *DataSupplierOption) XXX_Size() int {
	return m.Size()
}
func (m *DataSupplierOption) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSupplierOption.DiscardUnknown(m)
}

var xxx_messageInfo_DataSupplierOption proto.InternalMessageInfo

func (m *DataSupplierOption) GetMemberInfo() *TaskOrganizationIdentityInfo {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

func (m *DataSupplierOption) GetMetaDataId() []byte {
	if m != nil {
		return m.MetaDataId
	}
	return nil
}

func (m *DataSupplierOption) GetColumnIndexList() []uint64 {
	if m != nil {
		return m.ColumnIndexList
	}
	return nil
}

type PowerSupplierOption struct {
	MemberInfo           *TaskOrganizationIdentityInfo `protobuf:"bytes,1,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PowerSupplierOption) Reset()         { *m = PowerSupplierOption{} }
func (m *PowerSupplierOption) String() string { return proto.CompactTextString(m) }
func (*PowerSupplierOption) ProtoMessage()    {}
func (*PowerSupplierOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{8}
}
func (m *PowerSupplierOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PowerSupplierOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PowerSupplierOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PowerSupplierOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerSupplierOption.Merge(m, src)
}
func (m *PowerSupplierOption) XXX_Size() int {
	return m.Size()
}
func (m *PowerSupplierOption) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerSupplierOption.DiscardUnknown(m)
}

var xxx_messageInfo_PowerSupplierOption proto.InternalMessageInfo

func (m *PowerSupplierOption) GetMemberInfo() *TaskOrganizationIdentityInfo {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

type ReceiverOption struct {
	MemberInfo           *TaskOrganizationIdentityInfo   `protobuf:"bytes,1,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
	Providers            []*TaskOrganizationIdentityInfo `protobuf:"bytes,2,rep,name=providers,proto3" json:"providers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ReceiverOption) Reset()         { *m = ReceiverOption{} }
func (m *ReceiverOption) String() string { return proto.CompactTextString(m) }
func (*ReceiverOption) ProtoMessage()    {}
func (*ReceiverOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{9}
}
func (m *ReceiverOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceiverOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceiverOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceiverOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiverOption.Merge(m, src)
}
func (m *ReceiverOption) XXX_Size() int {
	return m.Size()
}
func (m *ReceiverOption) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiverOption.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiverOption proto.InternalMessageInfo

func (m *ReceiverOption) GetMemberInfo() *TaskOrganizationIdentityInfo {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

func (m *ReceiverOption) GetProviders() []*TaskOrganizationIdentityInfo {
	if m != nil {
		return m.Providers
	}
	return nil
}

// 任务的所需操作成本 (定义任务的大小)
type TaskOperationCost struct {
	CostMem              uint64   `protobuf:"varint,1,opt,name=cost_mem,json=costMem,proto3" json:"cost_mem,omitempty"`
	CostProcessor        uint64   `protobuf:"varint,2,opt,name=cost_processor,json=costProcessor,proto3" json:"cost_processor,omitempty"`
	CostBandwidth        uint64   `protobuf:"varint,3,opt,name=cost_bandwidth,json=costBandwidth,proto3" json:"cost_bandwidth,omitempty"`
	Duration             uint64   `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskOperationCost) Reset()         { *m = TaskOperationCost{} }
func (m *TaskOperationCost) String() string { return proto.CompactTextString(m) }
func (*TaskOperationCost) ProtoMessage()    {}
func (*TaskOperationCost) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{10}
}
func (m *TaskOperationCost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskOperationCost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskOperationCost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskOperationCost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskOperationCost.Merge(m, src)
}
func (m *TaskOperationCost) XXX_Size() int {
	return m.Size()
}
func (m *TaskOperationCost) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskOperationCost.DiscardUnknown(m)
}

var xxx_messageInfo_TaskOperationCost proto.InternalMessageInfo

func (m *TaskOperationCost) GetCostMem() uint64 {
	if m != nil {
		return m.CostMem
	}
	return 0
}

func (m *TaskOperationCost) GetCostProcessor() uint64 {
	if m != nil {
		return m.CostProcessor
	}
	return 0
}

func (m *TaskOperationCost) GetCostBandwidth() uint64 {
	if m != nil {
		return m.CostBandwidth
	}
	return 0
}

func (m *TaskOperationCost) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type TaskPeerInfo struct {
	Ip                   []byte   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 []byte   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskPeerInfo) Reset()         { *m = TaskPeerInfo{} }
func (m *TaskPeerInfo) String() string { return proto.CompactTextString(m) }
func (*TaskPeerInfo) ProtoMessage()    {}
func (*TaskPeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{11}
}
func (m *TaskPeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskPeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskPeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskPeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPeerInfo.Merge(m, src)
}
func (m *TaskPeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskPeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPeerInfo proto.InternalMessageInfo

func (m *TaskPeerInfo) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *TaskPeerInfo) GetPort() []byte {
	if m != nil {
		return m.Port
	}
	return nil
}

// 组织(节点)唯一标识抽象
type TaskOrganizationIdentityInfo struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeId               []byte   `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	IdentityId           []byte   `protobuf:"bytes,3,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskOrganizationIdentityInfo) Reset()         { *m = TaskOrganizationIdentityInfo{} }
func (m *TaskOrganizationIdentityInfo) String() string { return proto.CompactTextString(m) }
func (*TaskOrganizationIdentityInfo) ProtoMessage()    {}
func (*TaskOrganizationIdentityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{12}
}
func (m *TaskOrganizationIdentityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskOrganizationIdentityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskOrganizationIdentityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskOrganizationIdentityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskOrganizationIdentityInfo.Merge(m, src)
}
func (m *TaskOrganizationIdentityInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskOrganizationIdentityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskOrganizationIdentityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskOrganizationIdentityInfo proto.InternalMessageInfo

func (m *TaskOrganizationIdentityInfo) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TaskOrganizationIdentityInfo) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *TaskOrganizationIdentityInfo) GetIdentityId() []byte {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

type TaskEvent struct {
	Type                 []byte   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TaskId               []byte   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	IdentityId           []byte   `protobuf:"bytes,3,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	Content              []byte   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	CreateAt             uint64   `protobuf:"varint,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskEvent) Reset()         { *m = TaskEvent{} }
func (m *TaskEvent) String() string { return proto.CompactTextString(m) }
func (*TaskEvent) ProtoMessage()    {}
func (*TaskEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59cdf46cb297048, []int{13}
}
func (m *TaskEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEvent.Merge(m, src)
}
func (m *TaskEvent) XXX_Size() int {
	return m.Size()
}
func (m *TaskEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEvent proto.InternalMessageInfo

func (m *TaskEvent) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TaskEvent) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskEvent) GetIdentityId() []byte {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

func (m *TaskEvent) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *TaskEvent) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func init() {
	proto.RegisterType((*PrepareMsg)(nil), "rpcapi.PrepareMsg")
	proto.RegisterType((*PrepareVote)(nil), "rpcapi.PrepareVote")
	proto.RegisterType((*ConfirmMsg)(nil), "rpcapi.ConfirmMsg")
	proto.RegisterType((*ConfirmVote)(nil), "rpcapi.ConfirmVote")
	proto.RegisterType((*CommitMsg)(nil), "rpcapi.CommitMsg")
	proto.RegisterType((*TaskResultMsg)(nil), "rpcapi.TaskResultMsg")
	proto.RegisterType((*TaskOption)(nil), "rpcapi.TaskOption")
	proto.RegisterType((*DataSupplierOption)(nil), "rpcapi.DataSupplierOption")
	proto.RegisterType((*PowerSupplierOption)(nil), "rpcapi.PowerSupplierOption")
	proto.RegisterType((*ReceiverOption)(nil), "rpcapi.ReceiverOption")
	proto.RegisterType((*TaskOperationCost)(nil), "rpcapi.TaskOperationCost")
	proto.RegisterType((*TaskPeerInfo)(nil), "rpcapi.TaskPeerInfo")
	proto.RegisterType((*TaskOrganizationIdentityInfo)(nil), "rpcapi.TaskOrganizationIdentityInfo")
	proto.RegisterType((*TaskEvent)(nil), "rpcapi.TaskEvent")
}

func init() { proto.RegisterFile("lib/consensus/twopc/message.proto", fileDescriptor_a59cdf46cb297048) }

var fileDescriptor_a59cdf46cb297048 = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x51, 0x6e, 0x23, 0x45,
	0x10, 0xd5, 0x38, 0xb6, 0x63, 0x97, 0xed, 0xac, 0xd2, 0x2c, 0xac, 0x77, 0x83, 0x82, 0xb1, 0x40,
	0xb2, 0x90, 0x88, 0x45, 0x16, 0x90, 0xe0, 0x07, 0x88, 0x59, 0x90, 0x25, 0x16, 0xa2, 0x61, 0xc5,
	0x07, 0x42, 0x1a, 0xb5, 0x67, 0x2a, 0xde, 0xd6, 0xce, 0x4c, 0xb5, 0xba, 0xdb, 0x31, 0xcb, 0x19,
	0xf8, 0x40, 0xe2, 0x07, 0x89, 0x13, 0x70, 0x01, 0xce, 0xc0, 0x0f, 0x12, 0xe2, 0x04, 0x28, 0x17,
	0x80, 0x23, 0xa0, 0xee, 0x99, 0xb1, 0x67, 0x36, 0xeb, 0x6c, 0xa2, 0xe4, 0xaf, 0xbb, 0xaa, 0xeb,
	0xf5, 0xab, 0x7a, 0x35, 0xd5, 0x03, 0xaf, 0xc7, 0x62, 0x36, 0x0e, 0x29, 0xd5, 0x98, 0xea, 0x85,
	0x1e, 0x9b, 0x25, 0xc9, 0x70, 0x9c, 0xa0, 0xd6, 0x7c, 0x8e, 0x07, 0x52, 0x91, 0x21, 0xd6, 0x54,
	0x32, 0xe4, 0x52, 0x0c, 0x7f, 0xf6, 0x00, 0x8e, 0x15, 0x4a, 0xae, 0xf0, 0xa1, 0x9e, 0xb3, 0xd7,
	0xa0, 0x23, 0x15, 0x49, 0xd2, 0x3c, 0x0e, 0x44, 0xd4, 0xf7, 0x06, 0xde, 0xa8, 0xeb, 0x43, 0x61,
	0x9a, 0x46, 0xec, 0x3e, 0x74, 0x0c, 0xd7, 0x4f, 0x02, 0x92, 0x46, 0x50, 0xda, 0xaf, 0x0d, 0xbc,
	0x51, 0xe7, 0x90, 0x1d, 0x64, 0x68, 0x07, 0x8f, 0xb8, 0x7e, 0xf2, 0x95, 0xf3, 0xf8, 0x60, 0x56,
	0x6b, 0xb6, 0x07, 0xed, 0x50, 0x21, 0x37, 0x18, 0x70, 0xd3, 0xdf, 0x1a, 0x78, 0xa3, 0xba, 0xdf,
	0xca, 0x0c, 0x9f, 0x18, 0xc6, 0xa0, 0xae, 0xc5, 0x3c, 0xed, 0xd7, 0xdd, 0x5d, 0x6e, 0x3d, 0xfc,
	0xb1, 0x06, 0x9d, 0x9c, 0xd5, 0x37, 0x64, 0xf0, 0xc5, 0xb4, 0xf6, 0xa0, 0xed, 0x68, 0x29, 0x8a,
	0xd1, 0x91, 0xea, 0xfa, 0x2d, 0x6b, 0xf0, 0x29, 0x46, 0xf6, 0x21, 0x34, 0x68, 0x99, 0xa2, 0x72,
	0x57, 0x77, 0x0e, 0xdf, 0xa8, 0xb0, 0x55, 0x73, 0x9e, 0x8a, 0x1f, 0xb8, 0xe5, 0x39, 0x8d, 0x30,
	0x35, 0xc2, 0x3c, 0x9d, 0xa6, 0x27, 0xe4, 0x67, 0x21, 0xf6, 0xe6, 0x53, 0x32, 0x58, 0xe4, 0x9b,
	0x91, 0x04, 0x6b, 0xca, 0x73, 0x7b, 0x07, 0xda, 0x12, 0x51, 0x05, 0x22, 0x3d, 0xa1, 0x7e, 0xc3,
	0x5d, 0x70, 0xbb, 0x7c, 0xc1, 0x31, 0xa2, 0x72, 0x80, 0x2d, 0x99, 0xaf, 0xaa, 0xe5, 0x68, 0x6e,
	0x28, 0xc7, 0x76, 0xa9, 0x1c, 0x7f, 0x7a, 0x00, 0x13, 0x4a, 0x4f, 0x84, 0x4a, 0x2e, 0x25, 0xd2,
	0x85, 0xd5, 0xb8, 0x0d, 0x0d, 0x94, 0x14, 0x3e, 0xce, 0x85, 0xc8, 0x36, 0xeb, 0x1a, 0xd5, 0xaf,
	0x5e, 0xa3, 0x4a, 0x3e, 0x8d, 0x0d, 0xf9, 0x34, 0x4b, 0xf9, 0xfc, 0xeb, 0x41, 0x27, 0xcf, 0xe7,
	0x72, 0xf2, 0xae, 0x38, 0xd7, 0xca, 0x9c, 0x2b, 0x69, 0x6e, 0x6d, 0x12, 0xbd, 0x7e, 0x6d, 0xd1,
	0x1b, 0xe7, 0x44, 0xbf, 0xb2, 0x82, 0xbf, 0x7b, 0xd0, 0x9e, 0x50, 0x92, 0x08, 0x73, 0x7d, 0x01,
	0xaf, 0xd3, 0xce, 0x15, 0xe2, 0xf5, 0x0d, 0xc4, 0x1b, 0x25, 0xe2, 0x7f, 0x7b, 0xd0, 0xb3, 0xc0,
	0x3e, 0xea, 0x45, 0x7c, 0x03, 0xe4, 0xef, 0xc0, 0xb6, 0x73, 0x8a, 0x28, 0x57, 0xac, 0x69, 0xb7,
	0xd3, 0x88, 0x7d, 0x00, 0xb7, 0x9c, 0x03, 0x4f, 0x31, 0x35, 0x41, 0x2c, 0xb4, 0xe5, 0xb7, 0x35,
	0xea, 0x1c, 0xee, 0x96, 0xf3, 0x7b, 0x60, 0xbd, 0x7e, 0xcf, 0x14, 0xcb, 0x2f, 0x84, 0x36, 0x57,
	0xef, 0xbf, 0xff, 0xea, 0x00, 0x8f, 0x2a, 0xe3, 0x69, 0x4d, 0xd8, 0xdb, 0x4c, 0xb8, 0x56, 0x21,
	0x5c, 0x44, 0xa5, 0x3c, 0xa9, 0x74, 0xdf, 0x97, 0x3c, 0xb9, 0x5e, 0xf7, 0x4d, 0xa1, 0xc7, 0xe3,
	0x39, 0x05, 0x7a, 0x21, 0x65, 0x2c, 0x50, 0xe5, 0x53, 0xe5, 0x72, 0x18, 0x5d, 0x1b, 0xfa, 0x75,
	0x1e, 0xc9, 0x3e, 0x82, 0x5e, 0xc4, 0x0d, 0x5f, 0x43, 0x35, 0x5d, 0x49, 0xef, 0x15, 0x50, 0x9f,
	0x72, 0xc3, 0x8b, 0xc3, 0xf9, 0xdc, 0xee, 0x46, 0x25, 0x1b, 0x3b, 0x82, 0x1d, 0x49, 0x4b, 0x54,
	0x6b, 0x84, 0x6d, 0x87, 0xb0, 0x57, 0x20, 0x1c, 0x5b, 0xef, 0x33, 0x10, 0x3d, 0x59, 0x36, 0xb2,
	0x77, 0xa1, 0xad, 0x30, 0x44, 0x71, 0x8a, 0x4a, 0xf7, 0x5b, 0x2e, 0xfc, 0x95, 0x22, 0xdc, 0xcf,
	0x1d, 0x79, 0xe4, 0xfa, 0x20, 0xfb, 0x18, 0x76, 0x48, 0xa2, 0x72, 0x19, 0x06, 0x21, 0x69, 0xd3,
	0x6f, 0xbb, 0x32, 0xdc, 0xad, 0xbe, 0x35, 0xf9, 0x89, 0x09, 0x69, 0xe3, 0xf7, 0xa8, 0xbc, 0x65,
	0xef, 0xc3, 0x9d, 0x90, 0xc7, 0xe1, 0x22, 0xb6, 0x9d, 0x11, 0x52, 0x6a, 0x14, 0x0f, 0x4d, 0x10,
	0x52, 0x84, 0x7d, 0x70, 0x72, 0xbd, 0xbc, 0x72, 0x4f, 0x72, 0xef, 0x84, 0x22, 0xb4, 0x71, 0xb6,
	0x06, 0x5a, 0xc6, 0xc2, 0x3c, 0x13, 0xd7, 0xc9, 0xe2, 0x56, 0xee, 0x4a, 0x5c, 0xa5, 0x0d, 0xbb,
	0xd5, 0x36, 0x1c, 0xfe, 0xe6, 0x01, 0x3b, 0x5f, 0x6d, 0xf6, 0x00, 0x3a, 0x09, 0x26, 0xb3, 0xe2,
	0xfd, 0xf0, 0xae, 0xa0, 0x34, 0x64, 0x81, 0xee, 0x45, 0x19, 0x40, 0x37, 0x41, 0xc3, 0x03, 0x27,
	0xf6, 0xaa, 0x53, 0xc1, 0xda, 0xec, 0xa5, 0xd3, 0x88, 0xbd, 0x05, 0xbb, 0x21, 0xc5, 0x8b, 0x24,
	0x0d, 0x44, 0x1a, 0xe1, 0xf7, 0xd9, 0x07, 0xb6, 0x35, 0xd8, 0x1a, 0xd5, 0xfd, 0x5b, 0x99, 0x63,
	0x6a, 0xed, 0xf6, 0x7b, 0x1a, 0x7e, 0x07, 0x2f, 0x3d, 0x47, 0xd6, 0x1b, 0xe2, 0x3a, 0xfc, 0xd5,
	0x83, 0x9d, 0xaa, 0xec, 0x37, 0x55, 0x85, 0x23, 0x68, 0x4b, 0x45, 0xa7, 0x22, 0xb2, 0x8d, 0x56,
	0x73, 0x8d, 0x76, 0x39, 0x90, 0x75, 0xd8, 0xf0, 0x17, 0x0f, 0x76, 0xcf, 0x75, 0x16, 0xbb, 0x0b,
	0x2d, 0xdb, 0x82, 0x41, 0x82, 0x89, 0x63, 0x57, 0xf7, 0xb7, 0xed, 0xfe, 0x21, 0x26, 0xec, 0x4d,
	0xd8, 0x71, 0x2e, 0xa9, 0x28, 0x44, 0xad, 0x49, 0xe5, 0x6f, 0x54, 0xcf, 0x5a, 0x8f, 0x0b, 0xe3,
	0xea, 0xd8, 0x8c, 0xa7, 0xd1, 0x52, 0x44, 0xa6, 0x78, 0x7e, 0xdd, 0xb1, 0xa3, 0xc2, 0xc8, 0xee,
	0x41, 0x2b, 0x5a, 0x64, 0x17, 0x17, 0xe3, 0xb9, 0xd8, 0x0f, 0x0f, 0xa1, 0x5b, 0xfe, 0xa1, 0x60,
	0x3b, 0x50, 0x13, 0x32, 0x9f, 0x57, 0x35, 0x21, 0xed, 0xa4, 0x93, 0xa4, 0x4c, 0x2e, 0xbe, 0x5b,
	0x0f, 0x63, 0x78, 0xf5, 0xa2, 0xcc, 0x6d, 0x8c, 0x9b, 0x5f, 0x19, 0x8a, 0x5b, 0xdb, 0x89, 0x97,
	0x52, 0x84, 0xa5, 0x89, 0x67, 0xb7, 0xd3, 0xc8, 0x4e, 0x7e, 0x91, 0x07, 0xaf, 0xe7, 0x37, 0x14,
	0xa6, 0x69, 0x34, 0xfc, 0xc9, 0x83, 0xf6, 0x6a, 0x4a, 0x5b, 0x6c, 0xf3, 0x54, 0xae, 0xb0, 0xed,
	0x7a, 0xf3, 0x34, 0x7d, 0x11, 0x36, 0xeb, 0xc3, 0xb6, 0xfd, 0x16, 0x31, 0x35, 0xf9, 0x4f, 0x58,
	0xb1, 0xbd, 0x70, 0xfc, 0x1f, 0x4d, 0xfe, 0x38, 0xdb, 0xf7, 0xfe, 0x3a, 0xdb, 0xf7, 0xfe, 0x39,
	0xdb, 0xf7, 0xbe, 0x7d, 0x6f, 0x2e, 0xcc, 0xe3, 0xc5, 0xec, 0x20, 0xa4, 0x64, 0xec, 0x93, 0x46,
	0x63, 0xf8, 0x67, 0x31, 0x2d, 0xc7, 0x13, 0xae, 0x94, 0x40, 0xf5, 0xf6, 0xe7, 0x34, 0x7e, 0xce,
	0xaf, 0xf3, 0xac, 0xe9, 0xfe, 0x99, 0xef, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x44, 0x39, 0x52,
	0xc8, 0x58, 0x0b, 0x00, 0x00,
}

func (m *PrepareMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if m.TaskOption != nil {
		{
			size, err := m.TaskOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrepareVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x30
	}
	if m.PeerInfo != nil {
		{
			size, err := m.PeerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VoteOption) > 0 {
		i -= len(m.VoteOption)
		copy(dAtA[i:], m.VoteOption)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VoteOption)))
		i--
		dAtA[i] = 0x22
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskRole) > 0 {
		i -= len(m.TaskRole)
		copy(dAtA[i:], m.TaskRole)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskRole)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x32
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Epoch != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TaskRole) > 0 {
		i -= len(m.TaskRole)
		copy(dAtA[i:], m.TaskRole)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskRole)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.VoteOption) > 0 {
		i -= len(m.VoteOption)
		copy(dAtA[i:], m.VoteOption)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VoteOption)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TaskRole) > 0 {
		i -= len(m.TaskRole)
		copy(dAtA[i:], m.TaskRole)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskRole)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Epoch != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskRole) > 0 {
		i -= len(m.TaskRole)
		copy(dAtA[i:], m.TaskRole)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskRole)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskResultMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResultMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskResultMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x32
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TaskEventList) > 0 {
		for iNdEx := len(m.TaskEventList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskEventList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskRole) > 0 {
		i -= len(m.TaskRole)
		copy(dAtA[i:], m.TaskRole)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskRole)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x60
	}
	if len(m.DatasplitContractCode) > 0 {
		i -= len(m.DatasplitContractCode)
		copy(dAtA[i:], m.DatasplitContractCode)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DatasplitContractCode)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CalculateContractCode) > 0 {
		i -= len(m.CalculateContractCode)
		copy(dAtA[i:], m.CalculateContractCode)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CalculateContractCode)))
		i--
		dAtA[i] = 0x52
	}
	if m.OperationCost != nil {
		{
			size, err := m.OperationCost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PowerSupplier) > 0 {
		for iNdEx := len(m.PowerSupplier) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PowerSupplier[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DataSupplier) > 0 {
		for iNdEx := len(m.DataSupplier) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSupplier[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.AlgoSupplier != nil {
		{
			size, err := m.AlgoSupplier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TaskName) > 0 {
		i -= len(m.TaskName)
		copy(dAtA[i:], m.TaskName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskRole) > 0 {
		i -= len(m.TaskRole)
		copy(dAtA[i:], m.TaskRole)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskRole)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataSupplierOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSupplierOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataSupplierOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ColumnIndexList) > 0 {
		dAtA11 := make([]byte, len(m.ColumnIndexList)*10)
		var j10 int
		for _, num := range m.ColumnIndexList {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintMessage(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetaDataId) > 0 {
		i -= len(m.MetaDataId)
		copy(dAtA[i:], m.MetaDataId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MetaDataId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MemberInfo != nil {
		{
			size, err := m.MemberInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PowerSupplierOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PowerSupplierOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PowerSupplierOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemberInfo != nil {
		{
			size, err := m.MemberInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReceiverOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiverOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReceiverOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MemberInfo != nil {
		{
			size, err := m.MemberInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskOperationCost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskOperationCost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskOperationCost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Duration != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.CostBandwidth != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CostBandwidth))
		i--
		dAtA[i] = 0x18
	}
	if m.CostProcessor != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CostProcessor))
		i--
		dAtA[i] = 0x10
	}
	if m.CostMem != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CostMem))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskPeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskPeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskPeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskOrganizationIdentityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskOrganizationIdentityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskOrganizationIdentityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrepareMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskOption != nil {
		l = m.TaskOption.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrepareVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskRole)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.VoteOption)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.PeerInfo != nil {
		l = m.PeerInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfirmMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskRole)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessage(uint64(m.Epoch))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfirmVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessage(uint64(m.Epoch))
	}
	l = len(m.TaskRole)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.VoteOption)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommitMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskRole)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskResultMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskRole)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.TaskEventList) > 0 {
		for _, e := range m.TaskEventList {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskRole)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.AlgoSupplier != nil {
		l = m.AlgoSupplier.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.DataSupplier) > 0 {
		for _, e := range m.DataSupplier {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.PowerSupplier) > 0 {
		for _, e := range m.PowerSupplier {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.OperationCost != nil {
		l = m.OperationCost.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CalculateContractCode)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.DatasplitContractCode)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataSupplierOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberInfo != nil {
		l = m.MemberInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.MetaDataId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.ColumnIndexList) > 0 {
		l = 0
		for _, e := range m.ColumnIndexList {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PowerSupplierOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberInfo != nil {
		l = m.MemberInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReceiverOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberInfo != nil {
		l = m.MemberInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskOperationCost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CostMem != 0 {
		n += 1 + sovMessage(uint64(m.CostMem))
	}
	if m.CostProcessor != 0 {
		n += 1 + sovMessage(uint64(m.CostProcessor))
	}
	if m.CostBandwidth != 0 {
		n += 1 + sovMessage(uint64(m.CostBandwidth))
	}
	if m.Duration != 0 {
		n += 1 + sovMessage(uint64(m.Duration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskPeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskOrganizationIdentityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrepareMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = append(m.ProposalId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalId == nil {
				m.ProposalId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskOption == nil {
				m.TaskOption = &TaskOption{}
			}
			if err := m.TaskOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = append(m.ProposalId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalId == nil {
				m.ProposalId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRole", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskRole = append(m.TaskRole[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskRole == nil {
				m.TaskRole = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TaskOrganizationIdentityInfo{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteOption = append(m.VoteOption[:0], dAtA[iNdEx:postIndex]...)
			if m.VoteOption == nil {
				m.VoteOption = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerInfo == nil {
				m.PeerInfo = &TaskPeerInfo{}
			}
			if err := m.PeerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = append(m.ProposalId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalId == nil {
				m.ProposalId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRole", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskRole = append(m.TaskRole[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskRole == nil {
				m.TaskRole = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TaskOrganizationIdentityInfo{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = append(m.ProposalId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalId == nil {
				m.ProposalId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRole", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskRole = append(m.TaskRole[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskRole == nil {
				m.TaskRole = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TaskOrganizationIdentityInfo{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteOption = append(m.VoteOption[:0], dAtA[iNdEx:postIndex]...)
			if m.VoteOption == nil {
				m.VoteOption = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = append(m.ProposalId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalId == nil {
				m.ProposalId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRole", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskRole = append(m.TaskRole[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskRole == nil {
				m.TaskRole = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TaskOrganizationIdentityInfo{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskResultMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResultMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResultMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = append(m.ProposalId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalId == nil {
				m.ProposalId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRole", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskRole = append(m.TaskRole[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskRole == nil {
				m.TaskRole = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = append(m.TaskId[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskId == nil {
				m.TaskId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskEventList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskEventList = append(m.TaskEventList, &TaskEvent{})
			if err := m.TaskEventList[len(m.TaskEventList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRole", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskRole = append(m.TaskRole[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskRole == nil {
				m.TaskRole = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = append(m.TaskId[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskId == nil {
				m.TaskId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = append(m.TaskName[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskName == nil {
				m.TaskName = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TaskOrganizationIdentityInfo{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgoSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AlgoSupplier == nil {
				m.AlgoSupplier = &TaskOrganizationIdentityInfo{}
			}
			if err := m.AlgoSupplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSupplier = append(m.DataSupplier, &DataSupplierOption{})
			if err := m.DataSupplier[len(m.DataSupplier)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerSupplier = append(m.PowerSupplier, &PowerSupplierOption{})
			if err := m.PowerSupplier[len(m.PowerSupplier)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &ReceiverOption{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationCost == nil {
				m.OperationCost = &TaskOperationCost{}
			}
			if err := m.OperationCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateContractCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalculateContractCode = append(m.CalculateContractCode[:0], dAtA[iNdEx:postIndex]...)
			if m.CalculateContractCode == nil {
				m.CalculateContractCode = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasplitContractCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasplitContractCode = append(m.DatasplitContractCode[:0], dAtA[iNdEx:postIndex]...)
			if m.DatasplitContractCode == nil {
				m.DatasplitContractCode = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataSupplierOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSupplierOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSupplierOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberInfo == nil {
				m.MemberInfo = &TaskOrganizationIdentityInfo{}
			}
			if err := m.MemberInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaDataId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaDataId = append(m.MetaDataId[:0], dAtA[iNdEx:postIndex]...)
			if m.MetaDataId == nil {
				m.MetaDataId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIndexList = append(m.ColumnIndexList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIndexList) == 0 {
					m.ColumnIndexList = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIndexList = append(m.ColumnIndexList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIndexList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PowerSupplierOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowerSupplierOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowerSupplierOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberInfo == nil {
				m.MemberInfo = &TaskOrganizationIdentityInfo{}
			}
			if err := m.MemberInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiverOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiverOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiverOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberInfo == nil {
				m.MemberInfo = &TaskOrganizationIdentityInfo{}
			}
			if err := m.MemberInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, &TaskOrganizationIdentityInfo{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskOperationCost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskOperationCost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskOperationCost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostMem", wireType)
			}
			m.CostMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostProcessor", wireType)
			}
			m.CostProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostProcessor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostBandwidth", wireType)
			}
			m.CostBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskPeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskPeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskPeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip[:0], dAtA[iNdEx:postIndex]...)
			if m.Ip == nil {
				m.Ip = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port[:0], dAtA[iNdEx:postIndex]...)
			if m.Port == nil {
				m.Port = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskOrganizationIdentityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskOrganizationIdentityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskOrganizationIdentityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = append(m.IdentityId[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityId == nil {
				m.IdentityId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type[:0], dAtA[iNdEx:postIndex]...)
			if m.Type == nil {
				m.Type = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = append(m.TaskId[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskId == nil {
				m.TaskId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = append(m.IdentityId[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityId == nil {
				m.IdentityId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
