// Code generated by fastssz. DO NOT EDIT.
// Hash: e2f7920a992ab68c25ff914d7140d73187c7e4d4e674346840b0fe599a7d7098
package twopc

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the MsgOption object
func (m *MsgOption) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MsgOption object to a target array
func (m *MsgOption) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(32)

	// Offset (0) 'ProposalId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.ProposalId)

	// Field (1) 'SenderRole'
	dst = ssz.MarshalUint64(dst, m.SenderRole)

	// Offset (2) 'SenderPartyId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.SenderPartyId)

	// Field (3) 'ReceiverRole'
	dst = ssz.MarshalUint64(dst, m.ReceiverRole)

	// Offset (4) 'ReceiverPartyId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.ReceiverPartyId)

	// Offset (5) 'MsgOwner'
	dst = ssz.WriteOffset(dst, offset)
	if m.MsgOwner == nil {
		m.MsgOwner = new(TaskOrganizationIdentityInfo)
	}
	offset += m.MsgOwner.SizeSSZ()

	// Field (0) 'ProposalId'
	if len(m.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.ProposalId...)

	// Field (2) 'SenderPartyId'
	if len(m.SenderPartyId) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.SenderPartyId...)

	// Field (4) 'ReceiverPartyId'
	if len(m.ReceiverPartyId) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.ReceiverPartyId...)

	// Field (5) 'MsgOwner'
	if dst, err = m.MsgOwner.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the MsgOption object
func (m *MsgOption) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 32 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o2, o4, o5 uint64

	// Offset (0) 'ProposalId'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 32 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'SenderRole'
	m.SenderRole = ssz.UnmarshallUint64(buf[4:12])

	// Offset (2) 'SenderPartyId'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o0 > o2 {
		return ssz.ErrOffset
	}

	// Field (3) 'ReceiverRole'
	m.ReceiverRole = ssz.UnmarshallUint64(buf[16:24])

	// Offset (4) 'ReceiverPartyId'
	if o4 = ssz.ReadOffset(buf[24:28]); o4 > size || o2 > o4 {
		return ssz.ErrOffset
	}

	// Offset (5) 'MsgOwner'
	if o5 = ssz.ReadOffset(buf[28:32]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Field (0) 'ProposalId'
	{
		buf = tail[o0:o2]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(m.ProposalId) == 0 {
			m.ProposalId = make([]byte, 0, len(buf))
		}
		m.ProposalId = append(m.ProposalId, buf...)
	}

	// Field (2) 'SenderPartyId'
	{
		buf = tail[o2:o4]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(m.SenderPartyId) == 0 {
			m.SenderPartyId = make([]byte, 0, len(buf))
		}
		m.SenderPartyId = append(m.SenderPartyId, buf...)
	}

	// Field (4) 'ReceiverPartyId'
	{
		buf = tail[o4:o5]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(m.ReceiverPartyId) == 0 {
			m.ReceiverPartyId = make([]byte, 0, len(buf))
		}
		m.ReceiverPartyId = append(m.ReceiverPartyId, buf...)
	}

	// Field (5) 'MsgOwner'
	{
		buf = tail[o5:]
		if m.MsgOwner == nil {
			m.MsgOwner = new(TaskOrganizationIdentityInfo)
		}
		if err = m.MsgOwner.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MsgOption object
func (m *MsgOption) SizeSSZ() (size int) {
	size = 32

	// Field (0) 'ProposalId'
	size += len(m.ProposalId)

	// Field (2) 'SenderPartyId'
	size += len(m.SenderPartyId)

	// Field (4) 'ReceiverPartyId'
	size += len(m.ReceiverPartyId)

	// Field (5) 'MsgOwner'
	if m.MsgOwner == nil {
		m.MsgOwner = new(TaskOrganizationIdentityInfo)
	}
	size += m.MsgOwner.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the MsgOption object
func (m *MsgOption) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MsgOption object with a hasher
func (m *MsgOption) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ProposalId'
	if len(m.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(m.ProposalId)

	// Field (1) 'SenderRole'
	hh.PutUint64(m.SenderRole)

	// Field (2) 'SenderPartyId'
	if len(m.SenderPartyId) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(m.SenderPartyId)

	// Field (3) 'ReceiverRole'
	hh.PutUint64(m.ReceiverRole)

	// Field (4) 'ReceiverPartyId'
	if len(m.ReceiverPartyId) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(m.ReceiverPartyId)

	// Field (5) 'MsgOwner'
	if err = m.MsgOwner.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the PrepareMsg object
func (p *PrepareMsg) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PrepareMsg object to a target array
func (p *PrepareMsg) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Offset (0) 'MsgOption'
	dst = ssz.WriteOffset(dst, offset)
	if p.MsgOption == nil {
		p.MsgOption = new(MsgOption)
	}
	offset += p.MsgOption.SizeSSZ()

	// Offset (1) 'TaskInfo'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.TaskInfo)

	// Field (2) 'CreateAt'
	dst = ssz.MarshalUint64(dst, p.CreateAt)

	// Offset (3) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.Sign)

	// Field (0) 'MsgOption'
	if dst, err = p.MsgOption.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'TaskInfo'
	if len(p.TaskInfo) > 16777216 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.TaskInfo...)

	// Field (3) 'Sign'
	if len(p.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the PrepareMsg object
func (p *PrepareMsg) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o3 uint64

	// Offset (0) 'MsgOption'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskInfo'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'CreateAt'
	p.CreateAt = ssz.UnmarshallUint64(buf[8:16])

	// Offset (3) 'Sign'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'MsgOption'
	{
		buf = tail[o0:o1]
		if p.MsgOption == nil {
			p.MsgOption = new(MsgOption)
		}
		if err = p.MsgOption.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'TaskInfo'
	{
		buf = tail[o1:o3]
		if len(buf) > 16777216 {
			return ssz.ErrBytesLength
		}
		if cap(p.TaskInfo) == 0 {
			p.TaskInfo = make([]byte, 0, len(buf))
		}
		p.TaskInfo = append(p.TaskInfo, buf...)
	}

	// Field (3) 'Sign'
	{
		buf = tail[o3:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(p.Sign) == 0 {
			p.Sign = make([]byte, 0, len(buf))
		}
		p.Sign = append(p.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PrepareMsg object
func (p *PrepareMsg) SizeSSZ() (size int) {
	size = 20

	// Field (0) 'MsgOption'
	if p.MsgOption == nil {
		p.MsgOption = new(MsgOption)
	}
	size += p.MsgOption.SizeSSZ()

	// Field (1) 'TaskInfo'
	size += len(p.TaskInfo)

	// Field (3) 'Sign'
	size += len(p.Sign)

	return
}

// HashTreeRoot ssz hashes the PrepareMsg object
func (p *PrepareMsg) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PrepareMsg object with a hasher
func (p *PrepareMsg) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgOption'
	if err = p.MsgOption.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'TaskInfo'
	if len(p.TaskInfo) > 16777216 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.TaskInfo)

	// Field (2) 'CreateAt'
	hh.PutUint64(p.CreateAt)

	// Field (3) 'Sign'
	if len(p.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the PrepareVote object
func (p *PrepareVote) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PrepareVote object to a target array
func (p *PrepareVote) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(24)

	// Offset (0) 'MsgOption'
	dst = ssz.WriteOffset(dst, offset)
	if p.MsgOption == nil {
		p.MsgOption = new(MsgOption)
	}
	offset += p.MsgOption.SizeSSZ()

	// Offset (1) 'VoteOption'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.VoteOption)

	// Offset (2) 'PeerInfo'
	dst = ssz.WriteOffset(dst, offset)
	if p.PeerInfo == nil {
		p.PeerInfo = new(TaskPeerInfo)
	}
	offset += p.PeerInfo.SizeSSZ()

	// Field (3) 'CreateAt'
	dst = ssz.MarshalUint64(dst, p.CreateAt)

	// Offset (4) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.Sign)

	// Field (0) 'MsgOption'
	if dst, err = p.MsgOption.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'VoteOption'
	if len(p.VoteOption) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.VoteOption...)

	// Field (2) 'PeerInfo'
	if dst, err = p.PeerInfo.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'Sign'
	if len(p.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the PrepareVote object
func (p *PrepareVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 24 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o4 uint64

	// Offset (0) 'MsgOption'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 24 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'VoteOption'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'PeerInfo'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (3) 'CreateAt'
	p.CreateAt = ssz.UnmarshallUint64(buf[12:20])

	// Offset (4) 'Sign'
	if o4 = ssz.ReadOffset(buf[20:24]); o4 > size || o2 > o4 {
		return ssz.ErrOffset
	}

	// Field (0) 'MsgOption'
	{
		buf = tail[o0:o1]
		if p.MsgOption == nil {
			p.MsgOption = new(MsgOption)
		}
		if err = p.MsgOption.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'VoteOption'
	{
		buf = tail[o1:o2]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(p.VoteOption) == 0 {
			p.VoteOption = make([]byte, 0, len(buf))
		}
		p.VoteOption = append(p.VoteOption, buf...)
	}

	// Field (2) 'PeerInfo'
	{
		buf = tail[o2:o4]
		if p.PeerInfo == nil {
			p.PeerInfo = new(TaskPeerInfo)
		}
		if err = p.PeerInfo.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (4) 'Sign'
	{
		buf = tail[o4:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(p.Sign) == 0 {
			p.Sign = make([]byte, 0, len(buf))
		}
		p.Sign = append(p.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PrepareVote object
func (p *PrepareVote) SizeSSZ() (size int) {
	size = 24

	// Field (0) 'MsgOption'
	if p.MsgOption == nil {
		p.MsgOption = new(MsgOption)
	}
	size += p.MsgOption.SizeSSZ()

	// Field (1) 'VoteOption'
	size += len(p.VoteOption)

	// Field (2) 'PeerInfo'
	if p.PeerInfo == nil {
		p.PeerInfo = new(TaskPeerInfo)
	}
	size += p.PeerInfo.SizeSSZ()

	// Field (4) 'Sign'
	size += len(p.Sign)

	return
}

// HashTreeRoot ssz hashes the PrepareVote object
func (p *PrepareVote) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PrepareVote object with a hasher
func (p *PrepareVote) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgOption'
	if err = p.MsgOption.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'VoteOption'
	if len(p.VoteOption) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.VoteOption)

	// Field (2) 'PeerInfo'
	if err = p.PeerInfo.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'CreateAt'
	hh.PutUint64(p.CreateAt)

	// Field (4) 'Sign'
	if len(p.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ConfirmMsg object
func (c *ConfirmMsg) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConfirmMsg object to a target array
func (c *ConfirmMsg) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Offset (0) 'MsgOption'
	dst = ssz.WriteOffset(dst, offset)
	if c.MsgOption == nil {
		c.MsgOption = new(MsgOption)
	}
	offset += c.MsgOption.SizeSSZ()

	// Offset (1) 'Peers'
	dst = ssz.WriteOffset(dst, offset)
	if c.Peers == nil {
		c.Peers = new(ConfirmTaskPeerInfo)
	}
	offset += c.Peers.SizeSSZ()

	// Field (2) 'CreateAt'
	dst = ssz.MarshalUint64(dst, c.CreateAt)

	// Offset (3) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Sign)

	// Field (0) 'MsgOption'
	if dst, err = c.MsgOption.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Peers'
	if dst, err = c.Peers.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConfirmMsg object
func (c *ConfirmMsg) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o3 uint64

	// Offset (0) 'MsgOption'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Peers'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'CreateAt'
	c.CreateAt = ssz.UnmarshallUint64(buf[8:16])

	// Offset (3) 'Sign'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'MsgOption'
	{
		buf = tail[o0:o1]
		if c.MsgOption == nil {
			c.MsgOption = new(MsgOption)
		}
		if err = c.MsgOption.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'Peers'
	{
		buf = tail[o1:o3]
		if c.Peers == nil {
			c.Peers = new(ConfirmTaskPeerInfo)
		}
		if err = c.Peers.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'Sign'
	{
		buf = tail[o3:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(c.Sign) == 0 {
			c.Sign = make([]byte, 0, len(buf))
		}
		c.Sign = append(c.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConfirmMsg object
func (c *ConfirmMsg) SizeSSZ() (size int) {
	size = 20

	// Field (0) 'MsgOption'
	if c.MsgOption == nil {
		c.MsgOption = new(MsgOption)
	}
	size += c.MsgOption.SizeSSZ()

	// Field (1) 'Peers'
	if c.Peers == nil {
		c.Peers = new(ConfirmTaskPeerInfo)
	}
	size += c.Peers.SizeSSZ()

	// Field (3) 'Sign'
	size += len(c.Sign)

	return
}

// HashTreeRoot ssz hashes the ConfirmMsg object
func (c *ConfirmMsg) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConfirmMsg object with a hasher
func (c *ConfirmMsg) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgOption'
	if err = c.MsgOption.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Peers'
	if err = c.Peers.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'CreateAt'
	hh.PutUint64(c.CreateAt)

	// Field (3) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ConfirmTaskPeerInfo object
func (c *ConfirmTaskPeerInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConfirmTaskPeerInfo object to a target array
func (c *ConfirmTaskPeerInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Offset (0) 'OwnerPeerInfo'
	dst = ssz.WriteOffset(dst, offset)
	if c.OwnerPeerInfo == nil {
		c.OwnerPeerInfo = new(TaskPeerInfo)
	}
	offset += c.OwnerPeerInfo.SizeSSZ()

	// Offset (1) 'DataSupplierPeerInfoList'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.DataSupplierPeerInfoList); ii++ {
		offset += 4
		offset += c.DataSupplierPeerInfoList[ii].SizeSSZ()
	}

	// Offset (2) 'PowerSupplierPeerInfoList'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.PowerSupplierPeerInfoList); ii++ {
		offset += 4
		offset += c.PowerSupplierPeerInfoList[ii].SizeSSZ()
	}

	// Offset (3) 'ResultReceiverPeerInfoList'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.ResultReceiverPeerInfoList); ii++ {
		offset += 4
		offset += c.ResultReceiverPeerInfoList[ii].SizeSSZ()
	}

	// Field (0) 'OwnerPeerInfo'
	if dst, err = c.OwnerPeerInfo.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'DataSupplierPeerInfoList'
	if len(c.DataSupplierPeerInfoList) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(c.DataSupplierPeerInfoList)
		for ii := 0; ii < len(c.DataSupplierPeerInfoList); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += c.DataSupplierPeerInfoList[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(c.DataSupplierPeerInfoList); ii++ {
		if dst, err = c.DataSupplierPeerInfoList[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'PowerSupplierPeerInfoList'
	if len(c.PowerSupplierPeerInfoList) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(c.PowerSupplierPeerInfoList)
		for ii := 0; ii < len(c.PowerSupplierPeerInfoList); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += c.PowerSupplierPeerInfoList[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(c.PowerSupplierPeerInfoList); ii++ {
		if dst, err = c.PowerSupplierPeerInfoList[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (3) 'ResultReceiverPeerInfoList'
	if len(c.ResultReceiverPeerInfoList) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(c.ResultReceiverPeerInfoList)
		for ii := 0; ii < len(c.ResultReceiverPeerInfoList); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += c.ResultReceiverPeerInfoList[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(c.ResultReceiverPeerInfoList); ii++ {
		if dst, err = c.ResultReceiverPeerInfoList[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ConfirmTaskPeerInfo object
func (c *ConfirmTaskPeerInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3 uint64

	// Offset (0) 'OwnerPeerInfo'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'DataSupplierPeerInfoList'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'PowerSupplierPeerInfoList'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'ResultReceiverPeerInfoList'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'OwnerPeerInfo'
	{
		buf = tail[o0:o1]
		if c.OwnerPeerInfo == nil {
			c.OwnerPeerInfo = new(TaskPeerInfo)
		}
		if err = c.OwnerPeerInfo.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'DataSupplierPeerInfoList'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		c.DataSupplierPeerInfoList = make([]*TaskPeerInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if c.DataSupplierPeerInfoList[indx] == nil {
				c.DataSupplierPeerInfoList[indx] = new(TaskPeerInfo)
			}
			if err = c.DataSupplierPeerInfoList[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'PowerSupplierPeerInfoList'
	{
		buf = tail[o2:o3]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		c.PowerSupplierPeerInfoList = make([]*TaskPeerInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if c.PowerSupplierPeerInfoList[indx] == nil {
				c.PowerSupplierPeerInfoList[indx] = new(TaskPeerInfo)
			}
			if err = c.PowerSupplierPeerInfoList[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (3) 'ResultReceiverPeerInfoList'
	{
		buf = tail[o3:]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		c.ResultReceiverPeerInfoList = make([]*TaskPeerInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if c.ResultReceiverPeerInfoList[indx] == nil {
				c.ResultReceiverPeerInfoList[indx] = new(TaskPeerInfo)
			}
			if err = c.ResultReceiverPeerInfoList[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConfirmTaskPeerInfo object
func (c *ConfirmTaskPeerInfo) SizeSSZ() (size int) {
	size = 16

	// Field (0) 'OwnerPeerInfo'
	if c.OwnerPeerInfo == nil {
		c.OwnerPeerInfo = new(TaskPeerInfo)
	}
	size += c.OwnerPeerInfo.SizeSSZ()

	// Field (1) 'DataSupplierPeerInfoList'
	for ii := 0; ii < len(c.DataSupplierPeerInfoList); ii++ {
		size += 4
		size += c.DataSupplierPeerInfoList[ii].SizeSSZ()
	}

	// Field (2) 'PowerSupplierPeerInfoList'
	for ii := 0; ii < len(c.PowerSupplierPeerInfoList); ii++ {
		size += 4
		size += c.PowerSupplierPeerInfoList[ii].SizeSSZ()
	}

	// Field (3) 'ResultReceiverPeerInfoList'
	for ii := 0; ii < len(c.ResultReceiverPeerInfoList); ii++ {
		size += 4
		size += c.ResultReceiverPeerInfoList[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the ConfirmTaskPeerInfo object
func (c *ConfirmTaskPeerInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConfirmTaskPeerInfo object with a hasher
func (c *ConfirmTaskPeerInfo) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'OwnerPeerInfo'
	if err = c.OwnerPeerInfo.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'DataSupplierPeerInfoList'
	{
		subIndx := hh.Index()
		num := uint64(len(c.DataSupplierPeerInfoList))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = c.DataSupplierPeerInfoList[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	// Field (2) 'PowerSupplierPeerInfoList'
	{
		subIndx := hh.Index()
		num := uint64(len(c.PowerSupplierPeerInfoList))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = c.PowerSupplierPeerInfoList[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	// Field (3) 'ResultReceiverPeerInfoList'
	{
		subIndx := hh.Index()
		num := uint64(len(c.ResultReceiverPeerInfoList))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = c.ResultReceiverPeerInfoList[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ConfirmVote object
func (c *ConfirmVote) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConfirmVote object to a target array
func (c *ConfirmVote) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Offset (0) 'MsgOption'
	dst = ssz.WriteOffset(dst, offset)
	if c.MsgOption == nil {
		c.MsgOption = new(MsgOption)
	}
	offset += c.MsgOption.SizeSSZ()

	// Offset (1) 'VoteOption'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.VoteOption)

	// Field (2) 'CreateAt'
	dst = ssz.MarshalUint64(dst, c.CreateAt)

	// Offset (3) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Sign)

	// Field (0) 'MsgOption'
	if dst, err = c.MsgOption.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'VoteOption'
	if len(c.VoteOption) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.VoteOption...)

	// Field (3) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConfirmVote object
func (c *ConfirmVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o3 uint64

	// Offset (0) 'MsgOption'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'VoteOption'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'CreateAt'
	c.CreateAt = ssz.UnmarshallUint64(buf[8:16])

	// Offset (3) 'Sign'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'MsgOption'
	{
		buf = tail[o0:o1]
		if c.MsgOption == nil {
			c.MsgOption = new(MsgOption)
		}
		if err = c.MsgOption.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'VoteOption'
	{
		buf = tail[o1:o3]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(c.VoteOption) == 0 {
			c.VoteOption = make([]byte, 0, len(buf))
		}
		c.VoteOption = append(c.VoteOption, buf...)
	}

	// Field (3) 'Sign'
	{
		buf = tail[o3:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(c.Sign) == 0 {
			c.Sign = make([]byte, 0, len(buf))
		}
		c.Sign = append(c.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConfirmVote object
func (c *ConfirmVote) SizeSSZ() (size int) {
	size = 20

	// Field (0) 'MsgOption'
	if c.MsgOption == nil {
		c.MsgOption = new(MsgOption)
	}
	size += c.MsgOption.SizeSSZ()

	// Field (1) 'VoteOption'
	size += len(c.VoteOption)

	// Field (3) 'Sign'
	size += len(c.Sign)

	return
}

// HashTreeRoot ssz hashes the ConfirmVote object
func (c *ConfirmVote) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConfirmVote object with a hasher
func (c *ConfirmVote) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgOption'
	if err = c.MsgOption.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'VoteOption'
	if len(c.VoteOption) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.VoteOption)

	// Field (2) 'CreateAt'
	hh.PutUint64(c.CreateAt)

	// Field (3) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the CommitMsg object
func (c *CommitMsg) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CommitMsg object to a target array
func (c *CommitMsg) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Offset (0) 'MsgOption'
	dst = ssz.WriteOffset(dst, offset)
	if c.MsgOption == nil {
		c.MsgOption = new(MsgOption)
	}
	offset += c.MsgOption.SizeSSZ()

	// Field (1) 'CreateAt'
	dst = ssz.MarshalUint64(dst, c.CreateAt)

	// Offset (2) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Sign)

	// Field (0) 'MsgOption'
	if dst, err = c.MsgOption.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the CommitMsg object
func (c *CommitMsg) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o2 uint64

	// Offset (0) 'MsgOption'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'CreateAt'
	c.CreateAt = ssz.UnmarshallUint64(buf[4:12])

	// Offset (2) 'Sign'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o0 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'MsgOption'
	{
		buf = tail[o0:o2]
		if c.MsgOption == nil {
			c.MsgOption = new(MsgOption)
		}
		if err = c.MsgOption.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (2) 'Sign'
	{
		buf = tail[o2:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(c.Sign) == 0 {
			c.Sign = make([]byte, 0, len(buf))
		}
		c.Sign = append(c.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CommitMsg object
func (c *CommitMsg) SizeSSZ() (size int) {
	size = 16

	// Field (0) 'MsgOption'
	if c.MsgOption == nil {
		c.MsgOption = new(MsgOption)
	}
	size += c.MsgOption.SizeSSZ()

	// Field (2) 'Sign'
	size += len(c.Sign)

	return
}

// HashTreeRoot ssz hashes the CommitMsg object
func (c *CommitMsg) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CommitMsg object with a hasher
func (c *CommitMsg) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgOption'
	if err = c.MsgOption.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'CreateAt'
	hh.PutUint64(c.CreateAt)

	// Field (2) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the TaskResultMsg object
func (t *TaskResultMsg) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TaskResultMsg object to a target array
func (t *TaskResultMsg) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Offset (0) 'MsgOption'
	dst = ssz.WriteOffset(dst, offset)
	if t.MsgOption == nil {
		t.MsgOption = new(MsgOption)
	}
	offset += t.MsgOption.SizeSSZ()

	// Offset (1) 'TaskEventList'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(t.TaskEventList); ii++ {
		offset += 4
		offset += t.TaskEventList[ii].SizeSSZ()
	}

	// Field (2) 'CreateAt'
	dst = ssz.MarshalUint64(dst, t.CreateAt)

	// Offset (3) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Sign)

	// Field (0) 'MsgOption'
	if dst, err = t.MsgOption.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'TaskEventList'
	if len(t.TaskEventList) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(t.TaskEventList)
		for ii := 0; ii < len(t.TaskEventList); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += t.TaskEventList[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(t.TaskEventList); ii++ {
		if dst, err = t.TaskEventList[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (3) 'Sign'
	if len(t.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the TaskResultMsg object
func (t *TaskResultMsg) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o3 uint64

	// Offset (0) 'MsgOption'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskEventList'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'CreateAt'
	t.CreateAt = ssz.UnmarshallUint64(buf[8:16])

	// Offset (3) 'Sign'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'MsgOption'
	{
		buf = tail[o0:o1]
		if t.MsgOption == nil {
			t.MsgOption = new(MsgOption)
		}
		if err = t.MsgOption.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'TaskEventList'
	{
		buf = tail[o1:o3]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		t.TaskEventList = make([]*TaskEvent, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if t.TaskEventList[indx] == nil {
				t.TaskEventList[indx] = new(TaskEvent)
			}
			if err = t.TaskEventList[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (3) 'Sign'
	{
		buf = tail[o3:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(t.Sign) == 0 {
			t.Sign = make([]byte, 0, len(buf))
		}
		t.Sign = append(t.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TaskResultMsg object
func (t *TaskResultMsg) SizeSSZ() (size int) {
	size = 20

	// Field (0) 'MsgOption'
	if t.MsgOption == nil {
		t.MsgOption = new(MsgOption)
	}
	size += t.MsgOption.SizeSSZ()

	// Field (1) 'TaskEventList'
	for ii := 0; ii < len(t.TaskEventList); ii++ {
		size += 4
		size += t.TaskEventList[ii].SizeSSZ()
	}

	// Field (3) 'Sign'
	size += len(t.Sign)

	return
}

// HashTreeRoot ssz hashes the TaskResultMsg object
func (t *TaskResultMsg) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TaskResultMsg object with a hasher
func (t *TaskResultMsg) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgOption'
	if err = t.MsgOption.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'TaskEventList'
	{
		subIndx := hh.Index()
		num := uint64(len(t.TaskEventList))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = t.TaskEventList[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	// Field (2) 'CreateAt'
	hh.PutUint64(t.CreateAt)

	// Field (3) 'Sign'
	if len(t.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the TaskPeerInfo object
func (t *TaskPeerInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TaskPeerInfo object to a target array
func (t *TaskPeerInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Ip'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Ip)

	// Offset (1) 'Port'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Port)

	// Offset (2) 'PartyId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.PartyId)

	// Field (0) 'Ip'
	if len(t.Ip) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Ip...)

	// Field (1) 'Port'
	if len(t.Port) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Port...)

	// Field (2) 'PartyId'
	if len(t.PartyId) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.PartyId...)

	return
}

// UnmarshalSSZ ssz unmarshals the TaskPeerInfo object
func (t *TaskPeerInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'Ip'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Port'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'PartyId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Ip'
	{
		buf = tail[o0:o1]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(t.Ip) == 0 {
			t.Ip = make([]byte, 0, len(buf))
		}
		t.Ip = append(t.Ip, buf...)
	}

	// Field (1) 'Port'
	{
		buf = tail[o1:o2]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(t.Port) == 0 {
			t.Port = make([]byte, 0, len(buf))
		}
		t.Port = append(t.Port, buf...)
	}

	// Field (2) 'PartyId'
	{
		buf = tail[o2:]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(t.PartyId) == 0 {
			t.PartyId = make([]byte, 0, len(buf))
		}
		t.PartyId = append(t.PartyId, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TaskPeerInfo object
func (t *TaskPeerInfo) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Ip'
	size += len(t.Ip)

	// Field (1) 'Port'
	size += len(t.Port)

	// Field (2) 'PartyId'
	size += len(t.PartyId)

	return
}

// HashTreeRoot ssz hashes the TaskPeerInfo object
func (t *TaskPeerInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TaskPeerInfo object with a hasher
func (t *TaskPeerInfo) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Ip'
	if len(t.Ip) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Ip)

	// Field (1) 'Port'
	if len(t.Port) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Port)

	// Field (2) 'PartyId'
	if len(t.PartyId) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.PartyId)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the TaskOrganizationIdentityInfo object
func (t *TaskOrganizationIdentityInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TaskOrganizationIdentityInfo object to a target array
func (t *TaskOrganizationIdentityInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Offset (0) 'Name'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Name)

	// Offset (1) 'NodeId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.NodeId)

	// Offset (2) 'IdentityId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.IdentityId)

	// Offset (3) 'PartyId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.PartyId)

	// Field (0) 'Name'
	if len(t.Name) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Name...)

	// Field (1) 'NodeId'
	if len(t.NodeId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.NodeId...)

	// Field (2) 'IdentityId'
	if len(t.IdentityId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.IdentityId...)

	// Field (3) 'PartyId'
	if len(t.PartyId) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.PartyId...)

	return
}

// UnmarshalSSZ ssz unmarshals the TaskOrganizationIdentityInfo object
func (t *TaskOrganizationIdentityInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3 uint64

	// Offset (0) 'Name'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'NodeId'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'IdentityId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'PartyId'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'Name'
	{
		buf = tail[o0:o1]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(t.Name) == 0 {
			t.Name = make([]byte, 0, len(buf))
		}
		t.Name = append(t.Name, buf...)
	}

	// Field (1) 'NodeId'
	{
		buf = tail[o1:o2]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(t.NodeId) == 0 {
			t.NodeId = make([]byte, 0, len(buf))
		}
		t.NodeId = append(t.NodeId, buf...)
	}

	// Field (2) 'IdentityId'
	{
		buf = tail[o2:o3]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(t.IdentityId) == 0 {
			t.IdentityId = make([]byte, 0, len(buf))
		}
		t.IdentityId = append(t.IdentityId, buf...)
	}

	// Field (3) 'PartyId'
	{
		buf = tail[o3:]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(t.PartyId) == 0 {
			t.PartyId = make([]byte, 0, len(buf))
		}
		t.PartyId = append(t.PartyId, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TaskOrganizationIdentityInfo object
func (t *TaskOrganizationIdentityInfo) SizeSSZ() (size int) {
	size = 16

	// Field (0) 'Name'
	size += len(t.Name)

	// Field (1) 'NodeId'
	size += len(t.NodeId)

	// Field (2) 'IdentityId'
	size += len(t.IdentityId)

	// Field (3) 'PartyId'
	size += len(t.PartyId)

	return
}

// HashTreeRoot ssz hashes the TaskOrganizationIdentityInfo object
func (t *TaskOrganizationIdentityInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TaskOrganizationIdentityInfo object with a hasher
func (t *TaskOrganizationIdentityInfo) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Name'
	if len(t.Name) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Name)

	// Field (1) 'NodeId'
	if len(t.NodeId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.NodeId)

	// Field (2) 'IdentityId'
	if len(t.IdentityId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.IdentityId)

	// Field (3) 'PartyId'
	if len(t.PartyId) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.PartyId)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the TaskEvent object
func (t *TaskEvent) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TaskEvent object to a target array
func (t *TaskEvent) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(24)

	// Offset (0) 'Type'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Type)

	// Offset (1) 'TaskId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.TaskId)

	// Offset (2) 'IdentityId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.IdentityId)

	// Offset (3) 'Content'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Content)

	// Field (4) 'CreateAt'
	dst = ssz.MarshalUint64(dst, t.CreateAt)

	// Field (0) 'Type'
	if len(t.Type) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Type...)

	// Field (1) 'TaskId'
	if len(t.TaskId) > 128 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.TaskId...)

	// Field (2) 'IdentityId'
	if len(t.IdentityId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.IdentityId...)

	// Field (3) 'Content'
	if len(t.Content) > 2048 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Content...)

	return
}

// UnmarshalSSZ ssz unmarshals the TaskEvent object
func (t *TaskEvent) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 24 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3 uint64

	// Offset (0) 'Type'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 24 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskId'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'IdentityId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'Content'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'CreateAt'
	t.CreateAt = ssz.UnmarshallUint64(buf[16:24])

	// Field (0) 'Type'
	{
		buf = tail[o0:o1]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(t.Type) == 0 {
			t.Type = make([]byte, 0, len(buf))
		}
		t.Type = append(t.Type, buf...)
	}

	// Field (1) 'TaskId'
	{
		buf = tail[o1:o2]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(t.TaskId) == 0 {
			t.TaskId = make([]byte, 0, len(buf))
		}
		t.TaskId = append(t.TaskId, buf...)
	}

	// Field (2) 'IdentityId'
	{
		buf = tail[o2:o3]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(t.IdentityId) == 0 {
			t.IdentityId = make([]byte, 0, len(buf))
		}
		t.IdentityId = append(t.IdentityId, buf...)
	}

	// Field (3) 'Content'
	{
		buf = tail[o3:]
		if len(buf) > 2048 {
			return ssz.ErrBytesLength
		}
		if cap(t.Content) == 0 {
			t.Content = make([]byte, 0, len(buf))
		}
		t.Content = append(t.Content, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TaskEvent object
func (t *TaskEvent) SizeSSZ() (size int) {
	size = 24

	// Field (0) 'Type'
	size += len(t.Type)

	// Field (1) 'TaskId'
	size += len(t.TaskId)

	// Field (2) 'IdentityId'
	size += len(t.IdentityId)

	// Field (3) 'Content'
	size += len(t.Content)

	return
}

// HashTreeRoot ssz hashes the TaskEvent object
func (t *TaskEvent) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TaskEvent object with a hasher
func (t *TaskEvent) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Type'
	if len(t.Type) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Type)

	// Field (1) 'TaskId'
	if len(t.TaskId) > 128 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.TaskId)

	// Field (2) 'IdentityId'
	if len(t.IdentityId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.IdentityId)

	// Field (3) 'Content'
	if len(t.Content) > 2048 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Content)

	// Field (4) 'CreateAt'
	hh.PutUint64(t.CreateAt)

	hh.Merkleize(indx)
	return
}
