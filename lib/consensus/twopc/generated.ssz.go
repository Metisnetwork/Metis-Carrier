// Code generated by fastssz. DO NOT EDIT.
// Hash: e2f7920a992ab68c25ff914d7140d73187c7e4d4e674346840b0fe599a7d7098
package twopc

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PrepareMsg object
func (p *PrepareMsg) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PrepareMsg object to a target array
func (p *PrepareMsg) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(32)

	// Offset (0) 'ProposalId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.ProposalId)

	// Offset (1) 'TaskRole'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.TaskRole)

	// Offset (2) 'TaskPartyId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.TaskPartyId)

	// Offset (3) 'Owner'
	dst = ssz.WriteOffset(dst, offset)
	if p.Owner == nil {
		p.Owner = new(TaskOrganizationIdentityInfo)
	}
	offset += p.Owner.SizeSSZ()

	// Offset (4) 'TaskInfo'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.TaskInfo)

	// Field (5) 'CreateAt'
	dst = ssz.MarshalUint64(dst, p.CreateAt)

	// Offset (6) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.Sign)

	// Field (0) 'ProposalId'
	if len(p.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.ProposalId...)

	// Field (1) 'TaskRole'
	if len(p.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.TaskRole...)

	// Field (2) 'TaskPartyId'
	if len(p.TaskPartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.TaskPartyId...)

	// Field (3) 'Owner'
	if dst, err = p.Owner.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'TaskInfo'
	if len(p.TaskInfo) > 16777216 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.TaskInfo...)

	// Field (6) 'Sign'
	if len(p.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the PrepareMsg object
func (p *PrepareMsg) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 32 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3, o4, o6 uint64

	// Offset (0) 'ProposalId'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 32 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskRole'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'TaskPartyId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'Owner'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'TaskInfo'
	if o4 = ssz.ReadOffset(buf[16:20]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (5) 'CreateAt'
	p.CreateAt = ssz.UnmarshallUint64(buf[20:28])

	// Offset (6) 'Sign'
	if o6 = ssz.ReadOffset(buf[28:32]); o6 > size || o4 > o6 {
		return ssz.ErrOffset
	}

	// Field (0) 'ProposalId'
	{
		buf = tail[o0:o1]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(p.ProposalId) == 0 {
			p.ProposalId = make([]byte, 0, len(buf))
		}
		p.ProposalId = append(p.ProposalId, buf...)
	}

	// Field (1) 'TaskRole'
	{
		buf = tail[o1:o2]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(p.TaskRole) == 0 {
			p.TaskRole = make([]byte, 0, len(buf))
		}
		p.TaskRole = append(p.TaskRole, buf...)
	}

	// Field (2) 'TaskPartyId'
	{
		buf = tail[o2:o3]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(p.TaskPartyId) == 0 {
			p.TaskPartyId = make([]byte, 0, len(buf))
		}
		p.TaskPartyId = append(p.TaskPartyId, buf...)
	}

	// Field (3) 'Owner'
	{
		buf = tail[o3:o4]
		if p.Owner == nil {
			p.Owner = new(TaskOrganizationIdentityInfo)
		}
		if err = p.Owner.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (4) 'TaskInfo'
	{
		buf = tail[o4:o6]
		if len(buf) > 16777216 {
			return ssz.ErrBytesLength
		}
		if cap(p.TaskInfo) == 0 {
			p.TaskInfo = make([]byte, 0, len(buf))
		}
		p.TaskInfo = append(p.TaskInfo, buf...)
	}

	// Field (6) 'Sign'
	{
		buf = tail[o6:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(p.Sign) == 0 {
			p.Sign = make([]byte, 0, len(buf))
		}
		p.Sign = append(p.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PrepareMsg object
func (p *PrepareMsg) SizeSSZ() (size int) {
	size = 32

	// Field (0) 'ProposalId'
	size += len(p.ProposalId)

	// Field (1) 'TaskRole'
	size += len(p.TaskRole)

	// Field (2) 'TaskPartyId'
	size += len(p.TaskPartyId)

	// Field (3) 'Owner'
	if p.Owner == nil {
		p.Owner = new(TaskOrganizationIdentityInfo)
	}
	size += p.Owner.SizeSSZ()

	// Field (4) 'TaskInfo'
	size += len(p.TaskInfo)

	// Field (6) 'Sign'
	size += len(p.Sign)

	return
}

// HashTreeRoot ssz hashes the PrepareMsg object
func (p *PrepareMsg) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PrepareMsg object with a hasher
func (p *PrepareMsg) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ProposalId'
	if len(p.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.ProposalId)

	// Field (1) 'TaskRole'
	if len(p.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.TaskRole)

	// Field (2) 'TaskPartyId'
	if len(p.TaskPartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.TaskPartyId)

	// Field (3) 'Owner'
	if err = p.Owner.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'TaskInfo'
	if len(p.TaskInfo) > 16777216 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.TaskInfo)

	// Field (5) 'CreateAt'
	hh.PutUint64(p.CreateAt)

	// Field (6) 'Sign'
	if len(p.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the TaskOrganizationIdentityInfo object
func (t *TaskOrganizationIdentityInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TaskOrganizationIdentityInfo object to a target array
func (t *TaskOrganizationIdentityInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Offset (0) 'Name'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Name)

	// Offset (1) 'NodeId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.NodeId)

	// Offset (2) 'IdentityId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.IdentityId)

	// Offset (3) 'PartyId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.PartyId)

	// Field (0) 'Name'
	if len(t.Name) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Name...)

	// Field (1) 'NodeId'
	if len(t.NodeId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.NodeId...)

	// Field (2) 'IdentityId'
	if len(t.IdentityId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.IdentityId...)

	// Field (3) 'PartyId'
	if len(t.PartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.PartyId...)

	return
}

// UnmarshalSSZ ssz unmarshals the TaskOrganizationIdentityInfo object
func (t *TaskOrganizationIdentityInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3 uint64

	// Offset (0) 'Name'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'NodeId'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'IdentityId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'PartyId'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'Name'
	{
		buf = tail[o0:o1]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(t.Name) == 0 {
			t.Name = make([]byte, 0, len(buf))
		}
		t.Name = append(t.Name, buf...)
	}

	// Field (1) 'NodeId'
	{
		buf = tail[o1:o2]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(t.NodeId) == 0 {
			t.NodeId = make([]byte, 0, len(buf))
		}
		t.NodeId = append(t.NodeId, buf...)
	}

	// Field (2) 'IdentityId'
	{
		buf = tail[o2:o3]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(t.IdentityId) == 0 {
			t.IdentityId = make([]byte, 0, len(buf))
		}
		t.IdentityId = append(t.IdentityId, buf...)
	}

	// Field (3) 'PartyId'
	{
		buf = tail[o3:]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(t.PartyId) == 0 {
			t.PartyId = make([]byte, 0, len(buf))
		}
		t.PartyId = append(t.PartyId, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TaskOrganizationIdentityInfo object
func (t *TaskOrganizationIdentityInfo) SizeSSZ() (size int) {
	size = 16

	// Field (0) 'Name'
	size += len(t.Name)

	// Field (1) 'NodeId'
	size += len(t.NodeId)

	// Field (2) 'IdentityId'
	size += len(t.IdentityId)

	// Field (3) 'PartyId'
	size += len(t.PartyId)

	return
}

// HashTreeRoot ssz hashes the TaskOrganizationIdentityInfo object
func (t *TaskOrganizationIdentityInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TaskOrganizationIdentityInfo object with a hasher
func (t *TaskOrganizationIdentityInfo) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Name'
	if len(t.Name) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Name)

	// Field (1) 'NodeId'
	if len(t.NodeId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.NodeId)

	// Field (2) 'IdentityId'
	if len(t.IdentityId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.IdentityId)

	// Field (3) 'PartyId'
	if len(t.PartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.PartyId)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the DataSupplierOption object
func (d *DataSupplierOption) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DataSupplierOption object to a target array
func (d *DataSupplierOption) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'MemberInfo'
	dst = ssz.WriteOffset(dst, offset)
	if d.MemberInfo == nil {
		d.MemberInfo = new(TaskOrganizationIdentityInfo)
	}
	offset += d.MemberInfo.SizeSSZ()

	// Offset (1) 'MetaDataId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.MetaDataId)

	// Offset (2) 'ColumnIndexList'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.ColumnIndexList) * 8

	// Field (0) 'MemberInfo'
	if dst, err = d.MemberInfo.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'MetaDataId'
	if len(d.MetaDataId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, d.MetaDataId...)

	// Field (2) 'ColumnIndexList'
	if len(d.ColumnIndexList) > 1024 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(d.ColumnIndexList); ii++ {
		dst = ssz.MarshalUint64(dst, d.ColumnIndexList[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the DataSupplierOption object
func (d *DataSupplierOption) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'MemberInfo'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'MetaDataId'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'ColumnIndexList'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'MemberInfo'
	{
		buf = tail[o0:o1]
		if d.MemberInfo == nil {
			d.MemberInfo = new(TaskOrganizationIdentityInfo)
		}
		if err = d.MemberInfo.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'MetaDataId'
	{
		buf = tail[o1:o2]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(d.MetaDataId) == 0 {
			d.MetaDataId = make([]byte, 0, len(buf))
		}
		d.MetaDataId = append(d.MetaDataId, buf...)
	}

	// Field (2) 'ColumnIndexList'
	{
		buf = tail[o2:]
		num, err := ssz.DivideInt2(len(buf), 8, 1024)
		if err != nil {
			return err
		}
		d.ColumnIndexList = ssz.ExtendUint64(d.ColumnIndexList, num)
		for ii := 0; ii < num; ii++ {
			d.ColumnIndexList[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DataSupplierOption object
func (d *DataSupplierOption) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'MemberInfo'
	if d.MemberInfo == nil {
		d.MemberInfo = new(TaskOrganizationIdentityInfo)
	}
	size += d.MemberInfo.SizeSSZ()

	// Field (1) 'MetaDataId'
	size += len(d.MetaDataId)

	// Field (2) 'ColumnIndexList'
	size += len(d.ColumnIndexList) * 8

	return
}

// HashTreeRoot ssz hashes the DataSupplierOption object
func (d *DataSupplierOption) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DataSupplierOption object with a hasher
func (d *DataSupplierOption) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MemberInfo'
	if err = d.MemberInfo.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'MetaDataId'
	if len(d.MetaDataId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(d.MetaDataId)

	// Field (2) 'ColumnIndexList'
	{
		if len(d.ColumnIndexList) > 1024 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range d.ColumnIndexList {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(d.ColumnIndexList))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(1024, numItems, 8))
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the PowerSupplierOption object
func (p *PowerSupplierOption) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PowerSupplierOption object to a target array
func (p *PowerSupplierOption) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'MemberInfo'
	dst = ssz.WriteOffset(dst, offset)
	if p.MemberInfo == nil {
		p.MemberInfo = new(TaskOrganizationIdentityInfo)
	}
	offset += p.MemberInfo.SizeSSZ()

	// Field (0) 'MemberInfo'
	if dst, err = p.MemberInfo.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the PowerSupplierOption object
func (p *PowerSupplierOption) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'MemberInfo'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'MemberInfo'
	{
		buf = tail[o0:]
		if p.MemberInfo == nil {
			p.MemberInfo = new(TaskOrganizationIdentityInfo)
		}
		if err = p.MemberInfo.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PowerSupplierOption object
func (p *PowerSupplierOption) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'MemberInfo'
	if p.MemberInfo == nil {
		p.MemberInfo = new(TaskOrganizationIdentityInfo)
	}
	size += p.MemberInfo.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the PowerSupplierOption object
func (p *PowerSupplierOption) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PowerSupplierOption object with a hasher
func (p *PowerSupplierOption) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MemberInfo'
	if err = p.MemberInfo.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ReceiverOption object
func (r *ReceiverOption) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the ReceiverOption object to a target array
func (r *ReceiverOption) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'MemberInfo'
	dst = ssz.WriteOffset(dst, offset)
	if r.MemberInfo == nil {
		r.MemberInfo = new(TaskOrganizationIdentityInfo)
	}
	offset += r.MemberInfo.SizeSSZ()

	// Offset (1) 'Providers'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(r.Providers); ii++ {
		offset += 4
		offset += r.Providers[ii].SizeSSZ()
	}

	// Field (0) 'MemberInfo'
	if dst, err = r.MemberInfo.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Providers'
	if len(r.Providers) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(r.Providers)
		for ii := 0; ii < len(r.Providers); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += r.Providers[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(r.Providers); ii++ {
		if dst, err = r.Providers[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ReceiverOption object
func (r *ReceiverOption) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'MemberInfo'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Providers'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'MemberInfo'
	{
		buf = tail[o0:o1]
		if r.MemberInfo == nil {
			r.MemberInfo = new(TaskOrganizationIdentityInfo)
		}
		if err = r.MemberInfo.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'Providers'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		r.Providers = make([]*TaskOrganizationIdentityInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if r.Providers[indx] == nil {
				r.Providers[indx] = new(TaskOrganizationIdentityInfo)
			}
			if err = r.Providers[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ReceiverOption object
func (r *ReceiverOption) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'MemberInfo'
	if r.MemberInfo == nil {
		r.MemberInfo = new(TaskOrganizationIdentityInfo)
	}
	size += r.MemberInfo.SizeSSZ()

	// Field (1) 'Providers'
	for ii := 0; ii < len(r.Providers); ii++ {
		size += 4
		size += r.Providers[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the ReceiverOption object
func (r *ReceiverOption) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(r)
}

// HashTreeRootWith ssz hashes the ReceiverOption object with a hasher
func (r *ReceiverOption) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MemberInfo'
	if err = r.MemberInfo.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Providers'
	{
		subIndx := hh.Index()
		num := uint64(len(r.Providers))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = r.Providers[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the TaskOperationCost object
func (t *TaskOperationCost) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TaskOperationCost object to a target array
func (t *TaskOperationCost) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'CostMem'
	dst = ssz.MarshalUint64(dst, t.CostMem)

	// Field (1) 'CostProcessor'
	dst = ssz.MarshalUint64(dst, t.CostProcessor)

	// Field (2) 'CostBandwidth'
	dst = ssz.MarshalUint64(dst, t.CostBandwidth)

	// Field (3) 'Duration'
	dst = ssz.MarshalUint64(dst, t.Duration)

	return
}

// UnmarshalSSZ ssz unmarshals the TaskOperationCost object
func (t *TaskOperationCost) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'CostMem'
	t.CostMem = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'CostProcessor'
	t.CostProcessor = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'CostBandwidth'
	t.CostBandwidth = ssz.UnmarshallUint64(buf[16:24])

	// Field (3) 'Duration'
	t.Duration = ssz.UnmarshallUint64(buf[24:32])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TaskOperationCost object
func (t *TaskOperationCost) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the TaskOperationCost object
func (t *TaskOperationCost) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TaskOperationCost object with a hasher
func (t *TaskOperationCost) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'CostMem'
	hh.PutUint64(t.CostMem)

	// Field (1) 'CostProcessor'
	hh.PutUint64(t.CostProcessor)

	// Field (2) 'CostBandwidth'
	hh.PutUint64(t.CostBandwidth)

	// Field (3) 'Duration'
	hh.PutUint64(t.Duration)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the PrepareVote object
func (p *PrepareVote) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PrepareVote object to a target array
func (p *PrepareVote) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(32)

	// Offset (0) 'ProposalId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.ProposalId)

	// Offset (1) 'TaskRole'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.TaskRole)

	// Offset (2) 'Owner'
	dst = ssz.WriteOffset(dst, offset)
	if p.Owner == nil {
		p.Owner = new(TaskOrganizationIdentityInfo)
	}
	offset += p.Owner.SizeSSZ()

	// Offset (3) 'VoteOption'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.VoteOption)

	// Offset (4) 'PeerInfo'
	dst = ssz.WriteOffset(dst, offset)
	if p.PeerInfo == nil {
		p.PeerInfo = new(TaskPeerInfo)
	}
	offset += p.PeerInfo.SizeSSZ()

	// Field (5) 'CreateAt'
	dst = ssz.MarshalUint64(dst, p.CreateAt)

	// Offset (6) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.Sign)

	// Field (0) 'ProposalId'
	if len(p.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.ProposalId...)

	// Field (1) 'TaskRole'
	if len(p.TaskRole) > 128 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.TaskRole...)

	// Field (2) 'Owner'
	if dst, err = p.Owner.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'VoteOption'
	if len(p.VoteOption) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.VoteOption...)

	// Field (4) 'PeerInfo'
	if dst, err = p.PeerInfo.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (6) 'Sign'
	if len(p.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the PrepareVote object
func (p *PrepareVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 32 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3, o4, o6 uint64

	// Offset (0) 'ProposalId'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 32 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskRole'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'Owner'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'VoteOption'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'PeerInfo'
	if o4 = ssz.ReadOffset(buf[16:20]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (5) 'CreateAt'
	p.CreateAt = ssz.UnmarshallUint64(buf[20:28])

	// Offset (6) 'Sign'
	if o6 = ssz.ReadOffset(buf[28:32]); o6 > size || o4 > o6 {
		return ssz.ErrOffset
	}

	// Field (0) 'ProposalId'
	{
		buf = tail[o0:o1]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(p.ProposalId) == 0 {
			p.ProposalId = make([]byte, 0, len(buf))
		}
		p.ProposalId = append(p.ProposalId, buf...)
	}

	// Field (1) 'TaskRole'
	{
		buf = tail[o1:o2]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(p.TaskRole) == 0 {
			p.TaskRole = make([]byte, 0, len(buf))
		}
		p.TaskRole = append(p.TaskRole, buf...)
	}

	// Field (2) 'Owner'
	{
		buf = tail[o2:o3]
		if p.Owner == nil {
			p.Owner = new(TaskOrganizationIdentityInfo)
		}
		if err = p.Owner.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'VoteOption'
	{
		buf = tail[o3:o4]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(p.VoteOption) == 0 {
			p.VoteOption = make([]byte, 0, len(buf))
		}
		p.VoteOption = append(p.VoteOption, buf...)
	}

	// Field (4) 'PeerInfo'
	{
		buf = tail[o4:o6]
		if p.PeerInfo == nil {
			p.PeerInfo = new(TaskPeerInfo)
		}
		if err = p.PeerInfo.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (6) 'Sign'
	{
		buf = tail[o6:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(p.Sign) == 0 {
			p.Sign = make([]byte, 0, len(buf))
		}
		p.Sign = append(p.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PrepareVote object
func (p *PrepareVote) SizeSSZ() (size int) {
	size = 32

	// Field (0) 'ProposalId'
	size += len(p.ProposalId)

	// Field (1) 'TaskRole'
	size += len(p.TaskRole)

	// Field (2) 'Owner'
	if p.Owner == nil {
		p.Owner = new(TaskOrganizationIdentityInfo)
	}
	size += p.Owner.SizeSSZ()

	// Field (3) 'VoteOption'
	size += len(p.VoteOption)

	// Field (4) 'PeerInfo'
	if p.PeerInfo == nil {
		p.PeerInfo = new(TaskPeerInfo)
	}
	size += p.PeerInfo.SizeSSZ()

	// Field (6) 'Sign'
	size += len(p.Sign)

	return
}

// HashTreeRoot ssz hashes the PrepareVote object
func (p *PrepareVote) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PrepareVote object with a hasher
func (p *PrepareVote) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ProposalId'
	if len(p.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.ProposalId)

	// Field (1) 'TaskRole'
	if len(p.TaskRole) > 128 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.TaskRole)

	// Field (2) 'Owner'
	if err = p.Owner.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'VoteOption'
	if len(p.VoteOption) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.VoteOption)

	// Field (4) 'PeerInfo'
	if err = p.PeerInfo.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'CreateAt'
	hh.PutUint64(p.CreateAt)

	// Field (6) 'Sign'
	if len(p.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(p.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the TaskPeerInfo object
func (t *TaskPeerInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TaskPeerInfo object to a target array
func (t *TaskPeerInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Ip'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Ip)

	// Offset (1) 'Port'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Port)

	// Offset (2) 'PartyId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.PartyId)

	// Field (0) 'Ip'
	if len(t.Ip) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Ip...)

	// Field (1) 'Port'
	if len(t.Port) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Port...)

	// Field (2) 'PartyId'
	if len(t.PartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.PartyId...)

	return
}

// UnmarshalSSZ ssz unmarshals the TaskPeerInfo object
func (t *TaskPeerInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'Ip'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Port'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'PartyId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Ip'
	{
		buf = tail[o0:o1]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(t.Ip) == 0 {
			t.Ip = make([]byte, 0, len(buf))
		}
		t.Ip = append(t.Ip, buf...)
	}

	// Field (1) 'Port'
	{
		buf = tail[o1:o2]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(t.Port) == 0 {
			t.Port = make([]byte, 0, len(buf))
		}
		t.Port = append(t.Port, buf...)
	}

	// Field (2) 'PartyId'
	{
		buf = tail[o2:]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(t.PartyId) == 0 {
			t.PartyId = make([]byte, 0, len(buf))
		}
		t.PartyId = append(t.PartyId, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TaskPeerInfo object
func (t *TaskPeerInfo) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Ip'
	size += len(t.Ip)

	// Field (1) 'Port'
	size += len(t.Port)

	// Field (2) 'PartyId'
	size += len(t.PartyId)

	return
}

// HashTreeRoot ssz hashes the TaskPeerInfo object
func (t *TaskPeerInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TaskPeerInfo object with a hasher
func (t *TaskPeerInfo) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Ip'
	if len(t.Ip) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Ip)

	// Field (1) 'Port'
	if len(t.Port) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Port)

	// Field (2) 'PartyId'
	if len(t.PartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.PartyId)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ConfirmMsg object
func (c *ConfirmMsg) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConfirmMsg object to a target array
func (c *ConfirmMsg) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(32)

	// Offset (0) 'ProposalId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.ProposalId)

	// Offset (1) 'TaskRole'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.TaskRole)

	// Offset (2) 'TaskPartyId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.TaskPartyId)

	// Offset (3) 'Owner'
	dst = ssz.WriteOffset(dst, offset)
	if c.Owner == nil {
		c.Owner = new(TaskOrganizationIdentityInfo)
	}
	offset += c.Owner.SizeSSZ()

	// Offset (4) 'PeerDesc'
	dst = ssz.WriteOffset(dst, offset)
	if c.PeerDesc == nil {
		c.PeerDesc = new(ConfirmTaskPeerInfo)
	}
	offset += c.PeerDesc.SizeSSZ()

	// Field (5) 'CreateAt'
	dst = ssz.MarshalUint64(dst, c.CreateAt)

	// Offset (6) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Sign)

	// Field (0) 'ProposalId'
	if len(c.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.ProposalId...)

	// Field (1) 'TaskRole'
	if len(c.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.TaskRole...)

	// Field (2) 'TaskPartyId'
	if len(c.TaskPartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.TaskPartyId...)

	// Field (3) 'Owner'
	if dst, err = c.Owner.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'PeerDesc'
	if dst, err = c.PeerDesc.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (6) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConfirmMsg object
func (c *ConfirmMsg) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 32 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3, o4, o6 uint64

	// Offset (0) 'ProposalId'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 32 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskRole'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'TaskPartyId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'Owner'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'PeerDesc'
	if o4 = ssz.ReadOffset(buf[16:20]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (5) 'CreateAt'
	c.CreateAt = ssz.UnmarshallUint64(buf[20:28])

	// Offset (6) 'Sign'
	if o6 = ssz.ReadOffset(buf[28:32]); o6 > size || o4 > o6 {
		return ssz.ErrOffset
	}

	// Field (0) 'ProposalId'
	{
		buf = tail[o0:o1]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(c.ProposalId) == 0 {
			c.ProposalId = make([]byte, 0, len(buf))
		}
		c.ProposalId = append(c.ProposalId, buf...)
	}

	// Field (1) 'TaskRole'
	{
		buf = tail[o1:o2]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(c.TaskRole) == 0 {
			c.TaskRole = make([]byte, 0, len(buf))
		}
		c.TaskRole = append(c.TaskRole, buf...)
	}

	// Field (2) 'TaskPartyId'
	{
		buf = tail[o2:o3]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(c.TaskPartyId) == 0 {
			c.TaskPartyId = make([]byte, 0, len(buf))
		}
		c.TaskPartyId = append(c.TaskPartyId, buf...)
	}

	// Field (3) 'Owner'
	{
		buf = tail[o3:o4]
		if c.Owner == nil {
			c.Owner = new(TaskOrganizationIdentityInfo)
		}
		if err = c.Owner.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (4) 'PeerDesc'
	{
		buf = tail[o4:o6]
		if c.PeerDesc == nil {
			c.PeerDesc = new(ConfirmTaskPeerInfo)
		}
		if err = c.PeerDesc.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (6) 'Sign'
	{
		buf = tail[o6:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(c.Sign) == 0 {
			c.Sign = make([]byte, 0, len(buf))
		}
		c.Sign = append(c.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConfirmMsg object
func (c *ConfirmMsg) SizeSSZ() (size int) {
	size = 32

	// Field (0) 'ProposalId'
	size += len(c.ProposalId)

	// Field (1) 'TaskRole'
	size += len(c.TaskRole)

	// Field (2) 'TaskPartyId'
	size += len(c.TaskPartyId)

	// Field (3) 'Owner'
	if c.Owner == nil {
		c.Owner = new(TaskOrganizationIdentityInfo)
	}
	size += c.Owner.SizeSSZ()

	// Field (4) 'PeerDesc'
	if c.PeerDesc == nil {
		c.PeerDesc = new(ConfirmTaskPeerInfo)
	}
	size += c.PeerDesc.SizeSSZ()

	// Field (6) 'Sign'
	size += len(c.Sign)

	return
}

// HashTreeRoot ssz hashes the ConfirmMsg object
func (c *ConfirmMsg) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConfirmMsg object with a hasher
func (c *ConfirmMsg) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ProposalId'
	if len(c.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.ProposalId)

	// Field (1) 'TaskRole'
	if len(c.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.TaskRole)

	// Field (2) 'TaskPartyId'
	if len(c.TaskPartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.TaskPartyId)

	// Field (3) 'Owner'
	if err = c.Owner.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'PeerDesc'
	if err = c.PeerDesc.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'CreateAt'
	hh.PutUint64(c.CreateAt)

	// Field (6) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ConfirmTaskPeerInfo object
func (c *ConfirmTaskPeerInfo) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConfirmTaskPeerInfo object to a target array
func (c *ConfirmTaskPeerInfo) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Offset (0) 'OwnerPeerInfo'
	dst = ssz.WriteOffset(dst, offset)
	if c.OwnerPeerInfo == nil {
		c.OwnerPeerInfo = new(TaskPeerInfo)
	}
	offset += c.OwnerPeerInfo.SizeSSZ()

	// Offset (1) 'DataSupplierPeerInfoList'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.DataSupplierPeerInfoList); ii++ {
		offset += 4
		offset += c.DataSupplierPeerInfoList[ii].SizeSSZ()
	}

	// Offset (2) 'PowerSupplierPeerInfoList'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.PowerSupplierPeerInfoList); ii++ {
		offset += 4
		offset += c.PowerSupplierPeerInfoList[ii].SizeSSZ()
	}

	// Offset (3) 'ResultReceiverPeerInfoList'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.ResultReceiverPeerInfoList); ii++ {
		offset += 4
		offset += c.ResultReceiverPeerInfoList[ii].SizeSSZ()
	}

	// Field (0) 'OwnerPeerInfo'
	if dst, err = c.OwnerPeerInfo.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'DataSupplierPeerInfoList'
	if len(c.DataSupplierPeerInfoList) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(c.DataSupplierPeerInfoList)
		for ii := 0; ii < len(c.DataSupplierPeerInfoList); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += c.DataSupplierPeerInfoList[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(c.DataSupplierPeerInfoList); ii++ {
		if dst, err = c.DataSupplierPeerInfoList[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'PowerSupplierPeerInfoList'
	if len(c.PowerSupplierPeerInfoList) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(c.PowerSupplierPeerInfoList)
		for ii := 0; ii < len(c.PowerSupplierPeerInfoList); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += c.PowerSupplierPeerInfoList[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(c.PowerSupplierPeerInfoList); ii++ {
		if dst, err = c.PowerSupplierPeerInfoList[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (3) 'ResultReceiverPeerInfoList'
	if len(c.ResultReceiverPeerInfoList) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(c.ResultReceiverPeerInfoList)
		for ii := 0; ii < len(c.ResultReceiverPeerInfoList); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += c.ResultReceiverPeerInfoList[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(c.ResultReceiverPeerInfoList); ii++ {
		if dst, err = c.ResultReceiverPeerInfoList[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ConfirmTaskPeerInfo object
func (c *ConfirmTaskPeerInfo) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3 uint64

	// Offset (0) 'OwnerPeerInfo'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'DataSupplierPeerInfoList'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'PowerSupplierPeerInfoList'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'ResultReceiverPeerInfoList'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'OwnerPeerInfo'
	{
		buf = tail[o0:o1]
		if c.OwnerPeerInfo == nil {
			c.OwnerPeerInfo = new(TaskPeerInfo)
		}
		if err = c.OwnerPeerInfo.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'DataSupplierPeerInfoList'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		c.DataSupplierPeerInfoList = make([]*TaskPeerInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if c.DataSupplierPeerInfoList[indx] == nil {
				c.DataSupplierPeerInfoList[indx] = new(TaskPeerInfo)
			}
			if err = c.DataSupplierPeerInfoList[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'PowerSupplierPeerInfoList'
	{
		buf = tail[o2:o3]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		c.PowerSupplierPeerInfoList = make([]*TaskPeerInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if c.PowerSupplierPeerInfoList[indx] == nil {
				c.PowerSupplierPeerInfoList[indx] = new(TaskPeerInfo)
			}
			if err = c.PowerSupplierPeerInfoList[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (3) 'ResultReceiverPeerInfoList'
	{
		buf = tail[o3:]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		c.ResultReceiverPeerInfoList = make([]*TaskPeerInfo, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if c.ResultReceiverPeerInfoList[indx] == nil {
				c.ResultReceiverPeerInfoList[indx] = new(TaskPeerInfo)
			}
			if err = c.ResultReceiverPeerInfoList[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConfirmTaskPeerInfo object
func (c *ConfirmTaskPeerInfo) SizeSSZ() (size int) {
	size = 16

	// Field (0) 'OwnerPeerInfo'
	if c.OwnerPeerInfo == nil {
		c.OwnerPeerInfo = new(TaskPeerInfo)
	}
	size += c.OwnerPeerInfo.SizeSSZ()

	// Field (1) 'DataSupplierPeerInfoList'
	for ii := 0; ii < len(c.DataSupplierPeerInfoList); ii++ {
		size += 4
		size += c.DataSupplierPeerInfoList[ii].SizeSSZ()
	}

	// Field (2) 'PowerSupplierPeerInfoList'
	for ii := 0; ii < len(c.PowerSupplierPeerInfoList); ii++ {
		size += 4
		size += c.PowerSupplierPeerInfoList[ii].SizeSSZ()
	}

	// Field (3) 'ResultReceiverPeerInfoList'
	for ii := 0; ii < len(c.ResultReceiverPeerInfoList); ii++ {
		size += 4
		size += c.ResultReceiverPeerInfoList[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the ConfirmTaskPeerInfo object
func (c *ConfirmTaskPeerInfo) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConfirmTaskPeerInfo object with a hasher
func (c *ConfirmTaskPeerInfo) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'OwnerPeerInfo'
	if err = c.OwnerPeerInfo.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'DataSupplierPeerInfoList'
	{
		subIndx := hh.Index()
		num := uint64(len(c.DataSupplierPeerInfoList))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = c.DataSupplierPeerInfoList[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	// Field (2) 'PowerSupplierPeerInfoList'
	{
		subIndx := hh.Index()
		num := uint64(len(c.PowerSupplierPeerInfoList))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = c.PowerSupplierPeerInfoList[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	// Field (3) 'ResultReceiverPeerInfoList'
	{
		subIndx := hh.Index()
		num := uint64(len(c.ResultReceiverPeerInfoList))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = c.ResultReceiverPeerInfoList[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ConfirmVote object
func (c *ConfirmVote) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConfirmVote object to a target array
func (c *ConfirmVote) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(28)

	// Offset (0) 'ProposalId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.ProposalId)

	// Offset (1) 'TaskRole'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.TaskRole)

	// Offset (2) 'Owner'
	dst = ssz.WriteOffset(dst, offset)
	if c.Owner == nil {
		c.Owner = new(TaskOrganizationIdentityInfo)
	}
	offset += c.Owner.SizeSSZ()

	// Offset (3) 'VoteOption'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.VoteOption)

	// Field (4) 'CreateAt'
	dst = ssz.MarshalUint64(dst, c.CreateAt)

	// Offset (5) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Sign)

	// Field (0) 'ProposalId'
	if len(c.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.ProposalId...)

	// Field (1) 'TaskRole'
	if len(c.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.TaskRole...)

	// Field (2) 'Owner'
	if dst, err = c.Owner.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'VoteOption'
	if len(c.VoteOption) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.VoteOption...)

	// Field (5) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConfirmVote object
func (c *ConfirmVote) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 28 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3, o5 uint64

	// Offset (0) 'ProposalId'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 28 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskRole'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'Owner'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'VoteOption'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'CreateAt'
	c.CreateAt = ssz.UnmarshallUint64(buf[16:24])

	// Offset (5) 'Sign'
	if o5 = ssz.ReadOffset(buf[24:28]); o5 > size || o3 > o5 {
		return ssz.ErrOffset
	}

	// Field (0) 'ProposalId'
	{
		buf = tail[o0:o1]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(c.ProposalId) == 0 {
			c.ProposalId = make([]byte, 0, len(buf))
		}
		c.ProposalId = append(c.ProposalId, buf...)
	}

	// Field (1) 'TaskRole'
	{
		buf = tail[o1:o2]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(c.TaskRole) == 0 {
			c.TaskRole = make([]byte, 0, len(buf))
		}
		c.TaskRole = append(c.TaskRole, buf...)
	}

	// Field (2) 'Owner'
	{
		buf = tail[o2:o3]
		if c.Owner == nil {
			c.Owner = new(TaskOrganizationIdentityInfo)
		}
		if err = c.Owner.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'VoteOption'
	{
		buf = tail[o3:o5]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(c.VoteOption) == 0 {
			c.VoteOption = make([]byte, 0, len(buf))
		}
		c.VoteOption = append(c.VoteOption, buf...)
	}

	// Field (5) 'Sign'
	{
		buf = tail[o5:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(c.Sign) == 0 {
			c.Sign = make([]byte, 0, len(buf))
		}
		c.Sign = append(c.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConfirmVote object
func (c *ConfirmVote) SizeSSZ() (size int) {
	size = 28

	// Field (0) 'ProposalId'
	size += len(c.ProposalId)

	// Field (1) 'TaskRole'
	size += len(c.TaskRole)

	// Field (2) 'Owner'
	if c.Owner == nil {
		c.Owner = new(TaskOrganizationIdentityInfo)
	}
	size += c.Owner.SizeSSZ()

	// Field (3) 'VoteOption'
	size += len(c.VoteOption)

	// Field (5) 'Sign'
	size += len(c.Sign)

	return
}

// HashTreeRoot ssz hashes the ConfirmVote object
func (c *ConfirmVote) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConfirmVote object with a hasher
func (c *ConfirmVote) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ProposalId'
	if len(c.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.ProposalId)

	// Field (1) 'TaskRole'
	if len(c.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.TaskRole)

	// Field (2) 'Owner'
	if err = c.Owner.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'VoteOption'
	if len(c.VoteOption) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.VoteOption)

	// Field (4) 'CreateAt'
	hh.PutUint64(c.CreateAt)

	// Field (5) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the CommitMsg object
func (c *CommitMsg) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CommitMsg object to a target array
func (c *CommitMsg) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(28)

	// Offset (0) 'ProposalId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.ProposalId)

	// Offset (1) 'TaskRole'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.TaskRole)

	// Offset (2) 'TaskPartyId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.TaskPartyId)

	// Offset (3) 'Owner'
	dst = ssz.WriteOffset(dst, offset)
	if c.Owner == nil {
		c.Owner = new(TaskOrganizationIdentityInfo)
	}
	offset += c.Owner.SizeSSZ()

	// Field (4) 'CreateAt'
	dst = ssz.MarshalUint64(dst, c.CreateAt)

	// Offset (5) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.Sign)

	// Field (0) 'ProposalId'
	if len(c.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.ProposalId...)

	// Field (1) 'TaskRole'
	if len(c.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.TaskRole...)

	// Field (2) 'TaskPartyId'
	if len(c.TaskPartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.TaskPartyId...)

	// Field (3) 'Owner'
	if dst, err = c.Owner.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the CommitMsg object
func (c *CommitMsg) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 28 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3, o5 uint64

	// Offset (0) 'ProposalId'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 28 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskRole'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'TaskPartyId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'Owner'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'CreateAt'
	c.CreateAt = ssz.UnmarshallUint64(buf[16:24])

	// Offset (5) 'Sign'
	if o5 = ssz.ReadOffset(buf[24:28]); o5 > size || o3 > o5 {
		return ssz.ErrOffset
	}

	// Field (0) 'ProposalId'
	{
		buf = tail[o0:o1]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(c.ProposalId) == 0 {
			c.ProposalId = make([]byte, 0, len(buf))
		}
		c.ProposalId = append(c.ProposalId, buf...)
	}

	// Field (1) 'TaskRole'
	{
		buf = tail[o1:o2]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(c.TaskRole) == 0 {
			c.TaskRole = make([]byte, 0, len(buf))
		}
		c.TaskRole = append(c.TaskRole, buf...)
	}

	// Field (2) 'TaskPartyId'
	{
		buf = tail[o2:o3]
		if len(buf) > 64 {
			return ssz.ErrBytesLength
		}
		if cap(c.TaskPartyId) == 0 {
			c.TaskPartyId = make([]byte, 0, len(buf))
		}
		c.TaskPartyId = append(c.TaskPartyId, buf...)
	}

	// Field (3) 'Owner'
	{
		buf = tail[o3:o5]
		if c.Owner == nil {
			c.Owner = new(TaskOrganizationIdentityInfo)
		}
		if err = c.Owner.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (5) 'Sign'
	{
		buf = tail[o5:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(c.Sign) == 0 {
			c.Sign = make([]byte, 0, len(buf))
		}
		c.Sign = append(c.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CommitMsg object
func (c *CommitMsg) SizeSSZ() (size int) {
	size = 28

	// Field (0) 'ProposalId'
	size += len(c.ProposalId)

	// Field (1) 'TaskRole'
	size += len(c.TaskRole)

	// Field (2) 'TaskPartyId'
	size += len(c.TaskPartyId)

	// Field (3) 'Owner'
	if c.Owner == nil {
		c.Owner = new(TaskOrganizationIdentityInfo)
	}
	size += c.Owner.SizeSSZ()

	// Field (5) 'Sign'
	size += len(c.Sign)

	return
}

// HashTreeRoot ssz hashes the CommitMsg object
func (c *CommitMsg) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CommitMsg object with a hasher
func (c *CommitMsg) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ProposalId'
	if len(c.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.ProposalId)

	// Field (1) 'TaskRole'
	if len(c.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.TaskRole)

	// Field (2) 'TaskPartyId'
	if len(c.TaskPartyId) > 64 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.TaskPartyId)

	// Field (3) 'Owner'
	if err = c.Owner.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'CreateAt'
	hh.PutUint64(c.CreateAt)

	// Field (5) 'Sign'
	if len(c.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the TaskResultMsg object
func (t *TaskResultMsg) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TaskResultMsg object to a target array
func (t *TaskResultMsg) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(32)

	// Offset (0) 'ProposalId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.ProposalId)

	// Offset (1) 'TaskRole'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.TaskRole)

	// Offset (2) 'TaskId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.TaskId)

	// Offset (3) 'Owner'
	dst = ssz.WriteOffset(dst, offset)
	if t.Owner == nil {
		t.Owner = new(TaskOrganizationIdentityInfo)
	}
	offset += t.Owner.SizeSSZ()

	// Offset (4) 'TaskEventList'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(t.TaskEventList); ii++ {
		offset += 4
		offset += t.TaskEventList[ii].SizeSSZ()
	}

	// Field (5) 'CreateAt'
	dst = ssz.MarshalUint64(dst, t.CreateAt)

	// Offset (6) 'Sign'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Sign)

	// Field (0) 'ProposalId'
	if len(t.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.ProposalId...)

	// Field (1) 'TaskRole'
	if len(t.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.TaskRole...)

	// Field (2) 'TaskId'
	if len(t.TaskId) > 128 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.TaskId...)

	// Field (3) 'Owner'
	if dst, err = t.Owner.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'TaskEventList'
	if len(t.TaskEventList) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(t.TaskEventList)
		for ii := 0; ii < len(t.TaskEventList); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += t.TaskEventList[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(t.TaskEventList); ii++ {
		if dst, err = t.TaskEventList[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (6) 'Sign'
	if len(t.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Sign...)

	return
}

// UnmarshalSSZ ssz unmarshals the TaskResultMsg object
func (t *TaskResultMsg) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 32 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3, o4, o6 uint64

	// Offset (0) 'ProposalId'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 32 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskRole'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'TaskId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'Owner'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'TaskEventList'
	if o4 = ssz.ReadOffset(buf[16:20]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Field (5) 'CreateAt'
	t.CreateAt = ssz.UnmarshallUint64(buf[20:28])

	// Offset (6) 'Sign'
	if o6 = ssz.ReadOffset(buf[28:32]); o6 > size || o4 > o6 {
		return ssz.ErrOffset
	}

	// Field (0) 'ProposalId'
	{
		buf = tail[o0:o1]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(t.ProposalId) == 0 {
			t.ProposalId = make([]byte, 0, len(buf))
		}
		t.ProposalId = append(t.ProposalId, buf...)
	}

	// Field (1) 'TaskRole'
	{
		buf = tail[o1:o2]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(t.TaskRole) == 0 {
			t.TaskRole = make([]byte, 0, len(buf))
		}
		t.TaskRole = append(t.TaskRole, buf...)
	}

	// Field (2) 'TaskId'
	{
		buf = tail[o2:o3]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(t.TaskId) == 0 {
			t.TaskId = make([]byte, 0, len(buf))
		}
		t.TaskId = append(t.TaskId, buf...)
	}

	// Field (3) 'Owner'
	{
		buf = tail[o3:o4]
		if t.Owner == nil {
			t.Owner = new(TaskOrganizationIdentityInfo)
		}
		if err = t.Owner.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (4) 'TaskEventList'
	{
		buf = tail[o4:o6]
		num, err := ssz.DecodeDynamicLength(buf, 16777216)
		if err != nil {
			return err
		}
		t.TaskEventList = make([]*TaskEvent, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if t.TaskEventList[indx] == nil {
				t.TaskEventList[indx] = new(TaskEvent)
			}
			if err = t.TaskEventList[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (6) 'Sign'
	{
		buf = tail[o6:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(t.Sign) == 0 {
			t.Sign = make([]byte, 0, len(buf))
		}
		t.Sign = append(t.Sign, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TaskResultMsg object
func (t *TaskResultMsg) SizeSSZ() (size int) {
	size = 32

	// Field (0) 'ProposalId'
	size += len(t.ProposalId)

	// Field (1) 'TaskRole'
	size += len(t.TaskRole)

	// Field (2) 'TaskId'
	size += len(t.TaskId)

	// Field (3) 'Owner'
	if t.Owner == nil {
		t.Owner = new(TaskOrganizationIdentityInfo)
	}
	size += t.Owner.SizeSSZ()

	// Field (4) 'TaskEventList'
	for ii := 0; ii < len(t.TaskEventList); ii++ {
		size += 4
		size += t.TaskEventList[ii].SizeSSZ()
	}

	// Field (6) 'Sign'
	size += len(t.Sign)

	return
}

// HashTreeRoot ssz hashes the TaskResultMsg object
func (t *TaskResultMsg) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TaskResultMsg object with a hasher
func (t *TaskResultMsg) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ProposalId'
	if len(t.ProposalId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.ProposalId)

	// Field (1) 'TaskRole'
	if len(t.TaskRole) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.TaskRole)

	// Field (2) 'TaskId'
	if len(t.TaskId) > 128 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.TaskId)

	// Field (3) 'Owner'
	if err = t.Owner.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'TaskEventList'
	{
		subIndx := hh.Index()
		num := uint64(len(t.TaskEventList))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = t.TaskEventList[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	// Field (5) 'CreateAt'
	hh.PutUint64(t.CreateAt)

	// Field (6) 'Sign'
	if len(t.Sign) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Sign)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the TaskEvent object
func (t *TaskEvent) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TaskEvent object to a target array
func (t *TaskEvent) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(24)

	// Offset (0) 'Type'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Type)

	// Offset (1) 'TaskId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.TaskId)

	// Offset (2) 'IdentityId'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.IdentityId)

	// Offset (3) 'Content'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Content)

	// Field (4) 'CreateAt'
	dst = ssz.MarshalUint64(dst, t.CreateAt)

	// Field (0) 'Type'
	if len(t.Type) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Type...)

	// Field (1) 'TaskId'
	if len(t.TaskId) > 128 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.TaskId...)

	// Field (2) 'IdentityId'
	if len(t.IdentityId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.IdentityId...)

	// Field (3) 'Content'
	if len(t.Content) > 2048 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, t.Content...)

	return
}

// UnmarshalSSZ ssz unmarshals the TaskEvent object
func (t *TaskEvent) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 24 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3 uint64

	// Offset (0) 'Type'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 24 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'TaskId'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'IdentityId'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'Content'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'CreateAt'
	t.CreateAt = ssz.UnmarshallUint64(buf[16:24])

	// Field (0) 'Type'
	{
		buf = tail[o0:o1]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(t.Type) == 0 {
			t.Type = make([]byte, 0, len(buf))
		}
		t.Type = append(t.Type, buf...)
	}

	// Field (1) 'TaskId'
	{
		buf = tail[o1:o2]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(t.TaskId) == 0 {
			t.TaskId = make([]byte, 0, len(buf))
		}
		t.TaskId = append(t.TaskId, buf...)
	}

	// Field (2) 'IdentityId'
	{
		buf = tail[o2:o3]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(t.IdentityId) == 0 {
			t.IdentityId = make([]byte, 0, len(buf))
		}
		t.IdentityId = append(t.IdentityId, buf...)
	}

	// Field (3) 'Content'
	{
		buf = tail[o3:]
		if len(buf) > 2048 {
			return ssz.ErrBytesLength
		}
		if cap(t.Content) == 0 {
			t.Content = make([]byte, 0, len(buf))
		}
		t.Content = append(t.Content, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the TaskEvent object
func (t *TaskEvent) SizeSSZ() (size int) {
	size = 24

	// Field (0) 'Type'
	size += len(t.Type)

	// Field (1) 'TaskId'
	size += len(t.TaskId)

	// Field (2) 'IdentityId'
	size += len(t.IdentityId)

	// Field (3) 'Content'
	size += len(t.Content)

	return
}

// HashTreeRoot ssz hashes the TaskEvent object
func (t *TaskEvent) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TaskEvent object with a hasher
func (t *TaskEvent) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Type'
	if len(t.Type) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Type)

	// Field (1) 'TaskId'
	if len(t.TaskId) > 128 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.TaskId)

	// Field (2) 'IdentityId'
	if len(t.IdentityId) > 1024 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.IdentityId)

	// Field (3) 'Content'
	if len(t.Content) > 2048 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(t.Content)

	// Field (4) 'CreateAt'
	hh.PutUint64(t.CreateAt)

	hh.Merkleize(indx)
	return
}
