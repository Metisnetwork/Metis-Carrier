// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/rpc/debug/v1/debug.proto

package carrier_rpc_v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	v1 "github.com/RosettaFlow/Carrier-Go/lib/p2p/v1"
	types "github.com/RosettaFlow/Carrier-Go/lib/types"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PeerDirection states the direction of the connection to a peer.
type PeerDirection int32

const (
	PeerDirection_UNKNOWN  PeerDirection = 0
	PeerDirection_INBOUND  PeerDirection = 1
	PeerDirection_OUTBOUND PeerDirection = 2
)

var PeerDirection_name = map[int32]string{
	0: "UNKNOWN",
	1: "INBOUND",
	2: "OUTBOUND",
}

var PeerDirection_value = map[string]int32{
	"UNKNOWN":  0,
	"INBOUND":  1,
	"OUTBOUND": 2,
}

func (x PeerDirection) String() string {
	return proto.EnumName(PeerDirection_name, int32(x))
}

func (PeerDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{0}
}

// ConnectionState states the current status of the peer.
type ConnectionState int32

const (
	ConnectionState_DISCONNECTED  ConnectionState = 0
	ConnectionState_DISCONNECTING ConnectionState = 1
	ConnectionState_CONNECTED     ConnectionState = 2
	ConnectionState_CONNECTING    ConnectionState = 3
)

var ConnectionState_name = map[int32]string{
	0: "DISCONNECTED",
	1: "DISCONNECTING",
	2: "CONNECTED",
	3: "CONNECTING",
}

var ConnectionState_value = map[string]int32{
	"DISCONNECTED":  0,
	"DISCONNECTING": 1,
	"CONNECTED":     2,
	"CONNECTING":    3,
}

func (x ConnectionState) String() string {
	return proto.EnumName(ConnectionState_name, int32(x))
}

func (ConnectionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{1}
}

type LoggingLevelRequest_Level int32

const (
	LoggingLevelRequest_INFO  LoggingLevelRequest_Level = 0
	LoggingLevelRequest_DEBUG LoggingLevelRequest_Level = 1
	LoggingLevelRequest_TRACE LoggingLevelRequest_Level = 2
)

var LoggingLevelRequest_Level_name = map[int32]string{
	0: "INFO",
	1: "DEBUG",
	2: "TRACE",
}

var LoggingLevelRequest_Level_value = map[string]int32{
	"INFO":  0,
	"DEBUG": 1,
	"TRACE": 2,
}

func (x LoggingLevelRequest_Level) String() string {
	return proto.EnumName(LoggingLevelRequest_Level_name, int32(x))
}

func (LoggingLevelRequest_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{1, 0}
}

type PeerRequest struct {
	PeerId               string   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerRequest) Reset()         { *m = PeerRequest{} }
func (m *PeerRequest) String() string { return proto.CompactTextString(m) }
func (*PeerRequest) ProtoMessage()    {}
func (*PeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{0}
}
func (m *PeerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerRequest.Merge(m, src)
}
func (m *PeerRequest) XXX_Size() int {
	return m.Size()
}
func (m *PeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeerRequest proto.InternalMessageInfo

func (m *PeerRequest) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

type LoggingLevelRequest struct {
	Level                LoggingLevelRequest_Level `protobuf:"varint,1,opt,name=level,proto3,enum=carrier.rpc.v1.LoggingLevelRequest_Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *LoggingLevelRequest) Reset()         { *m = LoggingLevelRequest{} }
func (m *LoggingLevelRequest) String() string { return proto.CompactTextString(m) }
func (*LoggingLevelRequest) ProtoMessage()    {}
func (*LoggingLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{1}
}
func (m *LoggingLevelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoggingLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoggingLevelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoggingLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggingLevelRequest.Merge(m, src)
}
func (m *LoggingLevelRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoggingLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggingLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoggingLevelRequest proto.InternalMessageInfo

func (m *LoggingLevelRequest) GetLevel() LoggingLevelRequest_Level {
	if m != nil {
		return m.Level
	}
	return LoggingLevelRequest_INFO
}

type DebugPeerAddResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugPeerAddResponse) Reset()         { *m = DebugPeerAddResponse{} }
func (m *DebugPeerAddResponse) String() string { return proto.CompactTextString(m) }
func (*DebugPeerAddResponse) ProtoMessage()    {}
func (*DebugPeerAddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{2}
}
func (m *DebugPeerAddResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugPeerAddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugPeerAddResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugPeerAddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugPeerAddResponse.Merge(m, src)
}
func (m *DebugPeerAddResponse) XXX_Size() int {
	return m.Size()
}
func (m *DebugPeerAddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugPeerAddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DebugPeerAddResponse proto.InternalMessageInfo

func (m *DebugPeerAddResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DebugPeerCountResponse struct {
	Count                uint64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugPeerCountResponse) Reset()         { *m = DebugPeerCountResponse{} }
func (m *DebugPeerCountResponse) String() string { return proto.CompactTextString(m) }
func (*DebugPeerCountResponse) ProtoMessage()    {}
func (*DebugPeerCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{3}
}
func (m *DebugPeerCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugPeerCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugPeerCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugPeerCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugPeerCountResponse.Merge(m, src)
}
func (m *DebugPeerCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *DebugPeerCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugPeerCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DebugPeerCountResponse proto.InternalMessageInfo

func (m *DebugPeerCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DebugPeerResponses struct {
	Responses            []*DebugPeerResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DebugPeerResponses) Reset()         { *m = DebugPeerResponses{} }
func (m *DebugPeerResponses) String() string { return proto.CompactTextString(m) }
func (*DebugPeerResponses) ProtoMessage()    {}
func (*DebugPeerResponses) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{4}
}
func (m *DebugPeerResponses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugPeerResponses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugPeerResponses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugPeerResponses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugPeerResponses.Merge(m, src)
}
func (m *DebugPeerResponses) XXX_Size() int {
	return m.Size()
}
func (m *DebugPeerResponses) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugPeerResponses.DiscardUnknown(m)
}

var xxx_messageInfo_DebugPeerResponses proto.InternalMessageInfo

func (m *DebugPeerResponses) GetResponses() []*DebugPeerResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type DebugPeerResponse struct {
	// Listening addresses know of the peer.
	ListeningAddresses []string `protobuf:"bytes,1,rep,name=listening_addresses,json=listeningAddresses,proto3" json:"listening_addresses,omitempty"`
	// Direction of current connection.
	Direction PeerDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=carrier.rpc.v1.PeerDirection" json:"direction,omitempty"`
	// Current connection between host and peer.
	ConnectionState ConnectionState `protobuf:"varint,3,opt,name=connection_state,json=connectionState,proto3,enum=carrier.rpc.v1.ConnectionState" json:"connection_state,omitempty"`
	// Peer ID of peer.
	PeerId string `protobuf:"bytes,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// ENR of peer at the current moment.
	Enr string `protobuf:"bytes,5,opt,name=enr,proto3" json:"enr,omitempty"`
	// Peer Info of the peer containing all relevant metadata.
	PeerInfo *DebugPeerResponse_PeerInfo `protobuf:"bytes,6,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info,omitempty"`
	// Peer Status of the peer.
	PeerStatus *v1.Status `protobuf:"bytes,7,opt,name=peer_status,json=peerStatus,proto3" json:"peer_status,omitempty"`
	// Last know update time for peer status.
	LastUpdated uint64 `protobuf:"varint,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Score Info of the peer.
	ScoreInfo            *ScoreInfo `protobuf:"bytes,9,opt,name=score_info,json=scoreInfo,proto3" json:"score_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DebugPeerResponse) Reset()         { *m = DebugPeerResponse{} }
func (m *DebugPeerResponse) String() string { return proto.CompactTextString(m) }
func (*DebugPeerResponse) ProtoMessage()    {}
func (*DebugPeerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{5}
}
func (m *DebugPeerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugPeerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugPeerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugPeerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugPeerResponse.Merge(m, src)
}
func (m *DebugPeerResponse) XXX_Size() int {
	return m.Size()
}
func (m *DebugPeerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugPeerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DebugPeerResponse proto.InternalMessageInfo

func (m *DebugPeerResponse) GetListeningAddresses() []string {
	if m != nil {
		return m.ListeningAddresses
	}
	return nil
}

func (m *DebugPeerResponse) GetDirection() PeerDirection {
	if m != nil {
		return m.Direction
	}
	return PeerDirection_UNKNOWN
}

func (m *DebugPeerResponse) GetConnectionState() ConnectionState {
	if m != nil {
		return m.ConnectionState
	}
	return ConnectionState_DISCONNECTED
}

func (m *DebugPeerResponse) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *DebugPeerResponse) GetEnr() string {
	if m != nil {
		return m.Enr
	}
	return ""
}

func (m *DebugPeerResponse) GetPeerInfo() *DebugPeerResponse_PeerInfo {
	if m != nil {
		return m.PeerInfo
	}
	return nil
}

func (m *DebugPeerResponse) GetPeerStatus() *v1.Status {
	if m != nil {
		return m.PeerStatus
	}
	return nil
}

func (m *DebugPeerResponse) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *DebugPeerResponse) GetScoreInfo() *ScoreInfo {
	if m != nil {
		return m.ScoreInfo
	}
	return nil
}

// Peer related metadata that is useful for debugging.
type DebugPeerResponse_PeerInfo struct {
	// Metadata of the peer, containing their bitfield
	// and sequence number.
	Metadata *v1.MetaData `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// List of protocols the peer supports.
	Protocols []string `protobuf:"bytes,2,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// Number of times peer has been penalised.
	FaultCount uint64 `protobuf:"varint,3,opt,name=fault_count,json=faultCount,proto3" json:"fault_count,omitempty"`
	// Protocol Version peer is running.
	ProtocolVersion string `protobuf:"bytes,4,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// Agent Version peer is running.
	AgentVersion string `protobuf:"bytes,5,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	// Latency of responses from peer(in ms).
	PeerLatency          uint64   `protobuf:"varint,6,opt,name=peer_latency,json=peerLatency,proto3" json:"peer_latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugPeerResponse_PeerInfo) Reset()         { *m = DebugPeerResponse_PeerInfo{} }
func (m *DebugPeerResponse_PeerInfo) String() string { return proto.CompactTextString(m) }
func (*DebugPeerResponse_PeerInfo) ProtoMessage()    {}
func (*DebugPeerResponse_PeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{5, 0}
}
func (m *DebugPeerResponse_PeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugPeerResponse_PeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugPeerResponse_PeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugPeerResponse_PeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugPeerResponse_PeerInfo.Merge(m, src)
}
func (m *DebugPeerResponse_PeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *DebugPeerResponse_PeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugPeerResponse_PeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DebugPeerResponse_PeerInfo proto.InternalMessageInfo

func (m *DebugPeerResponse_PeerInfo) GetMetadata() *v1.MetaData {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DebugPeerResponse_PeerInfo) GetProtocols() []string {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *DebugPeerResponse_PeerInfo) GetFaultCount() uint64 {
	if m != nil {
		return m.FaultCount
	}
	return 0
}

func (m *DebugPeerResponse_PeerInfo) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *DebugPeerResponse_PeerInfo) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

func (m *DebugPeerResponse_PeerInfo) GetPeerLatency() uint64 {
	if m != nil {
		return m.PeerLatency
	}
	return 0
}

// The Scoring related information of the particular peer.
type ScoreInfo struct {
	OverallScore float32 `protobuf:"fixed32,1,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
	// Amount of processed blocks provided by
	// the peer.
	ProcessedBlocks uint64 `protobuf:"varint,2,opt,name=processed_blocks,json=processedBlocks,proto3" json:"processed_blocks,omitempty"`
	// Related block provider score.
	BlockProviderScore float32 `protobuf:"fixed32,3,opt,name=block_provider_score,json=blockProviderScore,proto3" json:"block_provider_score,omitempty"`
	// Relevant scores by particular topic.
	TopicScores map[string]*TopicScoreSnapshot `protobuf:"bytes,4,rep,name=topic_scores,json=topicScores,proto3" json:"topic_scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Gossip Score for peer.
	GossipScore float32 `protobuf:"fixed32,5,opt,name=gossip_score,json=gossipScore,proto3" json:"gossip_score,omitempty"`
	// Behaviour penalty of peer.
	BehaviourPenalty float32 `protobuf:"fixed32,6,opt,name=behaviour_penalty,json=behaviourPenalty,proto3" json:"behaviour_penalty,omitempty"`
	// Returns the current validation error(if it exists).
	ValidationError      string   `protobuf:"bytes,7,opt,name=validation_error,json=validationError,proto3" json:"validation_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScoreInfo) Reset()         { *m = ScoreInfo{} }
func (m *ScoreInfo) String() string { return proto.CompactTextString(m) }
func (*ScoreInfo) ProtoMessage()    {}
func (*ScoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{6}
}
func (m *ScoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreInfo.Merge(m, src)
}
func (m *ScoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *ScoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreInfo proto.InternalMessageInfo

func (m *ScoreInfo) GetOverallScore() float32 {
	if m != nil {
		return m.OverallScore
	}
	return 0
}

func (m *ScoreInfo) GetProcessedBlocks() uint64 {
	if m != nil {
		return m.ProcessedBlocks
	}
	return 0
}

func (m *ScoreInfo) GetBlockProviderScore() float32 {
	if m != nil {
		return m.BlockProviderScore
	}
	return 0
}

func (m *ScoreInfo) GetTopicScores() map[string]*TopicScoreSnapshot {
	if m != nil {
		return m.TopicScores
	}
	return nil
}

func (m *ScoreInfo) GetGossipScore() float32 {
	if m != nil {
		return m.GossipScore
	}
	return 0
}

func (m *ScoreInfo) GetBehaviourPenalty() float32 {
	if m != nil {
		return m.BehaviourPenalty
	}
	return 0
}

func (m *ScoreInfo) GetValidationError() string {
	if m != nil {
		return m.ValidationError
	}
	return ""
}

type TopicScoreSnapshot struct {
	// Time a peer has spent in the gossip mesh.
	TimeInMesh uint64 `protobuf:"varint,1,opt,name=time_in_mesh,json=timeInMesh,proto3" json:"time_in_mesh,omitempty"`
	// This is the number of first message deliveries in the topic.
	FirstMessageDeliveries float32 `protobuf:"fixed32,2,opt,name=first_message_deliveries,json=firstMessageDeliveries,proto3" json:"first_message_deliveries,omitempty"`
	// This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of
	// message validation.It effectively tracks first and near-first
	// deliveries, ie a message seen from a mesh peer before we have forwarded it to them.
	MeshMessageDeliveries float32 `protobuf:"fixed32,3,opt,name=mesh_message_deliveries,json=meshMessageDeliveries,proto3" json:"mesh_message_deliveries,omitempty"`
	// This is the number of invalid messages in the topic from the peer.
	InvalidMessageDeliveries float32  `protobuf:"fixed32,4,opt,name=invalid_message_deliveries,json=invalidMessageDeliveries,proto3" json:"invalid_message_deliveries,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *TopicScoreSnapshot) Reset()         { *m = TopicScoreSnapshot{} }
func (m *TopicScoreSnapshot) String() string { return proto.CompactTextString(m) }
func (*TopicScoreSnapshot) ProtoMessage()    {}
func (*TopicScoreSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{7}
}
func (m *TopicScoreSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicScoreSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicScoreSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicScoreSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicScoreSnapshot.Merge(m, src)
}
func (m *TopicScoreSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *TopicScoreSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicScoreSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_TopicScoreSnapshot proto.InternalMessageInfo

func (m *TopicScoreSnapshot) GetTimeInMesh() uint64 {
	if m != nil {
		return m.TimeInMesh
	}
	return 0
}

func (m *TopicScoreSnapshot) GetFirstMessageDeliveries() float32 {
	if m != nil {
		return m.FirstMessageDeliveries
	}
	return 0
}

func (m *TopicScoreSnapshot) GetMeshMessageDeliveries() float32 {
	if m != nil {
		return m.MeshMessageDeliveries
	}
	return 0
}

func (m *TopicScoreSnapshot) GetInvalidMessageDeliveries() float32 {
	if m != nil {
		return m.InvalidMessageDeliveries
	}
	return 0
}

type Get2PcProposalStateByTaskIdRequest struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Get2PcProposalStateByTaskIdRequest) Reset()         { *m = Get2PcProposalStateByTaskIdRequest{} }
func (m *Get2PcProposalStateByTaskIdRequest) String() string { return proto.CompactTextString(m) }
func (*Get2PcProposalStateByTaskIdRequest) ProtoMessage()    {}
func (*Get2PcProposalStateByTaskIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{8}
}
func (m *Get2PcProposalStateByTaskIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Get2PcProposalStateByTaskIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Get2PcProposalStateByTaskIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Get2PcProposalStateByTaskIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Get2PcProposalStateByTaskIdRequest.Merge(m, src)
}
func (m *Get2PcProposalStateByTaskIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *Get2PcProposalStateByTaskIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Get2PcProposalStateByTaskIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Get2PcProposalStateByTaskIdRequest proto.InternalMessageInfo

func (m *Get2PcProposalStateByTaskIdRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type Get2PcProposalStateByProposalIdRequest struct {
	ProposalId           string   `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Get2PcProposalStateByProposalIdRequest) Reset() {
	*m = Get2PcProposalStateByProposalIdRequest{}
}
func (m *Get2PcProposalStateByProposalIdRequest) String() string { return proto.CompactTextString(m) }
func (*Get2PcProposalStateByProposalIdRequest) ProtoMessage()    {}
func (*Get2PcProposalStateByProposalIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{9}
}
func (m *Get2PcProposalStateByProposalIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Get2PcProposalStateByProposalIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Get2PcProposalStateByProposalIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Get2PcProposalStateByProposalIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Get2PcProposalStateByProposalIdRequest.Merge(m, src)
}
func (m *Get2PcProposalStateByProposalIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *Get2PcProposalStateByProposalIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Get2PcProposalStateByProposalIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Get2PcProposalStateByProposalIdRequest proto.InternalMessageInfo

func (m *Get2PcProposalStateByProposalIdRequest) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

type Get2PcProposalPrepareRequest struct {
	ProposalId           string   `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Get2PcProposalPrepareRequest) Reset()         { *m = Get2PcProposalPrepareRequest{} }
func (m *Get2PcProposalPrepareRequest) String() string { return proto.CompactTextString(m) }
func (*Get2PcProposalPrepareRequest) ProtoMessage()    {}
func (*Get2PcProposalPrepareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{10}
}
func (m *Get2PcProposalPrepareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Get2PcProposalPrepareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Get2PcProposalPrepareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Get2PcProposalPrepareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Get2PcProposalPrepareRequest.Merge(m, src)
}
func (m *Get2PcProposalPrepareRequest) XXX_Size() int {
	return m.Size()
}
func (m *Get2PcProposalPrepareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Get2PcProposalPrepareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Get2PcProposalPrepareRequest proto.InternalMessageInfo

func (m *Get2PcProposalPrepareRequest) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

type Get2PcProposalConfirmRequest struct {
	ProposalId           string   `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Get2PcProposalConfirmRequest) Reset()         { *m = Get2PcProposalConfirmRequest{} }
func (m *Get2PcProposalConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*Get2PcProposalConfirmRequest) ProtoMessage()    {}
func (*Get2PcProposalConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{11}
}
func (m *Get2PcProposalConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Get2PcProposalConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Get2PcProposalConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Get2PcProposalConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Get2PcProposalConfirmRequest.Merge(m, src)
}
func (m *Get2PcProposalConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *Get2PcProposalConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Get2PcProposalConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Get2PcProposalConfirmRequest proto.InternalMessageInfo

func (m *Get2PcProposalConfirmRequest) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

type ProposalState struct {
	PeriodNum            uint32   `protobuf:"varint,2,opt,name=period_num,json=periodNum,proto3" json:"period_num,omitempty"`
	TaskId               string   `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ConsumeTime          uint64   `protobuf:"varint,4,opt,name=consume_time,json=consumeTime,proto3" json:"consume_time,omitempty"`
	TaskSenderIdentityId string   `protobuf:"bytes,5,opt,name=task_sender_identity_id,json=taskSenderIdentityId,proto3" json:"task_sender_identity_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposalState) Reset()         { *m = ProposalState{} }
func (m *ProposalState) String() string { return proto.CompactTextString(m) }
func (*ProposalState) ProtoMessage()    {}
func (*ProposalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{12}
}
func (m *ProposalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalState.Merge(m, src)
}
func (m *ProposalState) XXX_Size() int {
	return m.Size()
}
func (m *ProposalState) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalState.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalState proto.InternalMessageInfo

func (m *ProposalState) GetPeriodNum() uint32 {
	if m != nil {
		return m.PeriodNum
	}
	return 0
}

func (m *ProposalState) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ProposalState) GetConsumeTime() uint64 {
	if m != nil {
		return m.ConsumeTime
	}
	return 0
}

func (m *ProposalState) GetTaskSenderIdentityId() string {
	if m != nil {
		return m.TaskSenderIdentityId
	}
	return ""
}

type Get2PcProposalStateResponse struct {
	ProposalId           string                    `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	State                map[string]*ProposalState `protobuf:"bytes,2,rep,name=state,proto3" json:"state,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Get2PcProposalStateResponse) Reset()         { *m = Get2PcProposalStateResponse{} }
func (m *Get2PcProposalStateResponse) String() string { return proto.CompactTextString(m) }
func (*Get2PcProposalStateResponse) ProtoMessage()    {}
func (*Get2PcProposalStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{13}
}
func (m *Get2PcProposalStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Get2PcProposalStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Get2PcProposalStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Get2PcProposalStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Get2PcProposalStateResponse.Merge(m, src)
}
func (m *Get2PcProposalStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *Get2PcProposalStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Get2PcProposalStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Get2PcProposalStateResponse proto.InternalMessageInfo

func (m *Get2PcProposalStateResponse) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *Get2PcProposalStateResponse) GetState() map[string]*ProposalState {
	if m != nil {
		return m.State
	}
	return nil
}

type Get2PcProposalPrepareResponse struct {
	Votes                map[string]*types.PrepareVote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	YesVotes             map[string]uint32             `protobuf:"bytes,2,rep,name=yesVotes,proto3" json:"yesVotes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	VoteStatus           map[string]uint32             `protobuf:"bytes,3,rep,name=voteStatus,proto3" json:"voteStatus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Get2PcProposalPrepareResponse) Reset()         { *m = Get2PcProposalPrepareResponse{} }
func (m *Get2PcProposalPrepareResponse) String() string { return proto.CompactTextString(m) }
func (*Get2PcProposalPrepareResponse) ProtoMessage()    {}
func (*Get2PcProposalPrepareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{14}
}
func (m *Get2PcProposalPrepareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Get2PcProposalPrepareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Get2PcProposalPrepareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Get2PcProposalPrepareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Get2PcProposalPrepareResponse.Merge(m, src)
}
func (m *Get2PcProposalPrepareResponse) XXX_Size() int {
	return m.Size()
}
func (m *Get2PcProposalPrepareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Get2PcProposalPrepareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Get2PcProposalPrepareResponse proto.InternalMessageInfo

func (m *Get2PcProposalPrepareResponse) GetVotes() map[string]*types.PrepareVote {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Get2PcProposalPrepareResponse) GetYesVotes() map[string]uint32 {
	if m != nil {
		return m.YesVotes
	}
	return nil
}

func (m *Get2PcProposalPrepareResponse) GetVoteStatus() map[string]uint32 {
	if m != nil {
		return m.VoteStatus
	}
	return nil
}

type Get2PcProposalConfirmResponse struct {
	Votes                map[string]*types.ConfirmVote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	YesVotes             map[string]uint32             `protobuf:"bytes,2,rep,name=yesVotes,proto3" json:"yesVotes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	VoteStatus           map[string]uint32             `protobuf:"bytes,3,rep,name=voteStatus,proto3" json:"voteStatus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Get2PcProposalConfirmResponse) Reset()         { *m = Get2PcProposalConfirmResponse{} }
func (m *Get2PcProposalConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*Get2PcProposalConfirmResponse) ProtoMessage()    {}
func (*Get2PcProposalConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_345d95372e90dbe0, []int{15}
}
func (m *Get2PcProposalConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Get2PcProposalConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Get2PcProposalConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Get2PcProposalConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Get2PcProposalConfirmResponse.Merge(m, src)
}
func (m *Get2PcProposalConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *Get2PcProposalConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Get2PcProposalConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Get2PcProposalConfirmResponse proto.InternalMessageInfo

func (m *Get2PcProposalConfirmResponse) GetVotes() map[string]*types.ConfirmVote {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Get2PcProposalConfirmResponse) GetYesVotes() map[string]uint32 {
	if m != nil {
		return m.YesVotes
	}
	return nil
}

func (m *Get2PcProposalConfirmResponse) GetVoteStatus() map[string]uint32 {
	if m != nil {
		return m.VoteStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("carrier.rpc.v1.PeerDirection", PeerDirection_name, PeerDirection_value)
	proto.RegisterEnum("carrier.rpc.v1.ConnectionState", ConnectionState_name, ConnectionState_value)
	proto.RegisterEnum("carrier.rpc.v1.LoggingLevelRequest_Level", LoggingLevelRequest_Level_name, LoggingLevelRequest_Level_value)
	proto.RegisterType((*PeerRequest)(nil), "carrier.rpc.v1.PeerRequest")
	proto.RegisterType((*LoggingLevelRequest)(nil), "carrier.rpc.v1.LoggingLevelRequest")
	proto.RegisterType((*DebugPeerAddResponse)(nil), "carrier.rpc.v1.DebugPeerAddResponse")
	proto.RegisterType((*DebugPeerCountResponse)(nil), "carrier.rpc.v1.DebugPeerCountResponse")
	proto.RegisterType((*DebugPeerResponses)(nil), "carrier.rpc.v1.DebugPeerResponses")
	proto.RegisterType((*DebugPeerResponse)(nil), "carrier.rpc.v1.DebugPeerResponse")
	proto.RegisterType((*DebugPeerResponse_PeerInfo)(nil), "carrier.rpc.v1.DebugPeerResponse.PeerInfo")
	proto.RegisterType((*ScoreInfo)(nil), "carrier.rpc.v1.ScoreInfo")
	proto.RegisterMapType((map[string]*TopicScoreSnapshot)(nil), "carrier.rpc.v1.ScoreInfo.TopicScoresEntry")
	proto.RegisterType((*TopicScoreSnapshot)(nil), "carrier.rpc.v1.TopicScoreSnapshot")
	proto.RegisterType((*Get2PcProposalStateByTaskIdRequest)(nil), "carrier.rpc.v1.Get2pcProposalStateByTaskIdRequest")
	proto.RegisterType((*Get2PcProposalStateByProposalIdRequest)(nil), "carrier.rpc.v1.Get2pcProposalStateByProposalIdRequest")
	proto.RegisterType((*Get2PcProposalPrepareRequest)(nil), "carrier.rpc.v1.Get2pcProposalPrepareRequest")
	proto.RegisterType((*Get2PcProposalConfirmRequest)(nil), "carrier.rpc.v1.Get2pcProposalConfirmRequest")
	proto.RegisterType((*ProposalState)(nil), "carrier.rpc.v1.ProposalState")
	proto.RegisterType((*Get2PcProposalStateResponse)(nil), "carrier.rpc.v1.Get2pcProposalStateResponse")
	proto.RegisterMapType((map[string]*ProposalState)(nil), "carrier.rpc.v1.Get2pcProposalStateResponse.StateEntry")
	proto.RegisterType((*Get2PcProposalPrepareResponse)(nil), "carrier.rpc.v1.Get2pcProposalPrepareResponse")
	proto.RegisterMapType((map[string]uint32)(nil), "carrier.rpc.v1.Get2pcProposalPrepareResponse.VoteStatusEntry")
	proto.RegisterMapType((map[string]*types.PrepareVote)(nil), "carrier.rpc.v1.Get2pcProposalPrepareResponse.VotesEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "carrier.rpc.v1.Get2pcProposalPrepareResponse.YesVotesEntry")
	proto.RegisterType((*Get2PcProposalConfirmResponse)(nil), "carrier.rpc.v1.Get2pcProposalConfirmResponse")
	proto.RegisterMapType((map[string]uint32)(nil), "carrier.rpc.v1.Get2pcProposalConfirmResponse.VoteStatusEntry")
	proto.RegisterMapType((map[string]*types.ConfirmVote)(nil), "carrier.rpc.v1.Get2pcProposalConfirmResponse.VotesEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "carrier.rpc.v1.Get2pcProposalConfirmResponse.YesVotesEntry")
}

func init() { proto.RegisterFile("lib/rpc/debug/v1/debug.proto", fileDescriptor_345d95372e90dbe0) }

var fileDescriptor_345d95372e90dbe0 = []byte{
	// 1656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4b, 0x6f, 0xe3, 0xc8,
	0x11, 0x1e, 0xea, 0x31, 0xb6, 0x4a, 0xd2, 0x58, 0xd3, 0xeb, 0xb5, 0x69, 0xf9, 0xcd, 0x59, 0x38,
	0x5e, 0xef, 0x44, 0x9a, 0xd5, 0x26, 0x5e, 0x23, 0x93, 0xc1, 0xc0, 0xb6, 0x1c, 0x43, 0x89, 0x2d,
	0x1b, 0xb4, 0xbd, 0x83, 0x1c, 0x02, 0x82, 0x16, 0xdb, 0x32, 0x61, 0x8a, 0xe4, 0xb2, 0x5b, 0x02,
	0x74, 0x0a, 0x90, 0xbf, 0x90, 0x5f, 0x90, 0xfc, 0x84, 0x5c, 0x03, 0xe4, 0x9c, 0x43, 0x0e, 0x01,
	0xf2, 0x07, 0x82, 0x41, 0x92, 0x7b, 0x02, 0xe4, 0x1e, 0x74, 0x35, 0x49, 0xbd, 0xe8, 0x91, 0x3d,
	0x98, 0x43, 0x6e, 0xdd, 0xf5, 0xf8, 0xea, 0xab, 0xaa, 0x7e, 0xc2, 0x8a, 0x63, 0x5f, 0x57, 0x03,
	0xbf, 0x55, 0xb5, 0xe8, 0x75, 0xb7, 0x5d, 0xed, 0x7d, 0x2d, 0x07, 0x15, 0x3f, 0xf0, 0xb8, 0x47,
	0x9e, 0xb5, 0xcc, 0x20, 0xb0, 0x69, 0x50, 0x09, 0xfc, 0x56, 0xa5, 0xf7, 0x75, 0x79, 0xa5, 0xed,
	0x79, 0x6d, 0x87, 0x56, 0x4d, 0xdf, 0xae, 0x9a, 0xae, 0xeb, 0x71, 0x93, 0xdb, 0x9e, 0xcb, 0xa4,
	0x75, 0x79, 0x39, 0xd4, 0xe2, 0xec, 0xba, 0x7b, 0x53, 0xa5, 0x1d, 0x9f, 0xf7, 0x43, 0xe5, 0x92,
	0x08, 0xe4, 0xd7, 0x7c, 0x11, 0xa2, 0x43, 0x19, 0x33, 0xdb, 0x34, 0xf2, 0x5b, 0x13, 0x2a, 0xde,
	0xf7, 0x29, 0xab, 0xb6, 0x3c, 0x97, 0x51, 0x97, 0x75, 0x19, 0xe3, 0x26, 0xa7, 0x52, 0xaf, 0x6d,
	0x41, 0xfe, 0x9c, 0xd2, 0x40, 0xa7, 0xdf, 0x77, 0x29, 0xe3, 0x64, 0x11, 0x66, 0x7c, 0x4a, 0x03,
	0xc3, 0xb6, 0x54, 0x65, 0x43, 0xd9, 0xce, 0xe9, 0x4f, 0xc5, 0xb4, 0x61, 0x69, 0xbf, 0x86, 0xcf,
	0x4e, 0xbc, 0x76, 0xdb, 0x76, 0xdb, 0x27, 0xb4, 0x47, 0x9d, 0xc8, 0xfe, 0x2d, 0x64, 0x1d, 0x31,
	0x47, 0xeb, 0x67, 0xb5, 0x2f, 0x2b, 0xa3, 0x49, 0x55, 0x12, 0x7c, 0x2a, 0x72, 0x22, 0xfd, 0xb4,
	0x1f, 0x40, 0x16, 0xe7, 0x64, 0x16, 0x32, 0x8d, 0xe6, 0xcf, 0xce, 0x4a, 0x4f, 0x48, 0x0e, 0xb2,
	0xf5, 0xa3, 0x83, 0xab, 0xe3, 0x92, 0x22, 0x86, 0x97, 0xfa, 0xfe, 0xe1, 0x51, 0x29, 0xa5, 0xbd,
	0x82, 0xf9, 0xba, 0xa8, 0x9e, 0x60, 0xbb, 0x6f, 0x59, 0x3a, 0x65, 0xbe, 0xc8, 0x87, 0xa8, 0x30,
	0x13, 0xa6, 0x1c, 0x32, 0x8e, 0xa6, 0x5a, 0x05, 0x16, 0x62, 0x8f, 0x43, 0xaf, 0xeb, 0xf2, 0xd8,
	0x67, 0x1e, 0xb2, 0x2d, 0x21, 0x40, 0x8f, 0x8c, 0x2e, 0x27, 0xda, 0x15, 0x90, 0xd8, 0x3e, 0x32,
	0x65, 0xe4, 0x2d, 0xe4, 0x82, 0x68, 0xa2, 0x2a, 0x1b, 0xe9, 0xed, 0x7c, 0x6d, 0x73, 0x3c, 0xcb,
	0x09, 0x37, 0x7d, 0xe0, 0xa3, 0xfd, 0x25, 0x0b, 0xcf, 0x27, 0x0c, 0x48, 0x15, 0x3e, 0x73, 0x6c,
	0xc6, 0xa9, 0x6b, 0xbb, 0x6d, 0xc3, 0xb4, 0xac, 0x80, 0xb2, 0x28, 0x40, 0x4e, 0x27, 0xb1, 0x6a,
	0x3f, 0xd2, 0x90, 0xd7, 0x90, 0xb3, 0xec, 0x80, 0xb6, 0xc4, 0xa2, 0x50, 0x53, 0x58, 0xed, 0xd5,
	0x71, 0x1e, 0x22, 0x42, 0x3d, 0x32, 0xd2, 0x07, 0xf6, 0xe4, 0xe7, 0x50, 0x6a, 0x79, 0xae, 0x2b,
	0x67, 0x06, 0xf6, 0x5f, 0x4d, 0x23, 0xc6, 0xfa, 0x38, 0xc6, 0x61, 0x6c, 0x77, 0x21, 0xcc, 0xf4,
	0xb9, 0xd6, 0xa8, 0x60, 0x78, 0x89, 0x64, 0x86, 0x97, 0x08, 0x29, 0x41, 0x9a, 0xba, 0x81, 0x9a,
	0x45, 0xa1, 0x18, 0x92, 0x63, 0xc8, 0x49, 0x53, 0xf7, 0xc6, 0x53, 0x9f, 0x6e, 0x28, 0xdb, 0xf9,
	0xda, 0xce, 0xd4, 0xda, 0x61, 0x16, 0x0d, 0xf7, 0xc6, 0xd3, 0x67, 0xfd, 0x70, 0x44, 0xbe, 0x85,
	0x3c, 0x02, 0x09, 0xe6, 0x5d, 0xa6, 0xce, 0x20, 0xd4, 0x42, 0x0c, 0xe5, 0xd7, 0x7c, 0x01, 0x75,
	0x81, 0x5a, 0x1d, 0x84, 0xa9, 0x1c, 0x93, 0x4d, 0x28, 0x38, 0x26, 0xe3, 0x46, 0xd7, 0xb7, 0x4c,
	0x4e, 0x2d, 0x75, 0x16, 0x1b, 0x9e, 0x17, 0xb2, 0x2b, 0x29, 0x22, 0x7b, 0x00, 0xac, 0xe5, 0x05,
	0x54, 0xb2, 0xcc, 0x21, 0xf4, 0xd2, 0x38, 0xcb, 0x0b, 0x61, 0x81, 0xa4, 0x72, 0x2c, 0x1a, 0x96,
	0xff, 0xa3, 0xc0, 0x6c, 0x44, 0x96, 0xfc, 0x08, 0x66, 0x3b, 0x94, 0x9b, 0x96, 0xc9, 0x4d, 0x5c,
	0x56, 0xf9, 0x9a, 0x3a, 0xce, 0xef, 0x94, 0x72, 0xb3, 0x6e, 0x72, 0x53, 0x8f, 0x2d, 0xc9, 0x0a,
	0xe4, 0x70, 0x1f, 0xb6, 0x3c, 0x87, 0xa9, 0x29, 0x6c, 0xfe, 0x40, 0x40, 0xd6, 0x21, 0x7f, 0x63,
	0x76, 0x1d, 0x6e, 0xc8, 0xd5, 0x9a, 0x46, 0xf2, 0x80, 0x22, 0x5c, 0xd0, 0xe4, 0x4b, 0x28, 0x45,
	0xd6, 0x46, 0x8f, 0x06, 0x4c, 0xac, 0x0d, 0xd9, 0x94, 0xb9, 0x48, 0xfe, 0x9d, 0x14, 0x93, 0x17,
	0x50, 0x34, 0xdb, 0xd4, 0xe5, 0xb1, 0x9d, 0xec, 0x53, 0x01, 0x85, 0x91, 0xd1, 0x26, 0x14, 0xb0,
	0xce, 0x8e, 0xc9, 0xa9, 0xdb, 0xea, 0x63, 0xcf, 0x32, 0x3a, 0xd6, 0xfe, 0x44, 0x8a, 0xb4, 0x3f,
	0xa6, 0x21, 0x17, 0x57, 0x43, 0xa0, 0x7a, 0x3d, 0x1a, 0x98, 0x8e, 0x63, 0x60, 0x5d, 0x30, 0xf5,
	0x94, 0x5e, 0x08, 0x85, 0x68, 0x18, 0xb2, 0x6c, 0x89, 0x75, 0x6c, 0x19, 0xd7, 0x8e, 0xd7, 0xba,
	0x63, 0xb8, 0x82, 0x33, 0xc8, 0x52, 0xca, 0x0f, 0x50, 0x4c, 0x5e, 0xc1, 0x3c, 0x1a, 0x18, 0x7e,
	0xe0, 0xf5, 0x6c, 0x4b, 0xb4, 0x1c, 0x61, 0xd3, 0x08, 0x4b, 0x50, 0x77, 0x1e, 0xaa, 0x24, 0xf8,
	0x29, 0x14, 0xb8, 0xe7, 0xdb, 0x2d, 0x69, 0xc8, 0xd4, 0x0c, 0x6e, 0xd1, 0x9d, 0x7b, 0x1b, 0x58,
	0xb9, 0x14, 0xd6, 0x38, 0x65, 0x47, 0x2e, 0x0f, 0xfa, 0x7a, 0x9e, 0x0f, 0x24, 0xa2, 0x02, 0x6d,
	0x8f, 0x31, 0xdb, 0x0f, 0x03, 0x67, 0x31, 0x70, 0x5e, 0xca, 0x64, 0xc4, 0xaf, 0xe0, 0xf9, 0x35,
	0xbd, 0x35, 0x7b, 0xb6, 0xd7, 0x0d, 0x0c, 0x9f, 0xba, 0xa6, 0xc3, 0x65, 0xa5, 0x52, 0x7a, 0x29,
	0x56, 0x9c, 0x4b, 0xb9, 0xc8, 0xbd, 0x67, 0x3a, 0xb6, 0x85, 0x87, 0xb9, 0x41, 0x83, 0xc0, 0x0b,
	0x70, 0xf9, 0xe6, 0xf4, 0xb9, 0x81, 0xfc, 0x48, 0x88, 0xcb, 0xd7, 0x50, 0x1a, 0xe7, 0x26, 0xf6,
	0xd4, 0x1d, 0xed, 0x87, 0x27, 0x9b, 0x18, 0x92, 0x3d, 0xc8, 0xf6, 0x4c, 0xa7, 0x4b, 0xb1, 0x82,
	0xf9, 0x9a, 0x36, 0x9e, 0xe8, 0x00, 0xe2, 0xc2, 0x35, 0x7d, 0x76, 0xeb, 0x71, 0x5d, 0x3a, 0xfc,
	0x24, 0xb5, 0xa7, 0x68, 0xff, 0x52, 0x80, 0x4c, 0x5a, 0x90, 0x0d, 0x28, 0x70, 0xbb, 0x23, 0xb6,
	0x80, 0xd1, 0xa1, 0xec, 0x36, 0x3c, 0x17, 0x41, 0xc8, 0x1a, 0xee, 0x29, 0x65, 0xb7, 0x64, 0x0f,
	0xd4, 0x1b, 0x3b, 0x60, 0xdc, 0x08, 0x4f, 0x57, 0xc3, 0xa2, 0x8e, 0xdd, 0xa3, 0x81, 0x4d, 0x65,
	0x2f, 0x53, 0xfa, 0x02, 0xea, 0x4f, 0xa5, 0xba, 0x1e, 0x6b, 0xc9, 0x2e, 0x2c, 0x0a, 0xcc, 0x24,
	0x47, 0xd9, 0xd5, 0xcf, 0x85, 0x7a, 0xd2, 0xef, 0xa7, 0x50, 0xb6, 0x5d, 0xac, 0x51, 0x92, 0x6b,
	0x06, 0x5d, 0xd5, 0xd0, 0x62, 0xc2, 0x5b, 0x7b, 0x03, 0xda, 0x31, 0xe5, 0x35, 0xbf, 0x75, 0x1e,
	0x78, 0xbe, 0xc7, 0x4c, 0x07, 0x0f, 0xaf, 0x83, 0xfe, 0xa5, 0xc9, 0xee, 0x1a, 0xd6, 0xd0, 0x75,
	0xc7, 0x4d, 0x76, 0x37, 0x74, 0xdd, 0x71, 0xd4, 0x6b, 0x0d, 0xd8, 0x4a, 0x74, 0x8f, 0xa6, 0x03,
	0x88, 0x75, 0xc8, 0xfb, 0xa1, 0x70, 0x00, 0x03, 0x7e, 0x6c, 0xa7, 0xbd, 0x85, 0x95, 0x51, 0xa8,
	0xf3, 0x80, 0xfa, 0x66, 0x40, 0x3f, 0x1e, 0xe0, 0xd0, 0x73, 0x6f, 0xec, 0xa0, 0xf3, 0x60, 0x80,
	0xdf, 0x29, 0x50, 0x1c, 0xc9, 0x83, 0xac, 0x02, 0xf8, 0x34, 0xb0, 0x3d, 0xcb, 0x70, 0xbb, 0x1d,
	0xec, 0x5f, 0x51, 0xcf, 0x49, 0x49, 0xb3, 0xdb, 0x19, 0x2e, 0x4b, 0x7a, 0xb8, 0x2c, 0x62, 0x77,
	0x88, 0x57, 0x44, 0xb7, 0x43, 0x0d, 0xb1, 0x36, 0xb0, 0x0b, 0x19, 0x3d, 0x1f, 0xca, 0x2e, 0xed,
	0x0e, 0x25, 0x3f, 0x86, 0x45, 0xf4, 0x65, 0xd4, 0xb5, 0xf0, 0x96, 0xa0, 0x2e, 0xb7, 0x79, 0x5f,
	0x60, 0xc9, 0x13, 0x67, 0x5e, 0xa8, 0x2f, 0x50, 0xdb, 0x08, 0x95, 0x0d, 0x4b, 0xfb, 0xa7, 0x02,
	0xcb, 0x09, 0x15, 0x8f, 0xef, 0xcb, 0x69, 0x49, 0x92, 0x13, 0xc8, 0xca, 0x7b, 0x2d, 0x85, 0x07,
	0xc0, 0xee, 0xf8, 0xbe, 0xf8, 0x00, 0x38, 0x5e, 0x1c, 0x54, 0x1e, 0x06, 0x12, 0xa4, 0xfc, 0x0e,
	0x60, 0x20, 0x4c, 0xd8, 0x85, 0xdf, 0x8c, 0xee, 0xc2, 0xc9, 0x9b, 0x78, 0x24, 0xce, 0xd0, 0x06,
	0xfc, 0x77, 0x1a, 0x56, 0xef, 0x59, 0x0e, 0x61, 0xa6, 0x4d, 0xc8, 0xf6, 0x3c, 0x1e, 0x3f, 0x36,
	0xf6, 0x3e, 0x9c, 0xc8, 0x98, 0x77, 0xe5, 0x3b, 0xe1, 0x1a, 0xa6, 0x82, 0x30, 0xe4, 0x1d, 0xcc,
	0xf6, 0x29, 0x43, 0x79, 0x58, 0x9b, 0xd7, 0x8f, 0x83, 0xfc, 0x65, 0xe8, 0x2d, 0x51, 0x63, 0x30,
	0xf2, 0x2b, 0x00, 0x11, 0x41, 0xde, 0xb4, 0x6a, 0x1a, 0xa1, 0xdf, 0x3c, 0x9e, 0xad, 0xf4, 0x97,
	0xe0, 0x43, 0x80, 0xe5, 0x13, 0x80, 0x41, 0xd8, 0x84, 0x16, 0x6c, 0x8f, 0xb6, 0x80, 0x54, 0xf0,
	0x95, 0x5b, 0x09, 0x43, 0x08, 0xd7, 0xa1, 0xba, 0x97, 0x5f, 0x43, 0x71, 0x24, 0x8f, 0x04, 0xc0,
	0xf9, 0x61, 0xc0, 0xe2, 0xb0, 0xf3, 0x1b, 0x98, 0x1b, 0x63, 0xfa, 0x18, 0xf7, 0x84, 0x9e, 0xc7,
	0x3b, 0xf8, 0xa3, 0x7a, 0x3e, 0xe6, 0xfd, 0x29, 0x7a, 0x3e, 0x0e, 0xf9, 0x09, 0x7b, 0x9e, 0xc4,
	0xf6, 0x13, 0xf7, 0x3c, 0x0c, 0xf1, 0x7f, 0xd4, 0xf3, 0x9d, 0x6f, 0xa1, 0x38, 0xf2, 0x1a, 0x27,
	0x79, 0x98, 0xb9, 0x6a, 0xfe, 0xa2, 0x79, 0xf6, 0xae, 0x59, 0x7a, 0x22, 0x26, 0x8d, 0xe6, 0xc1,
	0xd9, 0x55, 0xb3, 0x5e, 0x52, 0x48, 0x01, 0x66, 0xcf, 0xae, 0x2e, 0xe5, 0x2c, 0xb5, 0x73, 0x05,
	0x73, 0x63, 0x4f, 0x70, 0x52, 0x82, 0x42, 0xbd, 0x71, 0x71, 0x78, 0xd6, 0x6c, 0x1e, 0x1d, 0x5e,
	0x1e, 0xd5, 0x4b, 0x4f, 0xc8, 0x73, 0x28, 0x0e, 0x24, 0x8d, 0xa6, 0xf8, 0x2a, 0x15, 0x21, 0x37,
	0xb0, 0x48, 0x91, 0x67, 0x00, 0x43, 0xea, 0x74, 0xed, 0xbf, 0xe2, 0x57, 0x25, 0x9e, 0xda, 0xe4,
	0x7b, 0x98, 0xbb, 0xa0, 0x7c, 0xf8, 0x63, 0x46, 0x5e, 0x3c, 0xe0, 0xdb, 0x56, 0x5e, 0xa8, 0xc8,
	0x2f, 0x68, 0x25, 0xfa, 0x82, 0x56, 0x8e, 0xc4, 0x17, 0x54, 0xdb, 0xfc, 0xcd, 0xdf, 0xfe, 0xf1,
	0xdb, 0xd4, 0xb2, 0xb6, 0x54, 0x0d, 0x41, 0xe2, 0x8f, 0x6e, 0xd5, 0x91, 0x30, 0xe4, 0x16, 0x72,
	0x27, 0x36, 0xe3, 0xa2, 0x20, 0x8c, 0xdc, 0x83, 0x53, 0xd6, 0xa6, 0xfe, 0x0c, 0x98, 0xb6, 0x8e,
	0xb1, 0x96, 0xc8, 0xe2, 0x64, 0x2c, 0x1f, 0xc1, 0x6d, 0x98, 0x39, 0xa6, 0x18, 0x88, 0x2c, 0x27,
	0xfd, 0x8e, 0xa2, 0x64, 0xa6, 0x7f, 0xe1, 0xb4, 0x35, 0x8c, 0xa5, 0x92, 0x85, 0xe4, 0x58, 0xc4,
	0x83, 0x99, 0x7d, 0xcb, 0x9a, 0x1e, 0xea, 0x8b, 0x7b, 0x43, 0x0d, 0x7d, 0x63, 0xa3, 0x2a, 0x92,
	0x84, 0x2a, 0x9a, 0x61, 0x14, 0x06, 0x85, 0x30, 0x37, 0xf9, 0xf8, 0xbf, 0xaf, 0x90, 0x5b, 0xf7,
	0x06, 0x1c, 0xf9, 0x05, 0x6b, 0x2f, 0x30, 0xe4, 0x2a, 0x59, 0x4e, 0x4e, 0x50, 0x06, 0xf9, 0x43,
	0xf2, 0xbd, 0x1c, 0x3d, 0xa4, 0x48, 0xed, 0x01, 0xf7, 0xec, 0xd8, 0xab, 0xab, 0xfc, 0xd5, 0x23,
	0xee, 0x66, 0xad, 0x86, 0x2c, 0x5f, 0x92, 0x9d, 0x49, 0x96, 0xf7, 0x92, 0xfa, 0x93, 0x02, 0xeb,
	0x53, 0x9e, 0x6f, 0x64, 0xf7, 0x41, 0xc4, 0x27, 0xde, 0x7b, 0x8f, 0x23, 0xbf, 0x8b, 0xe4, 0x5f,
	0x91, 0xca, 0x43, 0xc8, 0x0f, 0x91, 0xfb, 0xbd, 0x02, 0x9f, 0x27, 0xde, 0x9c, 0xe4, 0xe5, 0x03,
	0x2f, 0x58, 0x49, 0xf6, 0x87, 0x8f, 0xba, 0x8e, 0xb5, 0x97, 0x48, 0x77, 0x8b, 0x7c, 0xf1, 0x41,
	0xba, 0x11, 0x95, 0x49, 0x92, 0xe1, 0x39, 0x3c, 0x8d, 0xe4, 0xe8, 0xfb, 0x75, 0x1a, 0xc9, 0xb1,
	0xfb, 0xe3, 0x81, 0x24, 0x43, 0xaf, 0x83, 0xc2, 0x9f, 0xdf, 0xaf, 0x29, 0x7f, 0x7d, 0xbf, 0xa6,
	0xfc, 0xfd, 0xfd, 0x9a, 0x72, 0xfd, 0x14, 0xb7, 0xca, 0x37, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0xe8, 0xf8, 0x69, 0x49, 0x9a, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DebugClient is the client API for Debug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugClient interface {
	// SetLoggingLevel sets the log-level of the beacon node programmatically.
	SetLoggingLevel(ctx context.Context, in *LoggingLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns all the related data for every peer tracked by the host node.
	ListPeers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DebugPeerResponses, error)
	// Returns requested peer with specified peer id if it exists.
	GetPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*DebugPeerResponse, error)
	// Add a new peer with the specified
	AddPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*DebugPeerAddResponse, error)
	// Returns all the related data for every peer tracked by the host node(count).
	GetPeerCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DebugPeerCountResponse, error)
	// Return 2pc consnesus proposal state <当前是第几轮， proposalId   taskId 耗时等信息>
	Get2PcProposalStateByTaskId(ctx context.Context, in *Get2PcProposalStateByTaskIdRequest, opts ...grpc.CallOption) (*Get2PcProposalStateResponse, error)
	// <当前是第几轮， proposalId   taskId 耗时等信息>
	Get2PcProposalStateByProposalId(ctx context.Context, in *Get2PcProposalStateByProposalIdRequest, opts ...grpc.CallOption) (*Get2PcProposalStateResponse, error)
	// 根据proposalId查询当前 prepare轮的状态信息 (耗时, 得票信息，成功与否等信息)
	Get2PcProposalPrepare(ctx context.Context, in *Get2PcProposalPrepareRequest, opts ...grpc.CallOption) (*Get2PcProposalPrepareResponse, error)
	// 根据proposalId查询当前 confirm轮的状态信息 (耗时, 得票信息，成功与否等信息)
	Get2PcProposalConfirm(ctx context.Context, in *Get2PcProposalConfirmRequest, opts ...grpc.CallOption) (*Get2PcProposalConfirmResponse, error)
}

type debugClient struct {
	cc *grpc.ClientConn
}

func NewDebugClient(cc *grpc.ClientConn) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) SetLoggingLevel(ctx context.Context, in *LoggingLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/carrier.rpc.v1.Debug/SetLoggingLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) ListPeers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DebugPeerResponses, error) {
	out := new(DebugPeerResponses)
	err := c.cc.Invoke(ctx, "/carrier.rpc.v1.Debug/ListPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) GetPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*DebugPeerResponse, error) {
	out := new(DebugPeerResponse)
	err := c.cc.Invoke(ctx, "/carrier.rpc.v1.Debug/GetPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) AddPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*DebugPeerAddResponse, error) {
	out := new(DebugPeerAddResponse)
	err := c.cc.Invoke(ctx, "/carrier.rpc.v1.Debug/AddPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) GetPeerCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DebugPeerCountResponse, error) {
	out := new(DebugPeerCountResponse)
	err := c.cc.Invoke(ctx, "/carrier.rpc.v1.Debug/GetPeerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Get2PcProposalStateByTaskId(ctx context.Context, in *Get2PcProposalStateByTaskIdRequest, opts ...grpc.CallOption) (*Get2PcProposalStateResponse, error) {
	out := new(Get2PcProposalStateResponse)
	err := c.cc.Invoke(ctx, "/carrier.rpc.v1.Debug/Get2pcProposalStateByTaskId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Get2PcProposalStateByProposalId(ctx context.Context, in *Get2PcProposalStateByProposalIdRequest, opts ...grpc.CallOption) (*Get2PcProposalStateResponse, error) {
	out := new(Get2PcProposalStateResponse)
	err := c.cc.Invoke(ctx, "/carrier.rpc.v1.Debug/Get2pcProposalStateByProposalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Get2PcProposalPrepare(ctx context.Context, in *Get2PcProposalPrepareRequest, opts ...grpc.CallOption) (*Get2PcProposalPrepareResponse, error) {
	out := new(Get2PcProposalPrepareResponse)
	err := c.cc.Invoke(ctx, "/carrier.rpc.v1.Debug/Get2pcProposalPrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Get2PcProposalConfirm(ctx context.Context, in *Get2PcProposalConfirmRequest, opts ...grpc.CallOption) (*Get2PcProposalConfirmResponse, error) {
	out := new(Get2PcProposalConfirmResponse)
	err := c.cc.Invoke(ctx, "/carrier.rpc.v1.Debug/Get2pcProposalConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServer is the server API for Debug service.
type DebugServer interface {
	// SetLoggingLevel sets the log-level of the beacon node programmatically.
	SetLoggingLevel(context.Context, *LoggingLevelRequest) (*emptypb.Empty, error)
	// Returns all the related data for every peer tracked by the host node.
	ListPeers(context.Context, *emptypb.Empty) (*DebugPeerResponses, error)
	// Returns requested peer with specified peer id if it exists.
	GetPeer(context.Context, *PeerRequest) (*DebugPeerResponse, error)
	// Add a new peer with the specified
	AddPeer(context.Context, *PeerRequest) (*DebugPeerAddResponse, error)
	// Returns all the related data for every peer tracked by the host node(count).
	GetPeerCount(context.Context, *emptypb.Empty) (*DebugPeerCountResponse, error)
	// Return 2pc consnesus proposal state <当前是第几轮， proposalId   taskId 耗时等信息>
	Get2PcProposalStateByTaskId(context.Context, *Get2PcProposalStateByTaskIdRequest) (*Get2PcProposalStateResponse, error)
	// <当前是第几轮， proposalId   taskId 耗时等信息>
	Get2PcProposalStateByProposalId(context.Context, *Get2PcProposalStateByProposalIdRequest) (*Get2PcProposalStateResponse, error)
	// 根据proposalId查询当前 prepare轮的状态信息 (耗时, 得票信息，成功与否等信息)
	Get2PcProposalPrepare(context.Context, *Get2PcProposalPrepareRequest) (*Get2PcProposalPrepareResponse, error)
	// 根据proposalId查询当前 confirm轮的状态信息 (耗时, 得票信息，成功与否等信息)
	Get2PcProposalConfirm(context.Context, *Get2PcProposalConfirmRequest) (*Get2PcProposalConfirmResponse, error)
}

// UnimplementedDebugServer can be embedded to have forward compatible implementations.
type UnimplementedDebugServer struct {
}

func (*UnimplementedDebugServer) SetLoggingLevel(ctx context.Context, req *LoggingLevelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLoggingLevel not implemented")
}
func (*UnimplementedDebugServer) ListPeers(ctx context.Context, req *emptypb.Empty) (*DebugPeerResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (*UnimplementedDebugServer) GetPeer(ctx context.Context, req *PeerRequest) (*DebugPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeer not implemented")
}
func (*UnimplementedDebugServer) AddPeer(ctx context.Context, req *PeerRequest) (*DebugPeerAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeer not implemented")
}
func (*UnimplementedDebugServer) GetPeerCount(ctx context.Context, req *emptypb.Empty) (*DebugPeerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerCount not implemented")
}
func (*UnimplementedDebugServer) Get2PcProposalStateByTaskId(ctx context.Context, req *Get2PcProposalStateByTaskIdRequest) (*Get2PcProposalStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get2PcProposalStateByTaskId not implemented")
}
func (*UnimplementedDebugServer) Get2PcProposalStateByProposalId(ctx context.Context, req *Get2PcProposalStateByProposalIdRequest) (*Get2PcProposalStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get2PcProposalStateByProposalId not implemented")
}
func (*UnimplementedDebugServer) Get2PcProposalPrepare(ctx context.Context, req *Get2PcProposalPrepareRequest) (*Get2PcProposalPrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get2PcProposalPrepare not implemented")
}
func (*UnimplementedDebugServer) Get2PcProposalConfirm(ctx context.Context, req *Get2PcProposalConfirmRequest) (*Get2PcProposalConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get2PcProposalConfirm not implemented")
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_SetLoggingLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SetLoggingLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.rpc.v1.Debug/SetLoggingLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SetLoggingLevel(ctx, req.(*LoggingLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.rpc.v1.Debug/ListPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).ListPeers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_GetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.rpc.v1.Debug/GetPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GetPeer(ctx, req.(*PeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.rpc.v1.Debug/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).AddPeer(ctx, req.(*PeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_GetPeerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GetPeerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.rpc.v1.Debug/GetPeerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GetPeerCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Get2PcProposalStateByTaskId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get2PcProposalStateByTaskIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Get2PcProposalStateByTaskId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.rpc.v1.Debug/Get2PcProposalStateByTaskId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Get2PcProposalStateByTaskId(ctx, req.(*Get2PcProposalStateByTaskIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Get2PcProposalStateByProposalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get2PcProposalStateByProposalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Get2PcProposalStateByProposalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.rpc.v1.Debug/Get2PcProposalStateByProposalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Get2PcProposalStateByProposalId(ctx, req.(*Get2PcProposalStateByProposalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Get2PcProposalPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get2PcProposalPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Get2PcProposalPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.rpc.v1.Debug/Get2PcProposalPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Get2PcProposalPrepare(ctx, req.(*Get2PcProposalPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Get2PcProposalConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get2PcProposalConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Get2PcProposalConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.rpc.v1.Debug/Get2PcProposalConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Get2PcProposalConfirm(ctx, req.(*Get2PcProposalConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carrier.rpc.v1.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLoggingLevel",
			Handler:    _Debug_SetLoggingLevel_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _Debug_ListPeers_Handler,
		},
		{
			MethodName: "GetPeer",
			Handler:    _Debug_GetPeer_Handler,
		},
		{
			MethodName: "AddPeer",
			Handler:    _Debug_AddPeer_Handler,
		},
		{
			MethodName: "GetPeerCount",
			Handler:    _Debug_GetPeerCount_Handler,
		},
		{
			MethodName: "Get2pcProposalStateByTaskId",
			Handler:    _Debug_Get2PcProposalStateByTaskId_Handler,
		},
		{
			MethodName: "Get2pcProposalStateByProposalId",
			Handler:    _Debug_Get2PcProposalStateByProposalId_Handler,
		},
		{
			MethodName: "Get2pcProposalPrepare",
			Handler:    _Debug_Get2PcProposalPrepare_Handler,
		},
		{
			MethodName: "Get2pcProposalConfirm",
			Handler:    _Debug_Get2PcProposalConfirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/rpc/debug/v1/debug.proto",
}

func (m *PeerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoggingLevelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoggingLevelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoggingLevelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DebugPeerAddResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugPeerAddResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugPeerAddResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DebugPeerCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugPeerCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugPeerCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DebugPeerResponses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugPeerResponses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugPeerResponses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DebugPeerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugPeerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugPeerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ScoreInfo != nil {
		{
			size, err := m.ScoreInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.LastUpdated != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.LastUpdated))
		i--
		dAtA[i] = 0x40
	}
	if m.PeerStatus != nil {
		{
			size, err := m.PeerStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PeerInfo != nil {
		{
			size, err := m.PeerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Enr) > 0 {
		i -= len(m.Enr)
		copy(dAtA[i:], m.Enr)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Enr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x22
	}
	if m.ConnectionState != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.ConnectionState))
		i--
		dAtA[i] = 0x18
	}
	if m.Direction != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ListeningAddresses) > 0 {
		for iNdEx := len(m.ListeningAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ListeningAddresses[iNdEx])
			copy(dAtA[i:], m.ListeningAddresses[iNdEx])
			i = encodeVarintDebug(dAtA, i, uint64(len(m.ListeningAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DebugPeerResponse_PeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugPeerResponse_PeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugPeerResponse_PeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PeerLatency != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.PeerLatency))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AgentVersion) > 0 {
		i -= len(m.AgentVersion)
		copy(dAtA[i:], m.AgentVersion)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.AgentVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProtocolVersion) > 0 {
		i -= len(m.ProtocolVersion)
		copy(dAtA[i:], m.ProtocolVersion)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.ProtocolVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.FaultCount != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.FaultCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Protocols) > 0 {
		for iNdEx := len(m.Protocols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Protocols[iNdEx])
			copy(dAtA[i:], m.Protocols[iNdEx])
			i = encodeVarintDebug(dAtA, i, uint64(len(m.Protocols[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScoreInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ValidationError) > 0 {
		i -= len(m.ValidationError)
		copy(dAtA[i:], m.ValidationError)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.ValidationError)))
		i--
		dAtA[i] = 0x3a
	}
	if m.BehaviourPenalty != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BehaviourPenalty))))
		i--
		dAtA[i] = 0x35
	}
	if m.GossipScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GossipScore))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.TopicScores) > 0 {
		for k := range m.TopicScores {
			v := m.TopicScores[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDebug(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDebug(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDebug(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BlockProviderScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BlockProviderScore))))
		i--
		dAtA[i] = 0x1d
	}
	if m.ProcessedBlocks != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.ProcessedBlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.OverallScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OverallScore))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *TopicScoreSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicScoreSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicScoreSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InvalidMessageDeliveries != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.InvalidMessageDeliveries))))
		i--
		dAtA[i] = 0x25
	}
	if m.MeshMessageDeliveries != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MeshMessageDeliveries))))
		i--
		dAtA[i] = 0x1d
	}
	if m.FirstMessageDeliveries != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FirstMessageDeliveries))))
		i--
		dAtA[i] = 0x15
	}
	if m.TimeInMesh != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.TimeInMesh))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Get2PcProposalStateByTaskIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Get2PcProposalStateByTaskIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Get2PcProposalStateByTaskIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Get2PcProposalStateByProposalIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Get2PcProposalStateByProposalIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Get2PcProposalStateByProposalIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Get2PcProposalPrepareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Get2PcProposalPrepareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Get2PcProposalPrepareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Get2PcProposalConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Get2PcProposalConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Get2PcProposalConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskSenderIdentityId) > 0 {
		i -= len(m.TaskSenderIdentityId)
		copy(dAtA[i:], m.TaskSenderIdentityId)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.TaskSenderIdentityId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ConsumeTime != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.ConsumeTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PeriodNum != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.PeriodNum))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Get2PcProposalStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Get2PcProposalStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Get2PcProposalStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.State) > 0 {
		for k := range m.State {
			v := m.State[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDebug(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDebug(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDebug(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintDebug(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Get2PcProposalPrepareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Get2PcProposalPrepareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Get2PcProposalPrepareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VoteStatus) > 0 {
		for k := range m.VoteStatus {
			v := m.VoteStatus[k]
			baseI := i
			i = encodeVarintDebug(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDebug(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDebug(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.YesVotes) > 0 {
		for k := range m.YesVotes {
			v := m.YesVotes[k]
			baseI := i
			i = encodeVarintDebug(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDebug(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDebug(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Votes) > 0 {
		for k := range m.Votes {
			v := m.Votes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDebug(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDebug(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDebug(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Get2PcProposalConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Get2PcProposalConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Get2PcProposalConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VoteStatus) > 0 {
		for k := range m.VoteStatus {
			v := m.VoteStatus[k]
			baseI := i
			i = encodeVarintDebug(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDebug(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDebug(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.YesVotes) > 0 {
		for k := range m.YesVotes {
			v := m.YesVotes[k]
			baseI := i
			i = encodeVarintDebug(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDebug(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDebug(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Votes) > 0 {
		for k := range m.Votes {
			v := m.Votes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDebug(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDebug(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDebug(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDebug(dAtA []byte, offset int, v uint64) int {
	offset -= sovDebug(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PeerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoggingLevelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovDebug(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugPeerAddResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugPeerCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovDebug(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugPeerResponses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugPeerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ListeningAddresses) > 0 {
		for _, s := range m.ListeningAddresses {
			l = len(s)
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	if m.Direction != 0 {
		n += 1 + sovDebug(uint64(m.Direction))
	}
	if m.ConnectionState != 0 {
		n += 1 + sovDebug(uint64(m.ConnectionState))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Enr)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.PeerInfo != nil {
		l = m.PeerInfo.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.PeerStatus != nil {
		l = m.PeerStatus.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.LastUpdated != 0 {
		n += 1 + sovDebug(uint64(m.LastUpdated))
	}
	if m.ScoreInfo != nil {
		l = m.ScoreInfo.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DebugPeerResponse_PeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if len(m.Protocols) > 0 {
		for _, s := range m.Protocols {
			l = len(s)
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	if m.FaultCount != 0 {
		n += 1 + sovDebug(uint64(m.FaultCount))
	}
	l = len(m.ProtocolVersion)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.AgentVersion)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.PeerLatency != 0 {
		n += 1 + sovDebug(uint64(m.PeerLatency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OverallScore != 0 {
		n += 5
	}
	if m.ProcessedBlocks != 0 {
		n += 1 + sovDebug(uint64(m.ProcessedBlocks))
	}
	if m.BlockProviderScore != 0 {
		n += 5
	}
	if len(m.TopicScores) > 0 {
		for k, v := range m.TopicScores {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDebug(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDebug(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDebug(uint64(mapEntrySize))
		}
	}
	if m.GossipScore != 0 {
		n += 5
	}
	if m.BehaviourPenalty != 0 {
		n += 5
	}
	l = len(m.ValidationError)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicScoreSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeInMesh != 0 {
		n += 1 + sovDebug(uint64(m.TimeInMesh))
	}
	if m.FirstMessageDeliveries != 0 {
		n += 5
	}
	if m.MeshMessageDeliveries != 0 {
		n += 5
	}
	if m.InvalidMessageDeliveries != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Get2PcProposalStateByTaskIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Get2PcProposalStateByProposalIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Get2PcProposalPrepareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Get2PcProposalConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeriodNum != 0 {
		n += 1 + sovDebug(uint64(m.PeriodNum))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.ConsumeTime != 0 {
		n += 1 + sovDebug(uint64(m.ConsumeTime))
	}
	l = len(m.TaskSenderIdentityId)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Get2PcProposalStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if len(m.State) > 0 {
		for k, v := range m.State {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDebug(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDebug(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDebug(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Get2PcProposalPrepareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for k, v := range m.Votes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDebug(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDebug(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDebug(uint64(mapEntrySize))
		}
	}
	if len(m.YesVotes) > 0 {
		for k, v := range m.YesVotes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDebug(uint64(len(k))) + 1 + sovDebug(uint64(v))
			n += mapEntrySize + 1 + sovDebug(uint64(mapEntrySize))
		}
	}
	if len(m.VoteStatus) > 0 {
		for k, v := range m.VoteStatus {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDebug(uint64(len(k))) + 1 + sovDebug(uint64(v))
			n += mapEntrySize + 1 + sovDebug(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Get2PcProposalConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for k, v := range m.Votes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDebug(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDebug(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDebug(uint64(mapEntrySize))
		}
	}
	if len(m.YesVotes) > 0 {
		for k, v := range m.YesVotes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDebug(uint64(len(k))) + 1 + sovDebug(uint64(v))
			n += mapEntrySize + 1 + sovDebug(uint64(mapEntrySize))
		}
	}
	if len(m.VoteStatus) > 0 {
		for k, v := range m.VoteStatus {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDebug(uint64(len(k))) + 1 + sovDebug(uint64(v))
			n += mapEntrySize + 1 + sovDebug(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDebug(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDebug(x uint64) (n int) {
	return sovDebug(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PeerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoggingLevelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoggingLevelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoggingLevelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LoggingLevelRequest_Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugPeerAddResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugPeerAddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugPeerAddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugPeerCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugPeerCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugPeerCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugPeerResponses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugPeerResponses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugPeerResponses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &DebugPeerResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugPeerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugPeerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugPeerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListeningAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListeningAddresses = append(m.ListeningAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= PeerDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionState", wireType)
			}
			m.ConnectionState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionState |= ConnectionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerInfo == nil {
				m.PeerInfo = &DebugPeerResponse_PeerInfo{}
			}
			if err := m.PeerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerStatus == nil {
				m.PeerStatus = &v1.Status{}
			}
			if err := m.PeerStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScoreInfo == nil {
				m.ScoreInfo = &ScoreInfo{}
			}
			if err := m.ScoreInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugPeerResponse_PeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &v1.MetaData{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocols = append(m.Protocols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultCount", wireType)
			}
			m.FaultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaultCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerLatency", wireType)
			}
			m.PeerLatency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerLatency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScoreInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScoreInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverallScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OverallScore = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedBlocks", wireType)
			}
			m.ProcessedBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessedBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockProviderScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BlockProviderScore = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicScores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicScores == nil {
				m.TopicScores = make(map[string]*TopicScoreSnapshot)
			}
			var mapkey string
			var mapvalue *TopicScoreSnapshot
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDebug
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDebug
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TopicScoreSnapshot{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDebug(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDebug
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TopicScores[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GossipScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GossipScore = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BehaviourPenalty", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BehaviourPenalty = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicScoreSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicScoreSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicScoreSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInMesh", wireType)
			}
			m.TimeInMesh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInMesh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstMessageDeliveries", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FirstMessageDeliveries = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeshMessageDeliveries", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MeshMessageDeliveries = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidMessageDeliveries", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.InvalidMessageDeliveries = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Get2PcProposalStateByTaskIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get2pcProposalStateByTaskIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get2pcProposalStateByTaskIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Get2PcProposalStateByProposalIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get2pcProposalStateByProposalIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get2pcProposalStateByProposalIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Get2PcProposalPrepareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get2pcProposalPrepareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get2pcProposalPrepareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Get2PcProposalConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get2pcProposalConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get2pcProposalConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodNum", wireType)
			}
			m.PeriodNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeTime", wireType)
			}
			m.ConsumeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsumeTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskSenderIdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskSenderIdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Get2PcProposalStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get2pcProposalStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get2pcProposalStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = make(map[string]*ProposalState)
			}
			var mapkey string
			var mapvalue *ProposalState
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDebug
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDebug
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ProposalState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDebug(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDebug
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.State[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Get2PcProposalPrepareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get2pcProposalPrepareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get2pcProposalPrepareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Votes == nil {
				m.Votes = make(map[string]*types.PrepareVote)
			}
			var mapkey string
			var mapvalue *types.PrepareVote
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDebug
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDebug
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.PrepareVote{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDebug(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDebug
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Votes[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YesVotes == nil {
				m.YesVotes = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDebug(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDebug
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.YesVotes[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoteStatus == nil {
				m.VoteStatus = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDebug(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDebug
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VoteStatus[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Get2PcProposalConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get2pcProposalConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get2pcProposalConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Votes == nil {
				m.Votes = make(map[string]*types.ConfirmVote)
			}
			var mapkey string
			var mapvalue *types.ConfirmVote
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDebug
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDebug
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.ConfirmVote{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDebug(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDebug
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Votes[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YesVotes == nil {
				m.YesVotes = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDebug(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDebug
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.YesVotes[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoteStatus == nil {
				m.VoteStatus = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDebug
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDebug(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDebug
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VoteStatus[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebug(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDebug
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDebug
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDebug
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDebug        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebug          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDebug = fmt.Errorf("proto: unexpected end of group")
)
