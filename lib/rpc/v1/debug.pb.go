// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/rpc/v1/debug.proto

package carrier_rpc_v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TopicScoreSnapshot struct {
	// Time a peer has spent in the gossip mesh.
	TimeInMesh uint64 `protobuf:"varint,1,opt,name=time_in_mesh,json=timeInMesh,proto3" json:"time_in_mesh,omitempty"`
	// This is the number of first message deliveries in the topic.
	FirstMessageDeliveries float32 `protobuf:"fixed32,2,opt,name=first_message_deliveries,json=firstMessageDeliveries,proto3" json:"first_message_deliveries,omitempty"`
	// This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of
	// message validation.It effectively tracks first and near-first
	// deliveries, ie a message seen from a mesh peer before we have forwarded it to them.
	MeshMessageDeliveries float32 `protobuf:"fixed32,3,opt,name=mesh_message_deliveries,json=meshMessageDeliveries,proto3" json:"mesh_message_deliveries,omitempty"`
	// This is the number of invalid messages in the topic from the peer.
	InvalidMessageDeliveries float32  `protobuf:"fixed32,4,opt,name=invalid_message_deliveries,json=invalidMessageDeliveries,proto3" json:"invalid_message_deliveries,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *TopicScoreSnapshot) Reset()         { *m = TopicScoreSnapshot{} }
func (m *TopicScoreSnapshot) String() string { return proto.CompactTextString(m) }
func (*TopicScoreSnapshot) ProtoMessage()    {}
func (*TopicScoreSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_1762ecd67aaca6b0, []int{0}
}
func (m *TopicScoreSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicScoreSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicScoreSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicScoreSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicScoreSnapshot.Merge(m, src)
}
func (m *TopicScoreSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *TopicScoreSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicScoreSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_TopicScoreSnapshot proto.InternalMessageInfo

func (m *TopicScoreSnapshot) GetTimeInMesh() uint64 {
	if m != nil {
		return m.TimeInMesh
	}
	return 0
}

func (m *TopicScoreSnapshot) GetFirstMessageDeliveries() float32 {
	if m != nil {
		return m.FirstMessageDeliveries
	}
	return 0
}

func (m *TopicScoreSnapshot) GetMeshMessageDeliveries() float32 {
	if m != nil {
		return m.MeshMessageDeliveries
	}
	return 0
}

func (m *TopicScoreSnapshot) GetInvalidMessageDeliveries() float32 {
	if m != nil {
		return m.InvalidMessageDeliveries
	}
	return 0
}

func init() {
	proto.RegisterType((*TopicScoreSnapshot)(nil), "carrier.rpc.v1.TopicScoreSnapshot")
}

func init() { proto.RegisterFile("lib/rpc/v1/debug.proto", fileDescriptor_1762ecd67aaca6b0) }

var fileDescriptor_1762ecd67aaca6b0 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0x80, 0xb9, 0x5a, 0x1c, 0x8e, 0xe2, 0x10, 0xb0, 0x86, 0x08, 0x21, 0xe8, 0xd2, 0x29, 0xa1,
	0x08, 0xe2, 0xe0, 0x24, 0x2e, 0x0e, 0x5d, 0x5a, 0xf7, 0x90, 0x5c, 0x5e, 0x2f, 0x0f, 0x92, 0xbc,
	0xe3, 0xdd, 0x35, 0xe0, 0x3f, 0x74, 0xf4, 0x27, 0x48, 0x06, 0x7f, 0x87, 0xe4, 0x22, 0x76, 0x68,
	0xb7, 0xbb, 0xf7, 0x7d, 0xdf, 0x83, 0x27, 0x97, 0x0d, 0x96, 0x19, 0x1b, 0x95, 0xf5, 0xeb, 0xac,
	0x82, 0xf2, 0xa0, 0x53, 0xc3, 0xe4, 0x28, 0xb8, 0x52, 0x05, 0x33, 0x02, 0xa7, 0x6c, 0x54, 0xda,
	0xaf, 0xa3, 0x5b, 0x4d, 0xa4, 0x1b, 0xc8, 0x3c, 0x2d, 0x0f, 0xfb, 0x0c, 0x5a, 0xe3, 0x3e, 0x26,
	0x39, 0xba, 0x67, 0x30, 0x64, 0x8f, 0x4c, 0x93, 0x26, 0xff, 0xf1, 0xaf, 0x49, 0xba, 0xfb, 0x11,
	0x32, 0x78, 0x27, 0x83, 0x6a, 0xa7, 0x88, 0x61, 0xd7, 0x15, 0xc6, 0xd6, 0xe4, 0x82, 0x44, 0x2e,
	0x1c, 0xb6, 0x90, 0x63, 0x97, 0xb7, 0x60, 0xeb, 0x50, 0x24, 0x62, 0x35, 0xdf, 0xca, 0x71, 0xf6,
	0xd6, 0x6d, 0xc0, 0xd6, 0xc1, 0x93, 0x0c, 0xf7, 0xc8, 0xd6, 0x8d, 0xdc, 0x16, 0x1a, 0xf2, 0x0a,
	0x1a, 0xec, 0x81, 0x11, 0x6c, 0x38, 0x4b, 0xc4, 0x6a, 0xb6, 0x5d, 0x7a, 0xbe, 0x99, 0xf0, 0xeb,
	0x3f, 0x0d, 0x1e, 0xe5, 0xcd, 0xb8, 0xf3, 0x5c, 0x78, 0xe1, 0xc3, 0xeb, 0x11, 0x9f, 0x76, 0xcf,
	0x32, 0xc2, 0xae, 0x2f, 0x1a, 0xac, 0xce, 0xa5, 0x73, 0x9f, 0x86, 0x7f, 0xc6, 0x49, 0xfd, 0xb2,
	0xf8, 0x1c, 0x62, 0xf1, 0x35, 0xc4, 0xe2, 0x7b, 0x88, 0x45, 0x79, 0xe9, 0xaf, 0x7f, 0xf8, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0xc4, 0x2b, 0x64, 0x31, 0x69, 0x01, 0x00, 0x00,
}

func (m *TopicScoreSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicScoreSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicScoreSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InvalidMessageDeliveries != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.InvalidMessageDeliveries))))
		i--
		dAtA[i] = 0x25
	}
	if m.MeshMessageDeliveries != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MeshMessageDeliveries))))
		i--
		dAtA[i] = 0x1d
	}
	if m.FirstMessageDeliveries != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FirstMessageDeliveries))))
		i--
		dAtA[i] = 0x15
	}
	if m.TimeInMesh != 0 {
		i = encodeVarintDebug(dAtA, i, uint64(m.TimeInMesh))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDebug(dAtA []byte, offset int, v uint64) int {
	offset -= sovDebug(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TopicScoreSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeInMesh != 0 {
		n += 1 + sovDebug(uint64(m.TimeInMesh))
	}
	if m.FirstMessageDeliveries != 0 {
		n += 5
	}
	if m.MeshMessageDeliveries != 0 {
		n += 5
	}
	if m.InvalidMessageDeliveries != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDebug(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDebug(x uint64) (n int) {
	return sovDebug(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TopicScoreSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicScoreSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicScoreSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInMesh", wireType)
			}
			m.TimeInMesh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInMesh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstMessageDeliveries", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FirstMessageDeliveries = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeshMessageDeliveries", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MeshMessageDeliveries = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidMessageDeliveries", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.InvalidMessageDeliveries = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebug(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDebug
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDebug
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDebug
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDebug        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebug          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDebug = fmt.Errorf("proto: unexpected end of group")
)
