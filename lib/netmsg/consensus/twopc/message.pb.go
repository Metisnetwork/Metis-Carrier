// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/netmsg/consensus/twopc/message.proto

package twopc

import (
	fmt "fmt"
	common "github.com/RosettaFlow/Carrier-Go/lib/netmsg/common"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 2pc prepare 阶段信息
type PrepareMsg struct {
	MsgOption            *common.MsgOption `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty"`
	TaskInfo             []byte            `protobuf:"bytes,2,opt,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty" ssz-max:"16777216"`
	Evidence             []byte            `protobuf:"bytes,3,opt,name=evidence,proto3" json:"evidence,omitempty" ssz-max:"1024"`
	CreateAt             uint64            `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" ssz-size:"8"`
	Sign                 []byte            `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty" ssz-max:"1024"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PrepareMsg) Reset()         { *m = PrepareMsg{} }
func (m *PrepareMsg) String() string { return proto.CompactTextString(m) }
func (*PrepareMsg) ProtoMessage()    {}
func (*PrepareMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ae68033ec53acb, []int{0}
}
func (m *PrepareMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareMsg.Merge(m, src)
}
func (m *PrepareMsg) XXX_Size() int {
	return m.Size()
}
func (m *PrepareMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareMsg proto.InternalMessageInfo

func (m *PrepareMsg) GetMsgOption() *common.MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *PrepareMsg) GetTaskInfo() []byte {
	if m != nil {
		return m.TaskInfo
	}
	return nil
}

func (m *PrepareMsg) GetEvidence() []byte {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *PrepareMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *PrepareMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// 2pc prepareVote
type PrepareVote struct {
	MsgOption            *common.MsgOption `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty" ssz-max:"16777216"`
	VoteOption           []byte            `protobuf:"bytes,2,opt,name=vote_option,json=voteOption,proto3" json:"vote_option,omitempty" ssz-max:"32"`
	PeerInfo             *TaskPeerInfo     `protobuf:"bytes,3,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info,omitempty" ssz-max:"16777216"`
	CreateAt             uint64            `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" ssz-size:"8"`
	Sign                 []byte            `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty" ssz-max:"1024"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PrepareVote) Reset()         { *m = PrepareVote{} }
func (m *PrepareVote) String() string { return proto.CompactTextString(m) }
func (*PrepareVote) ProtoMessage()    {}
func (*PrepareVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ae68033ec53acb, []int{1}
}
func (m *PrepareVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareVote.Merge(m, src)
}
func (m *PrepareVote) XXX_Size() int {
	return m.Size()
}
func (m *PrepareVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareVote.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareVote proto.InternalMessageInfo

func (m *PrepareVote) GetMsgOption() *common.MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *PrepareVote) GetVoteOption() []byte {
	if m != nil {
		return m.VoteOption
	}
	return nil
}

func (m *PrepareVote) GetPeerInfo() *TaskPeerInfo {
	if m != nil {
		return m.PeerInfo
	}
	return nil
}

func (m *PrepareVote) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *PrepareVote) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// 2pc confirm 阶段信息
type ConfirmMsg struct {
	MsgOption            *common.MsgOption    `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty" ssz-max:"16777216"`
	ConfirmOption        []byte               `protobuf:"bytes,2,opt,name=confirm_option,json=confirmOption,proto3" json:"confirm_option,omitempty" ssz-max:"32"`
	Peers                *ConfirmTaskPeerInfo `protobuf:"bytes,3,opt,name=peers,proto3" json:"peers,omitempty" ssz-max:"16777216"`
	CreateAt             uint64               `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" ssz-size:"8"`
	Sign                 []byte               `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty" ssz-max:"1024"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ConfirmMsg) Reset()         { *m = ConfirmMsg{} }
func (m *ConfirmMsg) String() string { return proto.CompactTextString(m) }
func (*ConfirmMsg) ProtoMessage()    {}
func (*ConfirmMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ae68033ec53acb, []int{2}
}
func (m *ConfirmMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmMsg.Merge(m, src)
}
func (m *ConfirmMsg) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmMsg proto.InternalMessageInfo

func (m *ConfirmMsg) GetMsgOption() *common.MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *ConfirmMsg) GetConfirmOption() []byte {
	if m != nil {
		return m.ConfirmOption
	}
	return nil
}

func (m *ConfirmMsg) GetPeers() *ConfirmTaskPeerInfo {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *ConfirmMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *ConfirmMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// On ConfirmMsg, the task partners peerInfo
type ConfirmTaskPeerInfo struct {
	DataSupplierPeerInfos   []*TaskPeerInfo `protobuf:"bytes,2,rep,name=data_supplier_peer_infos,json=dataSupplierPeerInfos,proto3" json:"data_supplier_peer_infos,omitempty" ssz-max:"16777216"`
	PowerSupplierPeerInfos  []*TaskPeerInfo `protobuf:"bytes,3,rep,name=power_supplier_peer_infos,json=powerSupplierPeerInfos,proto3" json:"power_supplier_peer_infos,omitempty" ssz-max:"16777216"`
	ResultReceiverPeerInfos []*TaskPeerInfo `protobuf:"bytes,4,rep,name=result_receiver_peer_infos,json=resultReceiverPeerInfos,proto3" json:"result_receiver_peer_infos,omitempty" ssz-max:"16777216"`
	XXX_NoUnkeyedLiteral    struct{}        `json:"-"`
	XXX_unrecognized        []byte          `json:"-"`
	XXX_sizecache           int32           `json:"-"`
}

func (m *ConfirmTaskPeerInfo) Reset()         { *m = ConfirmTaskPeerInfo{} }
func (m *ConfirmTaskPeerInfo) String() string { return proto.CompactTextString(m) }
func (*ConfirmTaskPeerInfo) ProtoMessage()    {}
func (*ConfirmTaskPeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ae68033ec53acb, []int{3}
}
func (m *ConfirmTaskPeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmTaskPeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmTaskPeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmTaskPeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmTaskPeerInfo.Merge(m, src)
}
func (m *ConfirmTaskPeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmTaskPeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmTaskPeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmTaskPeerInfo proto.InternalMessageInfo

func (m *ConfirmTaskPeerInfo) GetDataSupplierPeerInfos() []*TaskPeerInfo {
	if m != nil {
		return m.DataSupplierPeerInfos
	}
	return nil
}

func (m *ConfirmTaskPeerInfo) GetPowerSupplierPeerInfos() []*TaskPeerInfo {
	if m != nil {
		return m.PowerSupplierPeerInfos
	}
	return nil
}

func (m *ConfirmTaskPeerInfo) GetResultReceiverPeerInfos() []*TaskPeerInfo {
	if m != nil {
		return m.ResultReceiverPeerInfos
	}
	return nil
}

// 2pc confirmVote
type ConfirmVote struct {
	MsgOption            *common.MsgOption `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty" ssz-max:"16777216"`
	VoteOption           []byte            `protobuf:"bytes,2,opt,name=vote_option,json=voteOption,proto3" json:"vote_option,omitempty" ssz-max:"32"`
	CreateAt             uint64            `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" ssz-size:"8"`
	Sign                 []byte            `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty" ssz-max:"1024"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConfirmVote) Reset()         { *m = ConfirmVote{} }
func (m *ConfirmVote) String() string { return proto.CompactTextString(m) }
func (*ConfirmVote) ProtoMessage()    {}
func (*ConfirmVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ae68033ec53acb, []int{4}
}
func (m *ConfirmVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmVote.Merge(m, src)
}
func (m *ConfirmVote) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmVote.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmVote proto.InternalMessageInfo

func (m *ConfirmVote) GetMsgOption() *common.MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *ConfirmVote) GetVoteOption() []byte {
	if m != nil {
		return m.VoteOption
	}
	return nil
}

func (m *ConfirmVote) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *ConfirmVote) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// 触发任务执行消息
type CommitMsg struct {
	MsgOption            *common.MsgOption `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty" ssz-max:"16777216"`
	CommitOption         []byte            `protobuf:"bytes,2,opt,name=commit_option,json=commitOption,proto3" json:"commit_option,omitempty" ssz-max:"32"`
	CreateAt             uint64            `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" ssz-size:"8"`
	Sign                 []byte            `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty" ssz-max:"1024"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CommitMsg) Reset()         { *m = CommitMsg{} }
func (m *CommitMsg) String() string { return proto.CompactTextString(m) }
func (*CommitMsg) ProtoMessage()    {}
func (*CommitMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ae68033ec53acb, []int{5}
}
func (m *CommitMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitMsg.Merge(m, src)
}
func (m *CommitMsg) XXX_Size() int {
	return m.Size()
}
func (m *CommitMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CommitMsg proto.InternalMessageInfo

func (m *CommitMsg) GetMsgOption() *common.MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *CommitMsg) GetCommitOption() []byte {
	if m != nil {
		return m.CommitOption
	}
	return nil
}

func (m *CommitMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *CommitMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type TaskPeerInfo struct {
	Ip                   []byte   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty" ssz-max:"32"`
	Port                 []byte   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" ssz-max:"32"`
	PartyId              []byte   `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty" ssz-max:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskPeerInfo) Reset()         { *m = TaskPeerInfo{} }
func (m *TaskPeerInfo) String() string { return proto.CompactTextString(m) }
func (*TaskPeerInfo) ProtoMessage()    {}
func (*TaskPeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ae68033ec53acb, []int{6}
}
func (m *TaskPeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskPeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskPeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskPeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPeerInfo.Merge(m, src)
}
func (m *TaskPeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskPeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPeerInfo proto.InternalMessageInfo

func (m *TaskPeerInfo) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *TaskPeerInfo) GetPort() []byte {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *TaskPeerInfo) GetPartyId() []byte {
	if m != nil {
		return m.PartyId
	}
	return nil
}

func init() {
	proto.RegisterType((*PrepareMsg)(nil), "twopc.PrepareMsg")
	proto.RegisterType((*PrepareVote)(nil), "twopc.PrepareVote")
	proto.RegisterType((*ConfirmMsg)(nil), "twopc.ConfirmMsg")
	proto.RegisterType((*ConfirmTaskPeerInfo)(nil), "twopc.ConfirmTaskPeerInfo")
	proto.RegisterType((*ConfirmVote)(nil), "twopc.ConfirmVote")
	proto.RegisterType((*CommitMsg)(nil), "twopc.CommitMsg")
	proto.RegisterType((*TaskPeerInfo)(nil), "twopc.TaskPeerInfo")
}

func init() {
	proto.RegisterFile("lib/netmsg/consensus/twopc/message.proto", fileDescriptor_d8ae68033ec53acb)
}

var fileDescriptor_d8ae68033ec53acb = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0x41, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0xb3, 0xdb, 0xa2, 0xed, 0x6b, 0x21, 0x3a, 0x44, 0x5c, 0x7b, 0xa0, 0xcd, 0x6a, 0x4c,
	0x13, 0x43, 0x17, 0x8a, 0x52, 0x43, 0xbc, 0x08, 0x89, 0x82, 0x09, 0x91, 0xac, 0xc6, 0x83, 0x97,
	0xcd, 0x74, 0xfb, 0xba, 0x4c, 0xe8, 0xee, 0x4c, 0x66, 0xa6, 0xa0, 0x5c, 0xfd, 0x38, 0x5e, 0xfc,
	0x18, 0x5e, 0x4c, 0xfc, 0x04, 0x44, 0xf1, 0x1b, 0x70, 0xf4, 0x64, 0x76, 0x76, 0xa9, 0x36, 0xd0,
	0x00, 0x09, 0xc4, 0xdb, 0xee, 0xcc, 0xff, 0xfd, 0xdf, 0x7b, 0xbf, 0x79, 0x93, 0x81, 0xe6, 0x80,
	0x75, 0xbd, 0x04, 0x75, 0xac, 0x22, 0x2f, 0xe4, 0x89, 0xc2, 0x44, 0x0d, 0x95, 0xa7, 0xf7, 0xb9,
	0x08, 0xbd, 0x18, 0x95, 0xa2, 0x11, 0xb6, 0x84, 0xe4, 0x9a, 0x93, 0x29, 0xb3, 0x58, 0xbb, 0x2f,
	0x51, 0x70, 0xe5, 0x99, 0xb5, 0xee, 0xb0, 0xef, 0x45, 0x3c, 0xe2, 0xe6, 0xc7, 0x7c, 0x65, 0xda,
	0x5a, 0x7d, 0xcc, 0x35, 0x8e, 0x79, 0x32, 0x6e, 0xe6, 0xfe, 0xb6, 0x00, 0xb6, 0x25, 0x0a, 0x2a,
	0x71, 0x4b, 0x45, 0x64, 0x11, 0x20, 0x56, 0x51, 0xc0, 0x85, 0x66, 0x3c, 0x71, 0xac, 0x86, 0xd5,
	0xac, 0xb4, 0x6f, 0xb7, 0xb2, 0xc8, 0xd6, 0x96, 0x8a, 0x5e, 0x9b, 0x0d, 0xbf, 0x1c, 0x9f, 0x7c,
	0x92, 0x65, 0x28, 0x6b, 0xaa, 0x76, 0x03, 0x96, 0xf4, 0xb9, 0x63, 0x37, 0xac, 0x66, 0x75, 0x6d,
	0xee, 0xf8, 0xb0, 0x4e, 0x94, 0x3a, 0x58, 0x88, 0xe9, 0x87, 0x55, 0x77, 0x69, 0xa5, 0xd3, 0xe9,
	0xb4, 0x97, 0x56, 0x5c, 0xbf, 0x94, 0x0a, 0x37, 0x93, 0x3e, 0x27, 0x2d, 0x28, 0xe1, 0x1e, 0xeb,
	0x61, 0x12, 0xa2, 0x53, 0x30, 0x31, 0xe4, 0xf8, 0xb0, 0x3e, 0xf3, 0x37, 0x66, 0xb1, 0xfd, 0xd8,
	0xf5, 0x47, 0x1a, 0xb2, 0x00, 0xe5, 0x50, 0x22, 0xd5, 0x18, 0x50, 0xed, 0x14, 0x1b, 0x56, 0xb3,
	0xb8, 0x76, 0xeb, 0xf8, 0xb0, 0x5e, 0x4d, 0x03, 0x14, 0x3b, 0xc0, 0x55, 0xf7, 0xa9, 0xeb, 0x97,
	0x32, 0xc9, 0x73, 0x4d, 0x1e, 0x42, 0x51, 0xb1, 0x28, 0x71, 0xa6, 0x26, 0x5a, 0x9b, 0x7d, 0xf7,
	0xb3, 0x0d, 0x95, 0xbc, 0xf9, 0x77, 0x5c, 0x23, 0xd9, 0xb8, 0x50, 0xf7, 0x13, 0xfb, 0xfb, 0x87,
	0xca, 0x12, 0x54, 0xf6, 0xb8, 0xc6, 0x13, 0xab, 0x8c, 0xcb, 0xa8, 0x64, 0x13, 0xb7, 0xdc, 0x76,
	0x7d, 0x48, 0x45, 0x79, 0xc8, 0x06, 0x94, 0x05, 0xa2, 0xcc, 0x40, 0x16, 0x4c, 0xee, 0xd9, 0x96,
	0x39, 0xea, 0xd6, 0x5b, 0xaa, 0x76, 0xb7, 0x11, 0x65, 0xca, 0x6e, 0x32, 0x5d, 0x91, 0x2b, 0xae,
	0x8b, 0xd6, 0x17, 0x1b, 0x60, 0x9d, 0x27, 0x7d, 0x26, 0xe3, 0x74, 0x54, 0xae, 0x0e, 0x56, 0x07,
	0x66, 0xc2, 0xcc, 0xf7, 0x3c, 0x5e, 0xd3, 0xb9, 0x6e, 0x84, 0x6c, 0x2a, 0x6d, 0x5a, 0xe5, 0xb8,
	0x6a, 0x39, 0xae, 0xbc, 0xc8, 0x0b, 0x51, 0xcb, 0x0c, 0xae, 0x0b, 0xd9, 0x37, 0x1b, 0x66, 0xcf,
	0xa8, 0x86, 0xf4, 0xc0, 0xe9, 0x51, 0x4d, 0x03, 0x35, 0x14, 0x62, 0xc0, 0x50, 0x06, 0xa3, 0x93,
	0x57, 0x8e, 0xdd, 0x28, 0x5c, 0xf6, 0xe8, 0xef, 0xa4, 0x66, 0x6f, 0x72, 0xaf, 0x13, 0xb5, 0x22,
	0x7d, 0xb8, 0x27, 0xf8, 0x3e, 0xca, 0x33, 0xd3, 0x14, 0x2e, 0x9f, 0x66, 0xce, 0xb8, 0x9d, 0xce,
	0xb3, 0x03, 0x35, 0x89, 0x6a, 0x38, 0xd0, 0x81, 0xc4, 0x10, 0xd9, 0xde, 0x78, 0xa2, 0xe2, 0xe5,
	0x13, 0xdd, 0xcd, 0xec, 0xfc, 0xdc, 0x6d, 0x94, 0xc9, 0xfd, 0x69, 0x41, 0x25, 0xe7, 0xf9, 0xff,
	0x2f, 0xec, 0xd8, 0xcc, 0x14, 0x2e, 0x3c, 0x33, 0xc5, 0x73, 0x66, 0xe6, 0x97, 0x05, 0xe5, 0x75,
	0x1e, 0xc7, 0x4c, 0x5f, 0xed, 0x2d, 0x7b, 0x02, 0xd3, 0xa1, 0xb1, 0x3d, 0xaf, 0xc7, 0x6a, 0x26,
	0xbb, 0xde, 0x2e, 0x3f, 0x59, 0x50, 0x1d, 0xbb, 0x12, 0x0d, 0xb0, 0x99, 0x30, 0x0d, 0x9e, 0x55,
	0x93, 0xcd, 0x04, 0x79, 0x00, 0x45, 0xc1, 0xa5, 0x9e, 0x58, 0xb7, 0xd9, 0x25, 0x8f, 0xa0, 0x24,
	0xa8, 0xd4, 0x1f, 0x03, 0xd6, 0xcb, 0x9f, 0x96, 0xd3, 0xca, 0x9b, 0x46, 0xb1, 0xd9, 0x5b, 0x7b,
	0xf5, 0xf5, 0x68, 0xde, 0xfa, 0x7e, 0x34, 0x6f, 0xfd, 0x38, 0x9a, 0xb7, 0xde, 0x3f, 0x8b, 0x98,
	0xde, 0x19, 0x76, 0x53, 0xba, 0x9e, 0xcf, 0x15, 0x6a, 0x4d, 0x5f, 0x0c, 0xf8, 0xbe, 0xb7, 0x4e,
	0xa5, 0x64, 0x28, 0x17, 0x5e, 0x72, 0x6f, 0xf2, 0x23, 0xdd, 0xbd, 0x61, 0x1e, 0xd4, 0xe5, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x58, 0xc9, 0xb4, 0xc9, 0x07, 0x00, 0x00,
}

func (m *PrepareMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskInfo) > 0 {
		i -= len(m.TaskInfo)
		copy(dAtA[i:], m.TaskInfo)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskInfo)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrepareVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x20
	}
	if m.PeerInfo != nil {
		{
			size, err := m.PeerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoteOption) > 0 {
		i -= len(m.VoteOption)
		copy(dAtA[i:], m.VoteOption)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VoteOption)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Peers != nil {
		{
			size, err := m.Peers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConfirmOption) > 0 {
		i -= len(m.ConfirmOption)
		copy(dAtA[i:], m.ConfirmOption)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ConfirmOption)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmTaskPeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmTaskPeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmTaskPeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResultReceiverPeerInfos) > 0 {
		for iNdEx := len(m.ResultReceiverPeerInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResultReceiverPeerInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PowerSupplierPeerInfos) > 0 {
		for iNdEx := len(m.PowerSupplierPeerInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PowerSupplierPeerInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DataSupplierPeerInfos) > 0 {
		for iNdEx := len(m.DataSupplierPeerInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSupplierPeerInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VoteOption) > 0 {
		i -= len(m.VoteOption)
		copy(dAtA[i:], m.VoteOption)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VoteOption)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CommitOption) > 0 {
		i -= len(m.CommitOption)
		copy(dAtA[i:], m.CommitOption)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CommitOption)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskPeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskPeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskPeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PartyId) > 0 {
		i -= len(m.PartyId)
		copy(dAtA[i:], m.PartyId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PartyId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrepareMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskInfo)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrepareVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.VoteOption)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.PeerInfo != nil {
		l = m.PeerInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfirmMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ConfirmOption)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Peers != nil {
		l = m.Peers.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfirmTaskPeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataSupplierPeerInfos) > 0 {
		for _, e := range m.DataSupplierPeerInfos {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.PowerSupplierPeerInfos) > 0 {
		for _, e := range m.PowerSupplierPeerInfos {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.ResultReceiverPeerInfos) > 0 {
		for _, e := range m.ResultReceiverPeerInfos {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfirmVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.VoteOption)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommitMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CommitOption)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskPeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.PartyId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrepareMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &common.MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskInfo = append(m.TaskInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskInfo == nil {
				m.TaskInfo = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = append(m.Evidence[:0], dAtA[iNdEx:postIndex]...)
			if m.Evidence == nil {
				m.Evidence = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &common.MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteOption = append(m.VoteOption[:0], dAtA[iNdEx:postIndex]...)
			if m.VoteOption == nil {
				m.VoteOption = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerInfo == nil {
				m.PeerInfo = &TaskPeerInfo{}
			}
			if err := m.PeerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &common.MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmOption", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmOption = append(m.ConfirmOption[:0], dAtA[iNdEx:postIndex]...)
			if m.ConfirmOption == nil {
				m.ConfirmOption = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peers == nil {
				m.Peers = &ConfirmTaskPeerInfo{}
			}
			if err := m.Peers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmTaskPeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmTaskPeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmTaskPeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSupplierPeerInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSupplierPeerInfos = append(m.DataSupplierPeerInfos, &TaskPeerInfo{})
			if err := m.DataSupplierPeerInfos[len(m.DataSupplierPeerInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerSupplierPeerInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerSupplierPeerInfos = append(m.PowerSupplierPeerInfos, &TaskPeerInfo{})
			if err := m.PowerSupplierPeerInfos[len(m.PowerSupplierPeerInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultReceiverPeerInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultReceiverPeerInfos = append(m.ResultReceiverPeerInfos, &TaskPeerInfo{})
			if err := m.ResultReceiverPeerInfos[len(m.ResultReceiverPeerInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &common.MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteOption = append(m.VoteOption[:0], dAtA[iNdEx:postIndex]...)
			if m.VoteOption == nil {
				m.VoteOption = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &common.MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitOption", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitOption = append(m.CommitOption[:0], dAtA[iNdEx:postIndex]...)
			if m.CommitOption == nil {
				m.CommitOption = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskPeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskPeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskPeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip[:0], dAtA[iNdEx:postIndex]...)
			if m.Ip == nil {
				m.Ip = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = append(m.Port[:0], dAtA[iNdEx:postIndex]...)
			if m.Port == nil {
				m.Port = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyId = append(m.PartyId[:0], dAtA[iNdEx:postIndex]...)
			if m.PartyId == nil {
				m.PartyId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
