// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/db/structs.proto

package db

import (
	fmt "fmt"
	types "github.com/Metisnetwork/Metis-Carrier/lib/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SeedPeerPB struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeedPeerPB) Reset()         { *m = SeedPeerPB{} }
func (m *SeedPeerPB) String() string { return proto.CompactTextString(m) }
func (*SeedPeerPB) ProtoMessage()    {}
func (*SeedPeerPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{0}
}
func (m *SeedPeerPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeedPeerPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeedPeerPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeedPeerPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedPeerPB.Merge(m, src)
}
func (m *SeedPeerPB) XXX_Size() int {
	return m.Size()
}
func (m *SeedPeerPB) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedPeerPB.DiscardUnknown(m)
}

var xxx_messageInfo_SeedPeerPB proto.InternalMessageInfo

func (m *SeedPeerPB) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type SeedPeerListPB struct {
	SeedPeerList         []*SeedPeerPB `protobuf:"bytes,1,rep,name=seed_peer_list,json=seedPeerList,proto3" json:"seed_peer_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SeedPeerListPB) Reset()         { *m = SeedPeerListPB{} }
func (m *SeedPeerListPB) String() string { return proto.CompactTextString(m) }
func (*SeedPeerListPB) ProtoMessage()    {}
func (*SeedPeerListPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{1}
}
func (m *SeedPeerListPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeedPeerListPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeedPeerListPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeedPeerListPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedPeerListPB.Merge(m, src)
}
func (m *SeedPeerListPB) XXX_Size() int {
	return m.Size()
}
func (m *SeedPeerListPB) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedPeerListPB.DiscardUnknown(m)
}

var xxx_messageInfo_SeedPeerListPB proto.InternalMessageInfo

func (m *SeedPeerListPB) GetSeedPeerList() []*SeedPeerPB {
	if m != nil {
		return m.SeedPeerList
	}
	return nil
}

type RegisteredNodePB struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string   `protobuf:"bytes,2,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,3,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalIp           string   `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	ExternalPort         string   `protobuf:"bytes,5,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisteredNodePB) Reset()         { *m = RegisteredNodePB{} }
func (m *RegisteredNodePB) String() string { return proto.CompactTextString(m) }
func (*RegisteredNodePB) ProtoMessage()    {}
func (*RegisteredNodePB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{2}
}
func (m *RegisteredNodePB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredNodePB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredNodePB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredNodePB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredNodePB.Merge(m, src)
}
func (m *RegisteredNodePB) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredNodePB) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredNodePB.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredNodePB proto.InternalMessageInfo

func (m *RegisteredNodePB) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegisteredNodePB) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *RegisteredNodePB) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *RegisteredNodePB) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *RegisteredNodePB) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

type RegisteredNodeListPB struct {
	RegisteredNodeList   []*RegisteredNodePB `protobuf:"bytes,1,rep,name=registered_node_list,json=registeredNodeList,proto3" json:"registered_node_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RegisteredNodeListPB) Reset()         { *m = RegisteredNodeListPB{} }
func (m *RegisteredNodeListPB) String() string { return proto.CompactTextString(m) }
func (*RegisteredNodeListPB) ProtoMessage()    {}
func (*RegisteredNodeListPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{3}
}
func (m *RegisteredNodeListPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredNodeListPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredNodeListPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredNodeListPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredNodeListPB.Merge(m, src)
}
func (m *RegisteredNodeListPB) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredNodeListPB) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredNodeListPB.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredNodeListPB proto.InternalMessageInfo

func (m *RegisteredNodeListPB) GetRegisteredNodeList() []*RegisteredNodePB {
	if m != nil {
		return m.RegisteredNodeList
	}
	return nil
}

type Uint32PB struct {
	V                    uint32   `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uint32PB) Reset()         { *m = Uint32PB{} }
func (m *Uint32PB) String() string { return proto.CompactTextString(m) }
func (*Uint32PB) ProtoMessage()    {}
func (*Uint32PB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{4}
}
func (m *Uint32PB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Uint32PB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Uint32PB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Uint32PB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint32PB.Merge(m, src)
}
func (m *Uint32PB) XXX_Size() int {
	return m.Size()
}
func (m *Uint32PB) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint32PB.DiscardUnknown(m)
}

var xxx_messageInfo_Uint32PB proto.InternalMessageInfo

func (m *Uint32PB) GetV() uint32 {
	if m != nil {
		return m.V
	}
	return 0
}

type Uint64PB struct {
	V                    uint64   `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uint64PB) Reset()         { *m = Uint64PB{} }
func (m *Uint64PB) String() string { return proto.CompactTextString(m) }
func (*Uint64PB) ProtoMessage()    {}
func (*Uint64PB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{5}
}
func (m *Uint64PB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Uint64PB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Uint64PB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Uint64PB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint64PB.Merge(m, src)
}
func (m *Uint64PB) XXX_Size() int {
	return m.Size()
}
func (m *Uint64PB) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint64PB.DiscardUnknown(m)
}

var xxx_messageInfo_Uint64PB proto.InternalMessageInfo

func (m *Uint64PB) GetV() uint64 {
	if m != nil {
		return m.V
	}
	return 0
}

type StringPB struct {
	V                    string   `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringPB) Reset()         { *m = StringPB{} }
func (m *StringPB) String() string { return proto.CompactTextString(m) }
func (*StringPB) ProtoMessage()    {}
func (*StringPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{6}
}
func (m *StringPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringPB.Merge(m, src)
}
func (m *StringPB) XXX_Size() int {
	return m.Size()
}
func (m *StringPB) XXX_DiscardUnknown() {
	xxx_messageInfo_StringPB.DiscardUnknown(m)
}

var xxx_messageInfo_StringPB proto.InternalMessageInfo

func (m *StringPB) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

type StringArrayPB struct {
	Array                []string `protobuf:"bytes,1,rep,name=array,proto3" json:"array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringArrayPB) Reset()         { *m = StringArrayPB{} }
func (m *StringArrayPB) String() string { return proto.CompactTextString(m) }
func (*StringArrayPB) ProtoMessage()    {}
func (*StringArrayPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{7}
}
func (m *StringArrayPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringArrayPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringArrayPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringArrayPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringArrayPB.Merge(m, src)
}
func (m *StringArrayPB) XXX_Size() int {
	return m.Size()
}
func (m *StringArrayPB) XXX_DiscardUnknown() {
	xxx_messageInfo_StringArrayPB.DiscardUnknown(m)
}

var xxx_messageInfo_StringArrayPB proto.InternalMessageInfo

func (m *StringArrayPB) GetArray() []string {
	if m != nil {
		return m.Array
	}
	return nil
}

type TaskArrayPB struct {
	TaskList             []*types.TaskPB `protobuf:"bytes,1,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TaskArrayPB) Reset()         { *m = TaskArrayPB{} }
func (m *TaskArrayPB) String() string { return proto.CompactTextString(m) }
func (*TaskArrayPB) ProtoMessage()    {}
func (*TaskArrayPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{8}
}
func (m *TaskArrayPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskArrayPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskArrayPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskArrayPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskArrayPB.Merge(m, src)
}
func (m *TaskArrayPB) XXX_Size() int {
	return m.Size()
}
func (m *TaskArrayPB) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskArrayPB.DiscardUnknown(m)
}

var xxx_messageInfo_TaskArrayPB proto.InternalMessageInfo

func (m *TaskArrayPB) GetTaskList() []*types.TaskPB {
	if m != nil {
		return m.TaskList
	}
	return nil
}

type TaskEventArrayPB struct {
	TaskEventList        []*types.TaskEvent `protobuf:"bytes,1,rep,name=task_event_list,json=taskEventList,proto3" json:"task_event_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TaskEventArrayPB) Reset()         { *m = TaskEventArrayPB{} }
func (m *TaskEventArrayPB) String() string { return proto.CompactTextString(m) }
func (*TaskEventArrayPB) ProtoMessage()    {}
func (*TaskEventArrayPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_5465d80e8cba02e3, []int{9}
}
func (m *TaskEventArrayPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskEventArrayPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskEventArrayPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskEventArrayPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEventArrayPB.Merge(m, src)
}
func (m *TaskEventArrayPB) XXX_Size() int {
	return m.Size()
}
func (m *TaskEventArrayPB) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEventArrayPB.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEventArrayPB proto.InternalMessageInfo

func (m *TaskEventArrayPB) GetTaskEventList() []*types.TaskEvent {
	if m != nil {
		return m.TaskEventList
	}
	return nil
}

func init() {
	proto.RegisterType((*SeedPeerPB)(nil), "db.SeedPeerPB")
	proto.RegisterType((*SeedPeerListPB)(nil), "db.SeedPeerListPB")
	proto.RegisterType((*RegisteredNodePB)(nil), "db.RegisteredNodePB")
	proto.RegisterType((*RegisteredNodeListPB)(nil), "db.RegisteredNodeListPB")
	proto.RegisterType((*Uint32PB)(nil), "db.Uint32PB")
	proto.RegisterType((*Uint64PB)(nil), "db.Uint64PB")
	proto.RegisterType((*StringPB)(nil), "db.StringPB")
	proto.RegisterType((*StringArrayPB)(nil), "db.StringArrayPB")
	proto.RegisterType((*TaskArrayPB)(nil), "db.TaskArrayPB")
	proto.RegisterType((*TaskEventArrayPB)(nil), "db.TaskEventArrayPB")
}

func init() { proto.RegisterFile("lib/db/structs.proto", fileDescriptor_5465d80e8cba02e3) }

var fileDescriptor_5465d80e8cba02e3 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x49, 0xb7, 0x2b, 0xdb, 0xd3, 0x3f, 0x96, 0x21, 0x17, 0xc1, 0x8b, 0x5a, 0x22, 0x42,
	0x11, 0x4c, 0x60, 0x77, 0x59, 0xf4, 0xd2, 0x88, 0x15, 0x61, 0x91, 0x30, 0xab, 0x37, 0x5e, 0x58,
	0x26, 0x3b, 0x87, 0x3a, 0x6c, 0xcd, 0x84, 0x99, 0xb3, 0xd5, 0x7d, 0x29, 0x9f, 0xc3, 0x4b, 0x1f,
	0x41, 0xfa, 0x24, 0x32, 0x93, 0x4e, 0x37, 0xea, 0xdd, 0xe4, 0xfb, 0xbe, 0xf3, 0xcb, 0x39, 0x87,
	0x03, 0xf1, 0x46, 0x55, 0xb9, 0xac, 0x72, 0x4b, 0xe6, 0xf6, 0x9a, 0x6c, 0xd6, 0x18, 0x4d, 0x9a,
	0xf5, 0x64, 0xf5, 0x28, 0x71, 0x0e, 0xdd, 0x35, 0x68, 0x73, 0x12, 0xf6, 0x46, 0x0a, 0x12, 0xad,
	0x9b, 0xce, 0x01, 0xae, 0x10, 0x65, 0x89, 0x68, 0xca, 0x82, 0x31, 0xe8, 0x0b, 0x29, 0x4d, 0x12,
	0xcd, 0xa3, 0xc5, 0x80, 0xfb, 0x77, 0xba, 0x84, 0x49, 0x48, 0x5c, 0x2a, 0x4b, 0x65, 0xc1, 0xce,
	0x61, 0x62, 0x11, 0xe5, 0xaa, 0x41, 0x34, 0xab, 0x8d, 0xb2, 0x94, 0x44, 0xf3, 0xa3, 0xc5, 0xf0,
	0x74, 0x92, 0xc9, 0x2a, 0xbb, 0xa7, 0xf1, 0x91, 0xed, 0xd4, 0xa5, 0x3f, 0x22, 0x98, 0x72, 0x5c,
	0x2b, 0x4b, 0x68, 0x50, 0xbe, 0xd7, 0x12, 0xcb, 0x82, 0x4d, 0xa0, 0xa7, 0xe4, 0xfe, 0x77, 0x3d,
	0x25, 0xd9, 0x63, 0x18, 0xaa, 0x9a, 0xd0, 0xd4, 0x62, 0xb3, 0x52, 0x4d, 0xd2, 0xf3, 0x06, 0x04,
	0xe9, 0x5d, 0xc3, 0x9e, 0xc0, 0xf8, 0x10, 0x68, 0xb4, 0xa1, 0xe4, 0xc8, 0x47, 0x46, 0x41, 0x2c,
	0xb5, 0x21, 0x47, 0xc1, 0xef, 0xf7, 0x94, 0x7e, 0x4b, 0x09, 0x52, 0x4b, 0x39, 0x04, 0x3c, 0xe5,
	0xb8, 0xa5, 0x04, 0xd1, 0x51, 0xd2, 0xcf, 0x10, 0xff, 0xdd, 0xef, 0x7e, 0xfc, 0x25, 0xc4, 0xe6,
	0xa0, 0xaf, 0x6a, 0x2d, 0xb1, 0xbb, 0x84, 0xd8, 0x2d, 0xe1, 0xdf, 0x39, 0x39, 0x33, 0xff, 0x91,
	0xd2, 0x04, 0x4e, 0x3e, 0xaa, 0x9a, 0xce, 0x4e, 0xcb, 0x82, 0x8d, 0x20, 0xda, 0xfa, 0x35, 0x8c,
	0x79, 0xb4, 0x0d, 0xce, 0xc5, 0x79, 0xd7, 0xe9, 0xef, 0x9d, 0x2b, 0x32, 0xaa, 0x5e, 0x77, 0x9d,
	0x81, 0x73, 0x9e, 0xc2, 0xb8, 0x75, 0x5e, 0x19, 0x23, 0xee, 0xca, 0x82, 0xc5, 0x70, 0x2c, 0xdc,
	0xd3, 0xf7, 0x35, 0xe0, 0xed, 0x47, 0xfa, 0x12, 0x86, 0x1f, 0x84, 0xbd, 0x09, 0xa1, 0x67, 0x30,
	0x70, 0x07, 0xd1, 0x1d, 0x60, 0x9c, 0xf9, 0x43, 0xc9, 0x5c, 0xac, 0x2c, 0xf8, 0x89, 0xf3, 0x7d,
	0xbf, 0x97, 0x30, 0x75, 0xda, 0x9b, 0x2d, 0xd6, 0x14, 0xea, 0x5f, 0xc0, 0x43, 0x5f, 0x8f, 0x4e,
	0xec, 0x52, 0xa6, 0x1d, 0x8a, 0xaf, 0xe0, 0x63, 0x0a, 0x4f, 0x47, 0x2b, 0x2e, 0x7e, 0xee, 0x66,
	0xd1, 0xaf, 0xdd, 0x2c, 0xfa, 0xbd, 0x9b, 0x45, 0x9f, 0x16, 0x6b, 0x45, 0x5f, 0x6e, 0xab, 0xec,
	0x5a, 0x7f, 0xcd, 0xb9, 0xb6, 0x48, 0x24, 0x96, 0x1b, 0xfd, 0x2d, 0x7f, 0x2d, 0x8c, 0x51, 0x68,
	0x9e, 0xbf, 0xd5, 0x79, 0x7b, 0xdc, 0xd5, 0x03, 0x7f, 0xb7, 0x67, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xc9, 0xaf, 0x59, 0xd1, 0xed, 0x02, 0x00, 0x00,
}

func (m *SeedPeerPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeedPeerPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeedPeerPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintStructs(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeedPeerListPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeedPeerListPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeedPeerListPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SeedPeerList) > 0 {
		for iNdEx := len(m.SeedPeerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeedPeerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegisteredNodePB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredNodePB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredNodePB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintStructs(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintStructs(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintStructs(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintStructs(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStructs(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisteredNodeListPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredNodeListPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredNodeListPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegisteredNodeList) > 0 {
		for iNdEx := len(m.RegisteredNodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegisteredNodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Uint32PB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uint32PB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Uint32PB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.V != 0 {
		i = encodeVarintStructs(dAtA, i, uint64(m.V))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Uint64PB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uint64PB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Uint64PB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.V != 0 {
		i = encodeVarintStructs(dAtA, i, uint64(m.V))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StringPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.V) > 0 {
		i -= len(m.V)
		copy(dAtA[i:], m.V)
		i = encodeVarintStructs(dAtA, i, uint64(len(m.V)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringArrayPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringArrayPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringArrayPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Array) > 0 {
		for iNdEx := len(m.Array) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Array[iNdEx])
			copy(dAtA[i:], m.Array[iNdEx])
			i = encodeVarintStructs(dAtA, i, uint64(len(m.Array[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TaskArrayPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskArrayPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskArrayPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskList) > 0 {
		for iNdEx := len(m.TaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TaskEventArrayPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskEventArrayPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskEventArrayPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskEventList) > 0 {
		for iNdEx := len(m.TaskEventList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskEventList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStructs(dAtA []byte, offset int, v uint64) int {
	offset -= sovStructs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SeedPeerPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovStructs(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeedPeerListPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SeedPeerList) > 0 {
		for _, e := range m.SeedPeerList {
			l = e.Size()
			n += 1 + l + sovStructs(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisteredNodePB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStructs(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovStructs(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovStructs(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovStructs(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovStructs(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisteredNodeListPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegisteredNodeList) > 0 {
		for _, e := range m.RegisteredNodeList {
			l = e.Size()
			n += 1 + l + sovStructs(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Uint32PB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.V != 0 {
		n += 1 + sovStructs(uint64(m.V))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Uint64PB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.V != 0 {
		n += 1 + sovStructs(uint64(m.V))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.V)
	if l > 0 {
		n += 1 + l + sovStructs(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringArrayPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Array) > 0 {
		for _, s := range m.Array {
			l = len(s)
			n += 1 + l + sovStructs(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskArrayPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskList) > 0 {
		for _, e := range m.TaskList {
			l = e.Size()
			n += 1 + l + sovStructs(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskEventArrayPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskEventList) > 0 {
		for _, e := range m.TaskEventList {
			l = e.Size()
			n += 1 + l + sovStructs(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStructs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStructs(x uint64) (n int) {
	return sovStructs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SeedPeerPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeedPeerPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeedPeerPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeedPeerListPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeedPeerListPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeedPeerListPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeedPeerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeedPeerList = append(m.SeedPeerList, &SeedPeerPB{})
			if err := m.SeedPeerList[len(m.SeedPeerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredNodePB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredNodePB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredNodePB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredNodeListPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredNodeListPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredNodeListPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredNodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredNodeList = append(m.RegisteredNodeList, &RegisteredNodePB{})
			if err := m.RegisteredNodeList[len(m.RegisteredNodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Uint32PB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Uint32PB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Uint32PB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Uint64PB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Uint64PB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Uint64PB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringArrayPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringArrayPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringArrayPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Array", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Array = append(m.Array, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskArrayPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskArrayPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskArrayPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = append(m.TaskList, &types.TaskPB{})
			if err := m.TaskList[len(m.TaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskEventArrayPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskEventArrayPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskEventArrayPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskEventList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskEventList = append(m.TaskEventList, &types.TaskEvent{})
			if err := m.TaskEventList[len(m.TaskEventList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStructs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStructs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStructs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStructs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStructs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStructs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStructs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStructs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStructs = fmt.Errorf("proto: unexpected end of group")
)
