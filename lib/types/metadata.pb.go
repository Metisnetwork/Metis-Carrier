// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/types/metadata.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MetaData body data struct.
type MetaData struct {
	Identity             string        `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	NodeId               string        `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	DataId               string        `protobuf:"bytes,3,opt,name=dataId,proto3" json:"dataId,omitempty"`
	DataStatus           string        `protobuf:"bytes,4,opt,name=dataStatus,proto3" json:"dataStatus,omitempty"`
	FilePath             string        `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Desc                 string        `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Rows                 uint64        `protobuf:"varint,7,opt,name=rows,proto3" json:"rows,omitempty"`
	Columns              uint64        `protobuf:"varint,8,opt,name=columns,proto3" json:"columns,omitempty"`
	Size_                uint64        `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	FileType             string        `protobuf:"bytes,10,opt,name=fileType,proto3" json:"fileType,omitempty"`
	State                string        `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	HasTitleRow          bool          `protobuf:"varint,12,opt,name=hasTitleRow,proto3" json:"hasTitleRow,omitempty"`
	ColumnMetaList       []*ColumnMeta `protobuf:"bytes,13,rep,name=columnMetaList,proto3" json:"columnMetaList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MetaData) Reset()         { *m = MetaData{} }
func (m *MetaData) String() string { return proto.CompactTextString(m) }
func (*MetaData) ProtoMessage()    {}
func (*MetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{0}
}
func (m *MetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaData.Merge(m, src)
}
func (m *MetaData) XXX_Size() int {
	return m.Size()
}
func (m *MetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaData.DiscardUnknown(m)
}

var xxx_messageInfo_MetaData proto.InternalMessageInfo

func (m *MetaData) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *MetaData) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *MetaData) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *MetaData) GetDataStatus() string {
	if m != nil {
		return m.DataStatus
	}
	return ""
}

func (m *MetaData) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *MetaData) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MetaData) GetRows() uint64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *MetaData) GetColumns() uint64 {
	if m != nil {
		return m.Columns
	}
	return 0
}

func (m *MetaData) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *MetaData) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

func (m *MetaData) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *MetaData) GetHasTitleRow() bool {
	if m != nil {
		return m.HasTitleRow
	}
	return false
}

func (m *MetaData) GetColumnMetaList() []*ColumnMeta {
	if m != nil {
		return m.ColumnMetaList
	}
	return nil
}

type ColumnMeta struct {
	Cindex uint64 `protobuf:"varint,1,opt,name=cindex,proto3" json:"cindex,omitempty"`
	Cname  string `protobuf:"bytes,2,opt,name=cname,proto3" json:"cname,omitempty"`
	Ctype  string `protobuf:"bytes,3,opt,name=ctype,proto3" json:"ctype,omitempty"`
	// unit: byte
	Csize                uint64   `protobuf:"varint,4,opt,name=csize,proto3" json:"csize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColumnMeta) Reset()         { *m = ColumnMeta{} }
func (m *ColumnMeta) String() string { return proto.CompactTextString(m) }
func (*ColumnMeta) ProtoMessage()    {}
func (*ColumnMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{1}
}
func (m *ColumnMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnMeta.Merge(m, src)
}
func (m *ColumnMeta) XXX_Size() int {
	return m.Size()
}
func (m *ColumnMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnMeta proto.InternalMessageInfo

func (m *ColumnMeta) GetCindex() uint64 {
	if m != nil {
		return m.Cindex
	}
	return 0
}

func (m *ColumnMeta) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ColumnMeta) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ColumnMeta) GetCsize() uint64 {
	if m != nil {
		return m.Csize
	}
	return 0
}

func init() {
	proto.RegisterType((*MetaData)(nil), "types.MetaData")
	proto.RegisterType((*ColumnMeta)(nil), "types.ColumnMeta")
}

func init() { proto.RegisterFile("lib/types/metadata.proto", fileDescriptor_33d0259ee189cec4) }

var fileDescriptor_33d0259ee189cec4 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcf, 0x0a, 0xd3, 0x40,
	0x10, 0x87, 0x49, 0x9b, 0xb6, 0xe9, 0x56, 0x05, 0x17, 0x91, 0xa5, 0x87, 0x10, 0xea, 0x25, 0x20,
	0x26, 0xa0, 0xa7, 0x5e, 0xad, 0x28, 0x05, 0x05, 0x89, 0x3d, 0x79, 0xdb, 0x24, 0xd3, 0x76, 0x21,
	0xc9, 0x86, 0xec, 0x84, 0x5a, 0x9f, 0xd0, 0xa3, 0x8f, 0x20, 0x7d, 0x09, 0xaf, 0xb2, 0xb3, 0xe9,
	0x1f, 0xbc, 0xcd, 0xf7, 0xcd, 0x90, 0x5f, 0x32, 0x19, 0x26, 0x2a, 0x95, 0xa7, 0x78, 0x6e, 0xc1,
	0xa4, 0x35, 0xa0, 0x2c, 0x25, 0xca, 0xa4, 0xed, 0x34, 0x6a, 0x3e, 0x21, 0xbb, 0x7c, 0xd5, 0x41,
	0xab, 0x4d, 0x4a, 0x2e, 0xef, 0xf7, 0xe9, 0x41, 0x1f, 0x34, 0x01, 0x55, 0x6e, 0x76, 0xf5, 0x77,
	0xc4, 0x82, 0x2f, 0x80, 0xf2, 0x83, 0x44, 0xc9, 0x97, 0x2c, 0x50, 0x25, 0x34, 0xa8, 0xf0, 0x2c,
	0xbc, 0xc8, 0x8b, 0xe7, 0xd9, 0x8d, 0xf9, 0x4b, 0x36, 0x6d, 0x74, 0x09, 0xdb, 0x52, 0x8c, 0xa8,
	0x33, 0x90, 0xf5, 0x36, 0x7a, 0x5b, 0x8a, 0xb1, 0xf3, 0x8e, 0x78, 0xc8, 0x98, 0xad, 0xbe, 0xa1,
	0xc4, 0xde, 0x08, 0x9f, 0x7a, 0x0f, 0xc6, 0x66, 0xed, 0x55, 0x05, 0x5f, 0x25, 0x1e, 0xc5, 0xc4,
	0x65, 0x5d, 0x99, 0x73, 0xe6, 0x97, 0x60, 0x0a, 0x31, 0x25, 0x4f, 0xb5, 0x75, 0x9d, 0x3e, 0x19,
	0x31, 0x8b, 0xbc, 0xd8, 0xcf, 0xa8, 0xe6, 0x82, 0xcd, 0x0a, 0x5d, 0xf5, 0x75, 0x63, 0x44, 0x40,
	0xfa, 0x8a, 0x76, 0xda, 0xa8, 0x9f, 0x20, 0xe6, 0x6e, 0xda, 0xd6, 0xd7, 0xc4, 0xdd, 0xb9, 0x05,
	0xc1, 0xee, 0x89, 0x96, 0xf9, 0x0b, 0x36, 0x31, 0x28, 0x11, 0xc4, 0x82, 0x1a, 0x0e, 0x78, 0xc4,
	0x16, 0x47, 0x69, 0x76, 0x0a, 0x2b, 0xc8, 0xf4, 0x49, 0x3c, 0x89, 0xbc, 0x38, 0xc8, 0x1e, 0x15,
	0x5f, 0xb3, 0x67, 0x2e, 0xd2, 0xee, 0xf0, 0xb3, 0x32, 0x28, 0x9e, 0x46, 0xe3, 0x78, 0xf1, 0xf6,
	0x79, 0x42, 0xff, 0x20, 0xd9, 0xdc, 0x9a, 0xd9, 0x7f, 0x83, 0xab, 0x3d, 0x63, 0xf7, 0xae, 0x5d,
	0x63, 0xa1, 0x9a, 0x12, 0x7e, 0xd0, 0xe2, 0xfd, 0x6c, 0x20, 0xfb, 0x62, 0x45, 0x23, 0x6b, 0x18,
	0xb6, 0xee, 0x80, 0xac, 0x0d, 0x18, 0x76, 0xee, 0x80, 0x2c, 0x7d, 0xb5, 0x4f, 0x8f, 0x70, 0xf0,
	0x7e, 0xfd, 0xeb, 0x12, 0x7a, 0xbf, 0x2f, 0xa1, 0xf7, 0xe7, 0x12, 0x7a, 0xdf, 0x5f, 0x1f, 0x14,
	0x1e, 0xfb, 0x3c, 0x29, 0x74, 0x9d, 0x66, 0xda, 0x00, 0xa2, 0xfc, 0x58, 0xe9, 0x53, 0xba, 0x91,
	0x5d, 0xa7, 0xa0, 0x7b, 0xf3, 0x49, 0xa7, 0xb7, 0xbb, 0xca, 0xa7, 0x74, 0x23, 0xef, 0xfe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x31, 0xd9, 0x72, 0x68, 0x6b, 0x02, 0x00, 0x00,
}

func (m *MetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ColumnMetaList) > 0 {
		for iNdEx := len(m.ColumnMetaList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ColumnMetaList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.HasTitleRow {
		i--
		if m.HasTitleRow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FileType) > 0 {
		i -= len(m.FileType)
		copy(dAtA[i:], m.FileType)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.FileType)))
		i--
		dAtA[i] = 0x52
	}
	if m.Size_ != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x48
	}
	if m.Columns != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Columns))
		i--
		dAtA[i] = 0x40
	}
	if m.Rows != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataStatus) > 0 {
		i -= len(m.DataStatus)
		copy(dAtA[i:], m.DataStatus)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ColumnMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Csize != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Csize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ctype) > 0 {
		i -= len(m.Ctype)
		copy(dAtA[i:], m.Ctype)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Ctype)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cname) > 0 {
		i -= len(m.Cname)
		copy(dAtA[i:], m.Cname)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Cname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cindex != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Cindex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.DataStatus)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Rows != 0 {
		n += 1 + sovMetadata(uint64(m.Rows))
	}
	if m.Columns != 0 {
		n += 1 + sovMetadata(uint64(m.Columns))
	}
	if m.Size_ != 0 {
		n += 1 + sovMetadata(uint64(m.Size_))
	}
	l = len(m.FileType)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.HasTitleRow {
		n += 2
	}
	if len(m.ColumnMetaList) > 0 {
		for _, e := range m.ColumnMetaList {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ColumnMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cindex != 0 {
		n += 1 + sovMetadata(uint64(m.Cindex))
	}
	l = len(m.Cname)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Ctype)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Csize != 0 {
		n += 1 + sovMetadata(uint64(m.Csize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			m.Columns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Columns |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTitleRow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasTitleRow = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnMetaList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnMetaList = append(m.ColumnMetaList, &ColumnMeta{})
			if err := m.ColumnMetaList[len(m.ColumnMetaList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cindex", wireType)
			}
			m.Cindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cindex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csize", wireType)
			}
			m.Csize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Csize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
