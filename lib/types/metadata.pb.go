// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/types/metadata.proto

package types

import (
	fmt "fmt"
	common "github.com/RosettaFlow/Carrier-Go/lib/common"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Metadata body data struct.
type MetadataPB struct {
	IdentityId           string                `protobuf:"bytes,1,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	NodeId               string                `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeName             string                `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	DataId               string                `protobuf:"bytes,4,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	DataStatus           common.DataStatus     `protobuf:"varint,5,opt,name=data_status,json=dataStatus,proto3,enum=api.protobuf.DataStatus" json:"data_status,omitempty"`
	OriginId             string                `protobuf:"bytes,6,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	TableName            string                `protobuf:"bytes,7,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	FilePath             string                `protobuf:"bytes,8,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Desc                 string                `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
	Rows                 uint32                `protobuf:"varint,10,opt,name=rows,proto3" json:"rows,omitempty"`
	Columns              uint32                `protobuf:"varint,11,opt,name=columns,proto3" json:"columns,omitempty"`
	Size_                uint64                `protobuf:"varint,12,opt,name=size,proto3" json:"size,omitempty"`
	FileType             common.OriginFileType `protobuf:"varint,13,opt,name=file_type,json=fileType,proto3,enum=api.protobuf.OriginFileType" json:"file_type,omitempty"`
	State                common.MetadataState  `protobuf:"varint,14,opt,name=state,proto3,enum=api.protobuf.MetadataState" json:"state,omitempty"`
	HasTitle             bool                  `protobuf:"varint,15,opt,name=has_title,json=hasTitle,proto3" json:"has_title,omitempty"`
	MetadataColumns      []*MetadataColumn     `protobuf:"bytes,16,rep,name=metadata_columns,json=metadataColumns,proto3" json:"metadata_columns,omitempty"`
	Industry             string                `protobuf:"bytes,17,opt,name=industry,proto3" json:"industry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MetadataPB) Reset()         { *m = MetadataPB{} }
func (m *MetadataPB) String() string { return proto.CompactTextString(m) }
func (*MetadataPB) ProtoMessage()    {}
func (*MetadataPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{0}
}
func (m *MetadataPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataPB.Merge(m, src)
}
func (m *MetadataPB) XXX_Size() int {
	return m.Size()
}
func (m *MetadataPB) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataPB.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataPB proto.InternalMessageInfo

func (m *MetadataPB) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *MetadataPB) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *MetadataPB) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *MetadataPB) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *MetadataPB) GetDataStatus() common.DataStatus {
	if m != nil {
		return m.DataStatus
	}
	return common.DataStatus_DataStatus_Unknown
}

func (m *MetadataPB) GetOriginId() string {
	if m != nil {
		return m.OriginId
	}
	return ""
}

func (m *MetadataPB) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *MetadataPB) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *MetadataPB) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MetadataPB) GetRows() uint32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *MetadataPB) GetColumns() uint32 {
	if m != nil {
		return m.Columns
	}
	return 0
}

func (m *MetadataPB) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *MetadataPB) GetFileType() common.OriginFileType {
	if m != nil {
		return m.FileType
	}
	return common.OriginFileType_FileType_Unknown
}

func (m *MetadataPB) GetState() common.MetadataState {
	if m != nil {
		return m.State
	}
	return common.MetadataState_MetadataState_Unknown
}

func (m *MetadataPB) GetHasTitle() bool {
	if m != nil {
		return m.HasTitle
	}
	return false
}

func (m *MetadataPB) GetMetadataColumns() []*MetadataColumn {
	if m != nil {
		return m.MetadataColumns
	}
	return nil
}

func (m *MetadataPB) GetIndustry() string {
	if m != nil {
		return m.Industry
	}
	return ""
}

// 元数据中的列描述
type MetadataColumn struct {
	CIndex               uint32   `protobuf:"varint,1,opt,name=c_index,json=cIndex,proto3" json:"c_index,omitempty"`
	CName                string   `protobuf:"bytes,2,opt,name=c_name,json=cName,proto3" json:"c_name,omitempty"`
	CType                string   `protobuf:"bytes,3,opt,name=c_type,json=cType,proto3" json:"c_type,omitempty"`
	CSize                uint32   `protobuf:"varint,4,opt,name=c_size,json=cSize,proto3" json:"c_size,omitempty"`
	CComment             string   `protobuf:"bytes,5,opt,name=c_comment,json=cComment,proto3" json:"c_comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetadataColumn) Reset()         { *m = MetadataColumn{} }
func (m *MetadataColumn) String() string { return proto.CompactTextString(m) }
func (*MetadataColumn) ProtoMessage()    {}
func (*MetadataColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{1}
}
func (m *MetadataColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataColumn.Merge(m, src)
}
func (m *MetadataColumn) XXX_Size() int {
	return m.Size()
}
func (m *MetadataColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataColumn.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataColumn proto.InternalMessageInfo

func (m *MetadataColumn) GetCIndex() uint32 {
	if m != nil {
		return m.CIndex
	}
	return 0
}

func (m *MetadataColumn) GetCName() string {
	if m != nil {
		return m.CName
	}
	return ""
}

func (m *MetadataColumn) GetCType() string {
	if m != nil {
		return m.CType
	}
	return ""
}

func (m *MetadataColumn) GetCSize() uint32 {
	if m != nil {
		return m.CSize
	}
	return 0
}

func (m *MetadataColumn) GetCComment() string {
	if m != nil {
		return m.CComment
	}
	return ""
}

// 元数据申请记录实体
type AuthRecordPB struct {
	AuthRecordId         string                     `protobuf:"bytes,1,opt,name=auth_record_id,json=authRecordId,proto3" json:"auth_record_id,omitempty"`
	User                 string                     `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	UserType             common.UserType            `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=api.protobuf.UserType" json:"user_type,omitempty"`
	DataRecord           *MetadataAuthority         `protobuf:"bytes,4,opt,name=data_record,json=dataRecord,proto3" json:"data_record,omitempty"`
	AuditResult          common.AuditMetadataOption `protobuf:"varint,5,opt,name=audit_result,json=auditResult,proto3,enum=api.protobuf.AuditMetadataOption" json:"audit_result,omitempty"`
	AuditSuggest         string                     `protobuf:"bytes,6,opt,name=audit_suggest,json=auditSuggest,proto3" json:"audit_suggest,omitempty"`
	ApplyAt              uint64                     `protobuf:"varint,7,opt,name=apply_at,json=applyAt,proto3" json:"apply_at,omitempty"`
	AuditAt              uint64                     `protobuf:"varint,8,opt,name=audit_at,json=auditAt,proto3" json:"audit_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AuthRecordPB) Reset()         { *m = AuthRecordPB{} }
func (m *AuthRecordPB) String() string { return proto.CompactTextString(m) }
func (*AuthRecordPB) ProtoMessage()    {}
func (*AuthRecordPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{2}
}
func (m *AuthRecordPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthRecordPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthRecordPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthRecordPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRecordPB.Merge(m, src)
}
func (m *AuthRecordPB) XXX_Size() int {
	return m.Size()
}
func (m *AuthRecordPB) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRecordPB.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRecordPB proto.InternalMessageInfo

func (m *AuthRecordPB) GetAuthRecordId() string {
	if m != nil {
		return m.AuthRecordId
	}
	return ""
}

func (m *AuthRecordPB) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *AuthRecordPB) GetUserType() common.UserType {
	if m != nil {
		return m.UserType
	}
	return common.UserType_User_Unknown
}

func (m *AuthRecordPB) GetDataRecord() *MetadataAuthority {
	if m != nil {
		return m.DataRecord
	}
	return nil
}

func (m *AuthRecordPB) GetAuditResult() common.AuditMetadataOption {
	if m != nil {
		return m.AuditResult
	}
	return common.AuditMetadataOption_Audit_Pending
}

func (m *AuthRecordPB) GetAuditSuggest() string {
	if m != nil {
		return m.AuditSuggest
	}
	return ""
}

func (m *AuthRecordPB) GetApplyAt() uint64 {
	if m != nil {
		return m.ApplyAt
	}
	return 0
}

func (m *AuthRecordPB) GetAuditAt() uint64 {
	if m != nil {
		return m.AuditAt
	}
	return 0
}

// =============================== For API =========================
// 元数据的摘要内容 (不包含详细 列描述)
type MetadataSummary struct {
	MetadataId           string                `protobuf:"bytes,1,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	OriginId             string                `protobuf:"bytes,2,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	TableName            string                `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Desc                 string                `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	FilePath             string                `protobuf:"bytes,5,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Rows                 uint32                `protobuf:"varint,6,opt,name=rows,proto3" json:"rows,omitempty"`
	Columns              uint32                `protobuf:"varint,7,opt,name=columns,proto3" json:"columns,omitempty"`
	Size_                uint64                `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	FileType             common.OriginFileType `protobuf:"varint,9,opt,name=file_type,json=fileType,proto3,enum=api.protobuf.OriginFileType" json:"file_type,omitempty"`
	HasTitle             bool                  `protobuf:"varint,10,opt,name=has_title,json=hasTitle,proto3" json:"has_title,omitempty"`
	Industry             string                `protobuf:"bytes,11,opt,name=industry,proto3" json:"industry,omitempty"`
	State                common.MetadataState  `protobuf:"varint,12,opt,name=state,proto3,enum=api.protobuf.MetadataState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MetadataSummary) Reset()         { *m = MetadataSummary{} }
func (m *MetadataSummary) String() string { return proto.CompactTextString(m) }
func (*MetadataSummary) ProtoMessage()    {}
func (*MetadataSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{3}
}
func (m *MetadataSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataSummary.Merge(m, src)
}
func (m *MetadataSummary) XXX_Size() int {
	return m.Size()
}
func (m *MetadataSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataSummary.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataSummary proto.InternalMessageInfo

func (m *MetadataSummary) GetMetadataId() string {
	if m != nil {
		return m.MetadataId
	}
	return ""
}

func (m *MetadataSummary) GetOriginId() string {
	if m != nil {
		return m.OriginId
	}
	return ""
}

func (m *MetadataSummary) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *MetadataSummary) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MetadataSummary) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *MetadataSummary) GetRows() uint32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *MetadataSummary) GetColumns() uint32 {
	if m != nil {
		return m.Columns
	}
	return 0
}

func (m *MetadataSummary) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *MetadataSummary) GetFileType() common.OriginFileType {
	if m != nil {
		return m.FileType
	}
	return common.OriginFileType_FileType_Unknown
}

func (m *MetadataSummary) GetHasTitle() bool {
	if m != nil {
		return m.HasTitle
	}
	return false
}

func (m *MetadataSummary) GetIndustry() string {
	if m != nil {
		return m.Industry
	}
	return ""
}

func (m *MetadataSummary) GetState() common.MetadataState {
	if m != nil {
		return m.State
	}
	return common.MetadataState_MetadataState_Unknown
}

// 元数据的详情信息
type MetadataDetail struct {
	MetadataSummary      *MetadataSummary  `protobuf:"bytes,1,opt,name=metadata_summary,json=metadataSummary,proto3" json:"metadata_summary,omitempty"`
	MetadataColumns      []*MetadataColumn `protobuf:"bytes,2,rep,name=metadata_columns,json=metadataColumns,proto3" json:"metadata_columns,omitempty"`
	TotalTaskCount       uint32            `protobuf:"varint,3,opt,name=total_task_count,json=totalTaskCount,proto3" json:"total_task_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetadataDetail) Reset()         { *m = MetadataDetail{} }
func (m *MetadataDetail) String() string { return proto.CompactTextString(m) }
func (*MetadataDetail) ProtoMessage()    {}
func (*MetadataDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{4}
}
func (m *MetadataDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataDetail.Merge(m, src)
}
func (m *MetadataDetail) XXX_Size() int {
	return m.Size()
}
func (m *MetadataDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataDetail.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataDetail proto.InternalMessageInfo

func (m *MetadataDetail) GetMetadataSummary() *MetadataSummary {
	if m != nil {
		return m.MetadataSummary
	}
	return nil
}

func (m *MetadataDetail) GetMetadataColumns() []*MetadataColumn {
	if m != nil {
		return m.MetadataColumns
	}
	return nil
}

func (m *MetadataDetail) GetTotalTaskCount() uint32 {
	if m != nil {
		return m.TotalTaskCount
	}
	return 0
}

// 元数据的使用方式定义
type MetadataUsage struct {
	UsageType            common.MetadataUsageType `protobuf:"varint,1,opt,name=usage_type,json=usageType,proto3,enum=api.protobuf.MetadataUsageType" json:"usage_type,omitempty"`
	StartAt              uint64                   `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt                uint64                   `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Times                uint32                   `protobuf:"varint,4,opt,name=times,proto3" json:"times,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MetadataUsage) Reset()         { *m = MetadataUsage{} }
func (m *MetadataUsage) String() string { return proto.CompactTextString(m) }
func (*MetadataUsage) ProtoMessage()    {}
func (*MetadataUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{5}
}
func (m *MetadataUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataUsage.Merge(m, src)
}
func (m *MetadataUsage) XXX_Size() int {
	return m.Size()
}
func (m *MetadataUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataUsage.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataUsage proto.InternalMessageInfo

func (m *MetadataUsage) GetUsageType() common.MetadataUsageType {
	if m != nil {
		return m.UsageType
	}
	return common.MetadataUsageType_Usage_Unknown
}

func (m *MetadataUsage) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *MetadataUsage) GetEndAt() uint64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *MetadataUsage) GetTimes() uint32 {
	if m != nil {
		return m.Times
	}
	return 0
}

// 元数据使用授权
type MetadataAuthority struct {
	Owner                *common.Organization `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	MetadataId           string               `protobuf:"bytes,2,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	Usage                *MetadataUsage       `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MetadataAuthority) Reset()         { *m = MetadataAuthority{} }
func (m *MetadataAuthority) String() string { return proto.CompactTextString(m) }
func (*MetadataAuthority) ProtoMessage()    {}
func (*MetadataAuthority) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{6}
}
func (m *MetadataAuthority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataAuthority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataAuthority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataAuthority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataAuthority.Merge(m, src)
}
func (m *MetadataAuthority) XXX_Size() int {
	return m.Size()
}
func (m *MetadataAuthority) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataAuthority.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataAuthority proto.InternalMessageInfo

func (m *MetadataAuthority) GetOwner() *common.Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MetadataAuthority) GetMetadataId() string {
	if m != nil {
		return m.MetadataId
	}
	return ""
}

func (m *MetadataAuthority) GetUsage() *MetadataUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func init() {
	proto.RegisterType((*MetadataPB)(nil), "types.MetadataPB")
	proto.RegisterType((*MetadataColumn)(nil), "types.MetadataColumn")
	proto.RegisterType((*AuthRecordPB)(nil), "types.AuthRecordPB")
	proto.RegisterType((*MetadataSummary)(nil), "types.MetadataSummary")
	proto.RegisterType((*MetadataDetail)(nil), "types.MetadataDetail")
	proto.RegisterType((*MetadataUsage)(nil), "types.MetadataUsage")
	proto.RegisterType((*MetadataAuthority)(nil), "types.MetadataAuthority")
}

func init() { proto.RegisterFile("lib/types/metadata.proto", fileDescriptor_33d0259ee189cec4) }

var fileDescriptor_33d0259ee189cec4 = []byte{
	// 971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x96, 0x93, 0x38, 0x89, 0xc7, 0x49, 0xb6, 0x3b, 0xda, 0x2e, 0xa6, 0x85, 0x6e, 0xc8, 0x72,
	0x88, 0x40, 0x24, 0x90, 0x3d, 0xf5, 0x82, 0x48, 0x5b, 0x2d, 0xca, 0x01, 0xb6, 0x72, 0xbb, 0x17,
	0x2e, 0xd6, 0xc4, 0x9e, 0x4d, 0x46, 0x6b, 0x7b, 0x2c, 0xcf, 0xb3, 0x4a, 0xf6, 0x17, 0x20, 0x71,
	0xe3, 0xc2, 0xcf, 0xe1, 0xca, 0x0d, 0xae, 0xdc, 0x50, 0x7f, 0x09, 0x9a, 0x37, 0x76, 0x52, 0xa7,
	0x05, 0xb1, 0xa7, 0xbc, 0xf7, 0xbd, 0xf7, 0x66, 0x9e, 0xdf, 0xfb, 0xbe, 0x51, 0x88, 0x17, 0x8b,
	0xe5, 0x14, 0x36, 0x19, 0x57, 0xd3, 0x84, 0x03, 0x8b, 0x18, 0xb0, 0x49, 0x96, 0x4b, 0x90, 0xd4,
	0x46, 0xf4, 0xe8, 0x50, 0x27, 0x84, 0x32, 0x49, 0x64, 0x3a, 0x5d, 0x32, 0xc5, 0x4d, 0xb4, 0x06,
	0xef, 0x8a, 0x8e, 0x9e, 0xe7, 0x3c, 0x93, 0x6a, 0x8a, 0xce, 0xb2, 0x78, 0x33, 0x5d, 0xc9, 0x95,
	0x44, 0x07, 0x2d, 0x93, 0x34, 0xfa, 0xa3, 0x45, 0xc8, 0x77, 0xe5, 0x65, 0x97, 0x67, 0xf4, 0x19,
	0x71, 0x45, 0xc4, 0x53, 0x10, 0xb0, 0x09, 0x44, 0xe4, 0x59, 0x43, 0x6b, 0xec, 0xf8, 0xa4, 0x82,
	0x16, 0x11, 0xfd, 0x80, 0x74, 0x52, 0x19, 0x71, 0x1d, 0x6c, 0x60, 0xb0, 0xad, 0xdd, 0x45, 0x44,
	0x8f, 0x89, 0x83, 0x81, 0x94, 0x25, 0xdc, 0x6b, 0x62, 0xa8, 0xab, 0x81, 0xef, 0x59, 0xc2, 0x75,
	0x95, 0xbe, 0x40, 0x57, 0xb5, 0x4c, 0x95, 0x76, 0x17, 0x11, 0x3d, 0x25, 0x2e, 0x06, 0x14, 0x30,
	0x28, 0x94, 0x67, 0x0f, 0xad, 0xf1, 0x60, 0xe6, 0x4d, 0x58, 0x26, 0x26, 0x55, 0xdf, 0x93, 0x0b,
	0x06, 0xec, 0x0a, 0xe3, 0x3e, 0x89, 0xb6, 0xb6, 0xbe, 0x50, 0xe6, 0x62, 0x25, 0x52, 0x7d, 0x6a,
	0xdb, 0x5c, 0x68, 0x80, 0x45, 0x44, 0x3f, 0x26, 0x04, 0xd8, 0x32, 0x2e, 0xdb, 0xe9, 0x60, 0xd4,
	0x41, 0x04, 0xfb, 0x39, 0x26, 0xce, 0x1b, 0x11, 0xf3, 0x20, 0x63, 0xb0, 0xf6, 0xba, 0xa6, 0x56,
	0x03, 0x97, 0x0c, 0xd6, 0x94, 0x92, 0x56, 0xc4, 0x55, 0xe8, 0x39, 0x88, 0xa3, 0xad, 0xb1, 0x5c,
	0xde, 0x28, 0x8f, 0x0c, 0xad, 0x71, 0xdf, 0x47, 0x9b, 0x7a, 0xa4, 0x13, 0xca, 0xb8, 0x48, 0x52,
	0xe5, 0xb9, 0x08, 0x57, 0xae, 0xce, 0x56, 0xe2, 0x1d, 0xf7, 0x7a, 0x43, 0x6b, 0xdc, 0xf2, 0xd1,
	0xa6, 0xa7, 0xe5, 0x95, 0x7a, 0x93, 0x5e, 0x1f, 0xbf, 0xf3, 0xa3, 0xfa, 0x77, 0xbe, 0xc2, 0xe6,
	0x5f, 0x8a, 0x98, 0x5f, 0x6f, 0x32, 0x6e, 0x1a, 0xd2, 0x16, 0xfd, 0x8a, 0xd8, 0x7a, 0x3e, 0xdc,
	0x1b, 0x60, 0xd9, 0x71, 0xbd, 0xac, 0xda, 0x9e, 0x1e, 0x0b, 0xf7, 0x4d, 0xa6, 0xfe, 0xc0, 0x35,
	0x53, 0x01, 0x08, 0x88, 0xb9, 0xf7, 0x68, 0x68, 0x8d, 0xbb, 0x7e, 0x77, 0xcd, 0xd4, 0xb5, 0xf6,
	0xe9, 0x37, 0xe4, 0xa0, 0xe2, 0x57, 0x50, 0x7d, 0xc1, 0xc1, 0xb0, 0x39, 0x76, 0x67, 0x87, 0x13,
	0x24, 0xda, 0xf6, 0xcc, 0x73, 0x8c, 0xfa, 0x8f, 0x92, 0x9a, 0xaf, 0xe8, 0x11, 0xe9, 0x8a, 0x34,
	0x2a, 0x14, 0xe4, 0x1b, 0xef, 0xb1, 0x19, 0x5f, 0xe5, 0x8f, 0x7e, 0xb6, 0xc8, 0xa0, 0x5e, 0xaf,
	0xd7, 0x1f, 0x06, 0x22, 0x8d, 0xf8, 0x8f, 0xc8, 0xa8, 0xbe, 0xdf, 0x0e, 0x17, 0xda, 0xa3, 0x87,
	0xa4, 0x1d, 0x9a, 0x15, 0x19, 0x32, 0xd9, 0x21, 0xae, 0x07, 0x61, 0x1c, 0x54, 0xb3, 0x84, 0x71,
	0x0e, 0x08, 0xe3, 0x60, 0x5b, 0x78, 0x8a, 0x1d, 0x5e, 0xe9, 0xc9, 0x1e, 0x13, 0x27, 0x0c, 0x34,
	0xfd, 0x79, 0x0a, 0xc8, 0x20, 0xc7, 0xef, 0x86, 0xe7, 0xc6, 0x1f, 0xfd, 0xd5, 0x20, 0xbd, 0x79,
	0x01, 0x6b, 0x9f, 0x87, 0x32, 0x8f, 0x2e, 0xcf, 0xe8, 0xa7, 0x64, 0xc0, 0x0a, 0x58, 0x07, 0x39,
	0x02, 0x3b, 0x92, 0xf7, 0xd8, 0x36, 0x6b, 0x11, 0xe9, 0x0d, 0x16, 0x8a, 0xe7, 0x65, 0x5b, 0x68,
	0xd3, 0x17, 0xc4, 0xd1, 0xbf, 0xbb, 0xc6, 0x06, 0xb3, 0xa7, 0xf5, 0x55, 0xbc, 0x56, 0x3c, 0x37,
	0xbb, 0x2b, 0x4a, 0x6b, 0x4b, 0x70, 0x73, 0x1d, 0x36, 0xee, 0xce, 0xbc, 0xbd, 0x31, 0xeb, 0x06,
	0x65, 0x2e, 0x60, 0x63, 0x08, 0x6e, 0xba, 0xa0, 0x17, 0xa4, 0xc7, 0x8a, 0x48, 0x40, 0x90, 0x73,
	0x55, 0xc4, 0x50, 0x8a, 0xe3, 0x93, 0xfa, 0x95, 0x73, 0x9d, 0x51, 0x9d, 0xf3, 0x2a, 0x03, 0x21,
	0x53, 0xdf, 0xc5, 0x32, 0x1f, 0xab, 0xe8, 0x73, 0xd2, 0x37, 0xa7, 0xa8, 0x62, 0xb5, 0xe2, 0x0a,
	0x4a, 0xa9, 0x98, 0xa3, 0xaf, 0x0c, 0x46, 0x3f, 0x24, 0x5d, 0x96, 0x65, 0xf1, 0x26, 0x60, 0x80,
	0x62, 0x69, 0xf9, 0x1d, 0xf4, 0xe7, 0x26, 0x84, 0xf5, 0x0c, 0x50, 0x29, 0x3a, 0xa4, 0xfd, 0x39,
	0x8c, 0x7e, 0x6a, 0x92, 0x47, 0x5b, 0xf6, 0x15, 0x49, 0xc2, 0xf2, 0x8d, 0x7e, 0x40, 0xb6, 0xdc,
	0xda, 0x3d, 0x20, 0x15, 0x64, 0xde, 0x89, 0x9d, 0x6c, 0x1b, 0xff, 0x29, 0xdb, 0xe6, 0xbe, 0x6c,
	0x2b, 0x65, 0xb6, 0xee, 0x28, 0xb3, 0x26, 0x65, 0xfb, 0xbe, 0x94, 0x51, 0xb6, 0xed, 0x87, 0x65,
	0xdb, 0x79, 0x58, 0xb6, 0xdd, 0x7f, 0x93, 0xad, 0xf3, 0x5e, 0xb2, 0xad, 0x69, 0x90, 0xec, 0x69,
	0xf0, 0xae, 0x82, 0xdc, 0xba, 0x82, 0x76, 0x7a, 0xef, 0xfd, 0x5f, 0xbd, 0x8f, 0x7e, 0xbb, 0x23,
	0xba, 0x0b, 0x0e, 0x4c, 0xc4, 0x74, 0x7e, 0x47, 0xe5, 0xca, 0x6c, 0x07, 0xd7, 0xe1, 0xce, 0x9e,
	0xee, 0xd1, 0xaf, 0xdc, 0xdd, 0x4e, 0xe6, 0xd5, 0x32, 0x1f, 0x7a, 0x28, 0x1a, 0xef, 0xf5, 0x50,
	0x8c, 0xc9, 0x01, 0x48, 0x60, 0x71, 0x00, 0x4c, 0xbd, 0x0d, 0x42, 0x59, 0xa4, 0x80, 0x6b, 0xed,
	0xfb, 0x03, 0xc4, 0xaf, 0x99, 0x7a, 0x7b, 0xae, 0xd1, 0xd1, 0xaf, 0x16, 0xe9, 0x57, 0xa7, 0xbd,
	0x56, 0x6c, 0xc5, 0xe9, 0xd7, 0x84, 0x14, 0xda, 0x30, 0xb3, 0xb7, 0x70, 0x16, 0xcf, 0x1e, 0x9e,
	0x05, 0x16, 0xe0, 0xf8, 0x9d, 0xa2, 0x32, 0x35, 0x73, 0x15, 0xb0, 0x1c, 0x99, 0xdb, 0x30, 0xcc,
	0x45, 0x7f, 0x0e, 0xfa, 0x25, 0xe1, 0x69, 0xa4, 0x03, 0x4d, 0x0c, 0xd8, 0x3c, 0x8d, 0xe6, 0x40,
	0x9f, 0x10, 0x1b, 0x44, 0xc2, 0x55, 0xf5, 0xbe, 0xa0, 0x33, 0xfa, 0xc5, 0x22, 0x8f, 0xef, 0x29,
	0x95, 0x7e, 0x49, 0x6c, 0x79, 0x93, 0xf2, 0xbc, 0x9c, 0xe9, 0xd1, 0x3e, 0x29, 0x56, 0x2c, 0x15,
	0xef, 0x18, 0xea, 0xd1, 0x24, 0xee, 0x4b, 0xa3, 0x71, 0x4f, 0x1a, 0x9f, 0x11, 0x1b, 0xbb, 0xc7,
	0xa6, 0xdc, 0xd9, 0x93, 0xbd, 0x19, 0xe3, 0x47, 0xfa, 0x26, 0xe5, 0xec, 0xf4, 0xf7, 0xdb, 0x13,
	0xeb, 0xcf, 0xdb, 0x13, 0xeb, 0xef, 0xdb, 0x13, 0xeb, 0x87, 0xcf, 0x57, 0x02, 0xd6, 0xc5, 0x72,
	0x12, 0xca, 0x64, 0xea, 0x4b, 0xc5, 0x01, 0xd8, 0xcb, 0x58, 0xde, 0x4c, 0xcf, 0x59, 0x9e, 0x0b,
	0x9e, 0x7f, 0xf1, 0xad, 0x9c, 0x6e, 0xff, 0x5b, 0x2c, 0xdb, 0xd8, 0xe5, 0x8b, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x4e, 0x11, 0xb7, 0x66, 0x6f, 0x08, 0x00, 0x00,
}

func (m *MetadataPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Industry) > 0 {
		i -= len(m.Industry)
		copy(dAtA[i:], m.Industry)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Industry)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.MetadataColumns) > 0 {
		for iNdEx := len(m.MetadataColumns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataColumns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.HasTitle {
		i--
		if m.HasTitle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.State != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x70
	}
	if m.FileType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x68
	}
	if m.Size_ != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x60
	}
	if m.Columns != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Columns))
		i--
		dAtA[i] = 0x58
	}
	if m.Rows != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OriginId) > 0 {
		i -= len(m.OriginId)
		copy(dAtA[i:], m.OriginId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.OriginId)))
		i--
		dAtA[i] = 0x32
	}
	if m.DataStatus != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DataStatus))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CComment) > 0 {
		i -= len(m.CComment)
		copy(dAtA[i:], m.CComment)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.CComment)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CSize != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.CSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CType) > 0 {
		i -= len(m.CType)
		copy(dAtA[i:], m.CType)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.CType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CName) > 0 {
		i -= len(m.CName)
		copy(dAtA[i:], m.CName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.CName)))
		i--
		dAtA[i] = 0x12
	}
	if m.CIndex != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.CIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthRecordPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthRecordPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthRecordPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AuditAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.AuditAt))
		i--
		dAtA[i] = 0x40
	}
	if m.ApplyAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ApplyAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AuditSuggest) > 0 {
		i -= len(m.AuditSuggest)
		copy(dAtA[i:], m.AuditSuggest)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AuditSuggest)))
		i--
		dAtA[i] = 0x32
	}
	if m.AuditResult != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.AuditResult))
		i--
		dAtA[i] = 0x28
	}
	if m.DataRecord != nil {
		{
			size, err := m.DataRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthRecordId) > 0 {
		i -= len(m.AuthRecordId)
		copy(dAtA[i:], m.AuthRecordId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AuthRecordId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Industry) > 0 {
		i -= len(m.Industry)
		copy(dAtA[i:], m.Industry)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Industry)))
		i--
		dAtA[i] = 0x5a
	}
	if m.HasTitle {
		i--
		if m.HasTitle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.FileType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x48
	}
	if m.Size_ != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x40
	}
	if m.Columns != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Columns))
		i--
		dAtA[i] = 0x38
	}
	if m.Rows != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginId) > 0 {
		i -= len(m.OriginId)
		copy(dAtA[i:], m.OriginId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.OriginId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetadataId) > 0 {
		i -= len(m.MetadataId)
		copy(dAtA[i:], m.MetadataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalTaskCount != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.TotalTaskCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MetadataColumns) > 0 {
		for iNdEx := len(m.MetadataColumns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataColumns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetadata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MetadataSummary != nil {
		{
			size, err := m.MetadataSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Times != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x20
	}
	if m.EndAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x18
	}
	if m.StartAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x10
	}
	if m.UsageType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UsageType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MetadataAuthority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataAuthority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataAuthority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Usage != nil {
		{
			size, err := m.Usage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetadataId) > 0 {
		i -= len(m.MetadataId)
		copy(dAtA[i:], m.MetadataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetadataPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.DataStatus != 0 {
		n += 1 + sovMetadata(uint64(m.DataStatus))
	}
	l = len(m.OriginId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Rows != 0 {
		n += 1 + sovMetadata(uint64(m.Rows))
	}
	if m.Columns != 0 {
		n += 1 + sovMetadata(uint64(m.Columns))
	}
	if m.Size_ != 0 {
		n += 1 + sovMetadata(uint64(m.Size_))
	}
	if m.FileType != 0 {
		n += 1 + sovMetadata(uint64(m.FileType))
	}
	if m.State != 0 {
		n += 1 + sovMetadata(uint64(m.State))
	}
	if m.HasTitle {
		n += 2
	}
	if len(m.MetadataColumns) > 0 {
		for _, e := range m.MetadataColumns {
			l = e.Size()
			n += 2 + l + sovMetadata(uint64(l))
		}
	}
	l = len(m.Industry)
	if l > 0 {
		n += 2 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CIndex != 0 {
		n += 1 + sovMetadata(uint64(m.CIndex))
	}
	l = len(m.CName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.CType)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.CSize != 0 {
		n += 1 + sovMetadata(uint64(m.CSize))
	}
	l = len(m.CComment)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthRecordPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthRecordId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovMetadata(uint64(m.UserType))
	}
	if m.DataRecord != nil {
		l = m.DataRecord.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.AuditResult != 0 {
		n += 1 + sovMetadata(uint64(m.AuditResult))
	}
	l = len(m.AuditSuggest)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.ApplyAt != 0 {
		n += 1 + sovMetadata(uint64(m.ApplyAt))
	}
	if m.AuditAt != 0 {
		n += 1 + sovMetadata(uint64(m.AuditAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.OriginId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Rows != 0 {
		n += 1 + sovMetadata(uint64(m.Rows))
	}
	if m.Columns != 0 {
		n += 1 + sovMetadata(uint64(m.Columns))
	}
	if m.Size_ != 0 {
		n += 1 + sovMetadata(uint64(m.Size_))
	}
	if m.FileType != 0 {
		n += 1 + sovMetadata(uint64(m.FileType))
	}
	if m.HasTitle {
		n += 2
	}
	l = len(m.Industry)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMetadata(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetadataSummary != nil {
		l = m.MetadataSummary.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.MetadataColumns) > 0 {
		for _, e := range m.MetadataColumns {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.TotalTaskCount != 0 {
		n += 1 + sovMetadata(uint64(m.TotalTaskCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsageType != 0 {
		n += 1 + sovMetadata(uint64(m.UsageType))
	}
	if m.StartAt != 0 {
		n += 1 + sovMetadata(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovMetadata(uint64(m.EndAt))
	}
	if m.Times != 0 {
		n += 1 + sovMetadata(uint64(m.Times))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataAuthority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.MetadataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetadataPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStatus", wireType)
			}
			m.DataStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataStatus |= common.DataStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			m.Columns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Columns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= common.OriginFileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= common.MetadataState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTitle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasTitle = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataColumns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataColumns = append(m.MetadataColumns, &MetadataColumn{})
			if err := m.MetadataColumns[len(m.MetadataColumns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Industry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Industry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CIndex", wireType)
			}
			m.CIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CSize", wireType)
			}
			m.CSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CComment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CComment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthRecordPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthRecordPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthRecordPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRecordId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthRecordId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= common.UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataRecord == nil {
				m.DataRecord = &MetadataAuthority{}
			}
			if err := m.DataRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditResult", wireType)
			}
			m.AuditResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuditResult |= common.AuditMetadataOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditSuggest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditSuggest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyAt", wireType)
			}
			m.ApplyAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditAt", wireType)
			}
			m.AuditAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuditAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			m.Columns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Columns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= common.OriginFileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTitle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasTitle = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Industry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Industry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= common.MetadataState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetadataSummary == nil {
				m.MetadataSummary = &MetadataSummary{}
			}
			if err := m.MetadataSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataColumns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataColumns = append(m.MetadataColumns, &MetadataColumn{})
			if err := m.MetadataColumns[len(m.MetadataColumns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTaskCount", wireType)
			}
			m.TotalTaskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTaskCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageType", wireType)
			}
			m.UsageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageType |= common.MetadataUsageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataAuthority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataAuthority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataAuthority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &common.Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &MetadataUsage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
