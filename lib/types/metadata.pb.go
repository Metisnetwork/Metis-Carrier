// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/types/metadata.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// todo 定义 metadata_type 枚举
// todo 是否支持 algo_metadata ?  待定
// todo 是否支持 module_metadata ? yes
// todo 是否支持 serving_metadata ? 可能不支持
// Metadata body data struct.
type MetadataPB struct {
	MetadataId           string           `protobuf:"bytes,1,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	Owner                *Organization    `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	DataId               string           `protobuf:"bytes,3,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	DataStatus           DataStatus       `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=types.DataStatus" json:"data_status,omitempty"`
	MetadataName         string           `protobuf:"bytes,5,opt,name=metadata_name,json=metadataName,proto3" json:"metadata_name,omitempty"`
	MetadataType         MetadataType     `protobuf:"varint,6,opt,name=metadata_type,json=metadataType,proto3,enum=types.MetadataType" json:"metadata_type,omitempty"`
	DataHash             string           `protobuf:"bytes,7,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	Desc                 string           `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
	LocationType         DataLocationType `protobuf:"varint,9,opt,name=location_type,json=locationType,proto3,enum=types.DataLocationType" json:"location_type,omitempty"`
	DataType             OrigindataType   `protobuf:"varint,10,opt,name=data_type,json=dataType,proto3,enum=types.OrigindataType" json:"data_type,omitempty"`
	Industry             string           `protobuf:"bytes,11,opt,name=industry,proto3" json:"industry,omitempty"`
	State                MetadataState    `protobuf:"varint,12,opt,name=state,proto3,enum=types.MetadataState" json:"state,omitempty"`
	PublishAt            uint64           `protobuf:"varint,13,opt,name=publish_at,json=publishAt,proto3" json:"publish_at,omitempty"`
	UpdateAt             uint64           `protobuf:"varint,14,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Nonce                uint64           `protobuf:"varint,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MetadataOption       string           `protobuf:"bytes,16,opt,name=metadata_option,json=metadataOption,proto3" json:"metadata_option,omitempty"`
	AllowExpose          bool             `protobuf:"varint,17,opt,name=allow_expose,json=allowExpose,proto3" json:"allow_expose,omitempty"`
	TokenAddress         string           `protobuf:"bytes,18,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MetadataPB) Reset()         { *m = MetadataPB{} }
func (m *MetadataPB) String() string { return proto.CompactTextString(m) }
func (*MetadataPB) ProtoMessage()    {}
func (*MetadataPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{0}
}
func (m *MetadataPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataPB.Merge(m, src)
}
func (m *MetadataPB) XXX_Size() int {
	return m.Size()
}
func (m *MetadataPB) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataPB.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataPB proto.InternalMessageInfo

func (m *MetadataPB) GetMetadataId() string {
	if m != nil {
		return m.MetadataId
	}
	return ""
}

func (m *MetadataPB) GetOwner() *Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MetadataPB) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *MetadataPB) GetDataStatus() DataStatus {
	if m != nil {
		return m.DataStatus
	}
	return DataStatus_DataStatus_Unknown
}

func (m *MetadataPB) GetMetadataName() string {
	if m != nil {
		return m.MetadataName
	}
	return ""
}

func (m *MetadataPB) GetMetadataType() MetadataType {
	if m != nil {
		return m.MetadataType
	}
	return MetadataType_MetadataType_Unknown
}

func (m *MetadataPB) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *MetadataPB) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MetadataPB) GetLocationType() DataLocationType {
	if m != nil {
		return m.LocationType
	}
	return DataLocationType_DataLocationType_Unknown
}

func (m *MetadataPB) GetDataType() OrigindataType {
	if m != nil {
		return m.DataType
	}
	return OrigindataType_OrigindataType_Unknown
}

func (m *MetadataPB) GetIndustry() string {
	if m != nil {
		return m.Industry
	}
	return ""
}

func (m *MetadataPB) GetState() MetadataState {
	if m != nil {
		return m.State
	}
	return MetadataState_MetadataState_Unknown
}

func (m *MetadataPB) GetPublishAt() uint64 {
	if m != nil {
		return m.PublishAt
	}
	return 0
}

func (m *MetadataPB) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *MetadataPB) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MetadataPB) GetMetadataOption() string {
	if m != nil {
		return m.MetadataOption
	}
	return ""
}

func (m *MetadataPB) GetAllowExpose() bool {
	if m != nil {
		return m.AllowExpose
	}
	return false
}

func (m *MetadataPB) GetTokenAddress() string {
	if m != nil {
		return m.TokenAddress
	}
	return ""
}

// 元数据申请记录实体
type MetadataAuthorityPB struct {
	MetadataAuthId       string                 `protobuf:"bytes,1,opt,name=metadata_auth_id,json=metadataAuthId,proto3" json:"metadata_auth_id,omitempty"`
	User                 string                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	DataId               string                 `protobuf:"bytes,3,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	DataStatus           DataStatus             `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=types.DataStatus" json:"data_status,omitempty"`
	UserType             UserType               `protobuf:"varint,5,opt,name=user_type,json=userType,proto3,enum=types.UserType" json:"user_type,omitempty"`
	Auth                 *MetadataAuthority     `protobuf:"bytes,6,opt,name=auth,proto3" json:"auth,omitempty"`
	AuditOption          AuditMetadataOption    `protobuf:"varint,7,opt,name=audit_option,json=auditOption,proto3,enum=types.AuditMetadataOption" json:"audit_option,omitempty"`
	AuditSuggestion      string                 `protobuf:"bytes,8,opt,name=audit_suggestion,json=auditSuggestion,proto3" json:"audit_suggestion,omitempty"`
	UsedQuo              *MetadataUsedQuo       `protobuf:"bytes,9,opt,name=used_quo,json=usedQuo,proto3" json:"used_quo,omitempty"`
	ApplyAt              uint64                 `protobuf:"varint,10,opt,name=apply_at,json=applyAt,proto3" json:"apply_at,omitempty"`
	AuditAt              uint64                 `protobuf:"varint,11,opt,name=audit_at,json=auditAt,proto3" json:"audit_at,omitempty"`
	State                MetadataAuthorityState `protobuf:"varint,12,opt,name=state,proto3,enum=types.MetadataAuthorityState" json:"state,omitempty"`
	Sign                 []byte                 `protobuf:"bytes,13,opt,name=sign,proto3" json:"sign,omitempty"`
	PublishAt            uint64                 `protobuf:"varint,14,opt,name=publish_at,json=publishAt,proto3" json:"publish_at,omitempty"`
	UpdateAt             uint64                 `protobuf:"varint,15,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Nonce                uint64                 `protobuf:"varint,16,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MetadataAuthorityPB) Reset()         { *m = MetadataAuthorityPB{} }
func (m *MetadataAuthorityPB) String() string { return proto.CompactTextString(m) }
func (*MetadataAuthorityPB) ProtoMessage()    {}
func (*MetadataAuthorityPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{1}
}
func (m *MetadataAuthorityPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataAuthorityPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataAuthorityPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataAuthorityPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataAuthorityPB.Merge(m, src)
}
func (m *MetadataAuthorityPB) XXX_Size() int {
	return m.Size()
}
func (m *MetadataAuthorityPB) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataAuthorityPB.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataAuthorityPB proto.InternalMessageInfo

func (m *MetadataAuthorityPB) GetMetadataAuthId() string {
	if m != nil {
		return m.MetadataAuthId
	}
	return ""
}

func (m *MetadataAuthorityPB) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MetadataAuthorityPB) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *MetadataAuthorityPB) GetDataStatus() DataStatus {
	if m != nil {
		return m.DataStatus
	}
	return DataStatus_DataStatus_Unknown
}

func (m *MetadataAuthorityPB) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_User_Unknown
}

func (m *MetadataAuthorityPB) GetAuth() *MetadataAuthority {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *MetadataAuthorityPB) GetAuditOption() AuditMetadataOption {
	if m != nil {
		return m.AuditOption
	}
	return AuditMetadataOption_Audit_Pending
}

func (m *MetadataAuthorityPB) GetAuditSuggestion() string {
	if m != nil {
		return m.AuditSuggestion
	}
	return ""
}

func (m *MetadataAuthorityPB) GetUsedQuo() *MetadataUsedQuo {
	if m != nil {
		return m.UsedQuo
	}
	return nil
}

func (m *MetadataAuthorityPB) GetApplyAt() uint64 {
	if m != nil {
		return m.ApplyAt
	}
	return 0
}

func (m *MetadataAuthorityPB) GetAuditAt() uint64 {
	if m != nil {
		return m.AuditAt
	}
	return 0
}

func (m *MetadataAuthorityPB) GetState() MetadataAuthorityState {
	if m != nil {
		return m.State
	}
	return MetadataAuthorityState_MAState_Unknown
}

func (m *MetadataAuthorityPB) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *MetadataAuthorityPB) GetPublishAt() uint64 {
	if m != nil {
		return m.PublishAt
	}
	return 0
}

func (m *MetadataAuthorityPB) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *MetadataAuthorityPB) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// =============================== For API =========================
// 元数据的摘要内容 (不包含详细 列描述)
type MetadataSummary struct {
	MetadataId           string           `protobuf:"bytes,1,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	MetadataName         string           `protobuf:"bytes,2,opt,name=metadata_name,json=metadataName,proto3" json:"metadata_name,omitempty"`
	MetadataType         MetadataType     `protobuf:"varint,3,opt,name=metadata_type,json=metadataType,proto3,enum=types.MetadataType" json:"metadata_type,omitempty"`
	DataHash             string           `protobuf:"bytes,4,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	Desc                 string           `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	LocationType         DataLocationType `protobuf:"varint,6,opt,name=location_type,json=locationType,proto3,enum=types.DataLocationType" json:"location_type,omitempty"`
	DataType             OrigindataType   `protobuf:"varint,7,opt,name=data_type,json=dataType,proto3,enum=types.OrigindataType" json:"data_type,omitempty"`
	Industry             string           `protobuf:"bytes,8,opt,name=industry,proto3" json:"industry,omitempty"`
	State                MetadataState    `protobuf:"varint,9,opt,name=state,proto3,enum=types.MetadataState" json:"state,omitempty"`
	PublishAt            uint64           `protobuf:"varint,10,opt,name=publish_at,json=publishAt,proto3" json:"publish_at,omitempty"`
	UpdateAt             uint64           `protobuf:"varint,11,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Nonce                uint64           `protobuf:"varint,12,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MetadataOption       string           `protobuf:"bytes,13,opt,name=metadata_option,json=metadataOption,proto3" json:"metadata_option,omitempty"`
	AllowExpose          bool             `protobuf:"varint,14,opt,name=allow_expose,json=allowExpose,proto3" json:"allow_expose,omitempty"`
	TokenAddress         string           `protobuf:"bytes,15,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MetadataSummary) Reset()         { *m = MetadataSummary{} }
func (m *MetadataSummary) String() string { return proto.CompactTextString(m) }
func (*MetadataSummary) ProtoMessage()    {}
func (*MetadataSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{2}
}
func (m *MetadataSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataSummary.Merge(m, src)
}
func (m *MetadataSummary) XXX_Size() int {
	return m.Size()
}
func (m *MetadataSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataSummary.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataSummary proto.InternalMessageInfo

func (m *MetadataSummary) GetMetadataId() string {
	if m != nil {
		return m.MetadataId
	}
	return ""
}

func (m *MetadataSummary) GetMetadataName() string {
	if m != nil {
		return m.MetadataName
	}
	return ""
}

func (m *MetadataSummary) GetMetadataType() MetadataType {
	if m != nil {
		return m.MetadataType
	}
	return MetadataType_MetadataType_Unknown
}

func (m *MetadataSummary) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *MetadataSummary) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MetadataSummary) GetLocationType() DataLocationType {
	if m != nil {
		return m.LocationType
	}
	return DataLocationType_DataLocationType_Unknown
}

func (m *MetadataSummary) GetDataType() OrigindataType {
	if m != nil {
		return m.DataType
	}
	return OrigindataType_OrigindataType_Unknown
}

func (m *MetadataSummary) GetIndustry() string {
	if m != nil {
		return m.Industry
	}
	return ""
}

func (m *MetadataSummary) GetState() MetadataState {
	if m != nil {
		return m.State
	}
	return MetadataState_MetadataState_Unknown
}

func (m *MetadataSummary) GetPublishAt() uint64 {
	if m != nil {
		return m.PublishAt
	}
	return 0
}

func (m *MetadataSummary) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *MetadataSummary) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MetadataSummary) GetMetadataOption() string {
	if m != nil {
		return m.MetadataOption
	}
	return ""
}

func (m *MetadataSummary) GetAllowExpose() bool {
	if m != nil {
		return m.AllowExpose
	}
	return false
}

func (m *MetadataSummary) GetTokenAddress() string {
	if m != nil {
		return m.TokenAddress
	}
	return ""
}

// 元数据的详情信息
type MetadataDetail struct {
	MetadataSummary      *MetadataSummary `protobuf:"bytes,1,opt,name=metadata_summary,json=metadataSummary,proto3" json:"metadata_summary,omitempty"`
	TotalTaskCount       uint32           `protobuf:"varint,3,opt,name=total_task_count,json=totalTaskCount,proto3" json:"total_task_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MetadataDetail) Reset()         { *m = MetadataDetail{} }
func (m *MetadataDetail) String() string { return proto.CompactTextString(m) }
func (*MetadataDetail) ProtoMessage()    {}
func (*MetadataDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{3}
}
func (m *MetadataDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataDetail.Merge(m, src)
}
func (m *MetadataDetail) XXX_Size() int {
	return m.Size()
}
func (m *MetadataDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataDetail.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataDetail proto.InternalMessageInfo

func (m *MetadataDetail) GetMetadataSummary() *MetadataSummary {
	if m != nil {
		return m.MetadataSummary
	}
	return nil
}

func (m *MetadataDetail) GetTotalTaskCount() uint32 {
	if m != nil {
		return m.TotalTaskCount
	}
	return 0
}

// 元数据的使用方式定义
type MetadataUsageRule struct {
	UsageType            MetadataUsageType `protobuf:"varint,1,opt,name=usage_type,json=usageType,proto3,enum=types.MetadataUsageType" json:"usage_type,omitempty"`
	StartAt              uint64            `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt                uint64            `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Times                uint32            `protobuf:"varint,4,opt,name=times,proto3" json:"times,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetadataUsageRule) Reset()         { *m = MetadataUsageRule{} }
func (m *MetadataUsageRule) String() string { return proto.CompactTextString(m) }
func (*MetadataUsageRule) ProtoMessage()    {}
func (*MetadataUsageRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{4}
}
func (m *MetadataUsageRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataUsageRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataUsageRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataUsageRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataUsageRule.Merge(m, src)
}
func (m *MetadataUsageRule) XXX_Size() int {
	return m.Size()
}
func (m *MetadataUsageRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataUsageRule.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataUsageRule proto.InternalMessageInfo

func (m *MetadataUsageRule) GetUsageType() MetadataUsageType {
	if m != nil {
		return m.UsageType
	}
	return MetadataUsageType_Usage_Unknown
}

func (m *MetadataUsageRule) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *MetadataUsageRule) GetEndAt() uint64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *MetadataUsageRule) GetTimes() uint32 {
	if m != nil {
		return m.Times
	}
	return 0
}

// 元数据使用授权
type MetadataAuthority struct {
	Owner                *Organization      `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	MetadataId           string             `protobuf:"bytes,2,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	UsageRule            *MetadataUsageRule `protobuf:"bytes,3,opt,name=usage_rule,json=usageRule,proto3" json:"usage_rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MetadataAuthority) Reset()         { *m = MetadataAuthority{} }
func (m *MetadataAuthority) String() string { return proto.CompactTextString(m) }
func (*MetadataAuthority) ProtoMessage()    {}
func (*MetadataAuthority) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{5}
}
func (m *MetadataAuthority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataAuthority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataAuthority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataAuthority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataAuthority.Merge(m, src)
}
func (m *MetadataAuthority) XXX_Size() int {
	return m.Size()
}
func (m *MetadataAuthority) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataAuthority.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataAuthority proto.InternalMessageInfo

func (m *MetadataAuthority) GetOwner() *Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MetadataAuthority) GetMetadataId() string {
	if m != nil {
		return m.MetadataId
	}
	return ""
}

func (m *MetadataAuthority) GetUsageRule() *MetadataUsageRule {
	if m != nil {
		return m.UsageRule
	}
	return nil
}

// 对应授权信息中元数据的使用实况定义 (配合数据授权使用)
type MetadataUsedQuo struct {
	UsageType            MetadataUsageType `protobuf:"varint,1,opt,name=usage_type,json=usageType,proto3,enum=types.MetadataUsageType" json:"usage_type,omitempty"`
	Expire               bool              `protobuf:"varint,2,opt,name=expire,proto3" json:"expire,omitempty"`
	UsedTimes            uint32            `protobuf:"varint,3,opt,name=used_times,json=usedTimes,proto3" json:"used_times,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetadataUsedQuo) Reset()         { *m = MetadataUsedQuo{} }
func (m *MetadataUsedQuo) String() string { return proto.CompactTextString(m) }
func (*MetadataUsedQuo) ProtoMessage()    {}
func (*MetadataUsedQuo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{6}
}
func (m *MetadataUsedQuo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataUsedQuo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataUsedQuo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataUsedQuo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataUsedQuo.Merge(m, src)
}
func (m *MetadataUsedQuo) XXX_Size() int {
	return m.Size()
}
func (m *MetadataUsedQuo) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataUsedQuo.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataUsedQuo proto.InternalMessageInfo

func (m *MetadataUsedQuo) GetUsageType() MetadataUsageType {
	if m != nil {
		return m.UsageType
	}
	return MetadataUsageType_Usage_Unknown
}

func (m *MetadataUsedQuo) GetExpire() bool {
	if m != nil {
		return m.Expire
	}
	return false
}

func (m *MetadataUsedQuo) GetUsedTimes() uint32 {
	if m != nil {
		return m.UsedTimes
	}
	return 0
}

// 当前组织的某个用户对单个元数据的授权申请及审核结果详情
type MetadataAuthorityDetail struct {
	MetadataAuthId       string                 `protobuf:"bytes,1,opt,name=metadata_auth_id,json=metadataAuthId,proto3" json:"metadata_auth_id,omitempty"`
	User                 string                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	UserType             UserType               `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=types.UserType" json:"user_type,omitempty"`
	Auth                 *MetadataAuthority     `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	AuditOption          AuditMetadataOption    `protobuf:"varint,5,opt,name=audit_option,json=auditOption,proto3,enum=types.AuditMetadataOption" json:"audit_option,omitempty"`
	AuditSuggestion      string                 `protobuf:"bytes,6,opt,name=audit_suggestion,json=auditSuggestion,proto3" json:"audit_suggestion,omitempty"`
	UsedQuo              *MetadataUsedQuo       `protobuf:"bytes,7,opt,name=used_quo,json=usedQuo,proto3" json:"used_quo,omitempty"`
	ApplyAt              uint64                 `protobuf:"varint,8,opt,name=apply_at,json=applyAt,proto3" json:"apply_at,omitempty"`
	AuditAt              uint64                 `protobuf:"varint,9,opt,name=audit_at,json=auditAt,proto3" json:"audit_at,omitempty"`
	State                MetadataAuthorityState `protobuf:"varint,10,opt,name=state,proto3,enum=types.MetadataAuthorityState" json:"state,omitempty"`
	PublishAt            uint64                 `protobuf:"varint,11,opt,name=publish_at,json=publishAt,proto3" json:"publish_at,omitempty"`
	UpdateAt             uint64                 `protobuf:"varint,12,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Nonce                uint64                 `protobuf:"varint,13,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MetadataAuthorityDetail) Reset()         { *m = MetadataAuthorityDetail{} }
func (m *MetadataAuthorityDetail) String() string { return proto.CompactTextString(m) }
func (*MetadataAuthorityDetail) ProtoMessage()    {}
func (*MetadataAuthorityDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_33d0259ee189cec4, []int{7}
}
func (m *MetadataAuthorityDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataAuthorityDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataAuthorityDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataAuthorityDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataAuthorityDetail.Merge(m, src)
}
func (m *MetadataAuthorityDetail) XXX_Size() int {
	return m.Size()
}
func (m *MetadataAuthorityDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataAuthorityDetail.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataAuthorityDetail proto.InternalMessageInfo

func (m *MetadataAuthorityDetail) GetMetadataAuthId() string {
	if m != nil {
		return m.MetadataAuthId
	}
	return ""
}

func (m *MetadataAuthorityDetail) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MetadataAuthorityDetail) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_User_Unknown
}

func (m *MetadataAuthorityDetail) GetAuth() *MetadataAuthority {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *MetadataAuthorityDetail) GetAuditOption() AuditMetadataOption {
	if m != nil {
		return m.AuditOption
	}
	return AuditMetadataOption_Audit_Pending
}

func (m *MetadataAuthorityDetail) GetAuditSuggestion() string {
	if m != nil {
		return m.AuditSuggestion
	}
	return ""
}

func (m *MetadataAuthorityDetail) GetUsedQuo() *MetadataUsedQuo {
	if m != nil {
		return m.UsedQuo
	}
	return nil
}

func (m *MetadataAuthorityDetail) GetApplyAt() uint64 {
	if m != nil {
		return m.ApplyAt
	}
	return 0
}

func (m *MetadataAuthorityDetail) GetAuditAt() uint64 {
	if m != nil {
		return m.AuditAt
	}
	return 0
}

func (m *MetadataAuthorityDetail) GetState() MetadataAuthorityState {
	if m != nil {
		return m.State
	}
	return MetadataAuthorityState_MAState_Unknown
}

func (m *MetadataAuthorityDetail) GetPublishAt() uint64 {
	if m != nil {
		return m.PublishAt
	}
	return 0
}

func (m *MetadataAuthorityDetail) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *MetadataAuthorityDetail) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*MetadataPB)(nil), "types.MetadataPB")
	proto.RegisterType((*MetadataAuthorityPB)(nil), "types.MetadataAuthorityPB")
	proto.RegisterType((*MetadataSummary)(nil), "types.MetadataSummary")
	proto.RegisterType((*MetadataDetail)(nil), "types.MetadataDetail")
	proto.RegisterType((*MetadataUsageRule)(nil), "types.MetadataUsageRule")
	proto.RegisterType((*MetadataAuthority)(nil), "types.MetadataAuthority")
	proto.RegisterType((*MetadataUsedQuo)(nil), "types.MetadataUsedQuo")
	proto.RegisterType((*MetadataAuthorityDetail)(nil), "types.MetadataAuthorityDetail")
}

func init() { proto.RegisterFile("lib/types/metadata.proto", fileDescriptor_33d0259ee189cec4) }

var fileDescriptor_33d0259ee189cec4 = []byte{
	// 1035 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x92, 0xdb, 0xc4,
	0x13, 0x2f, 0xed, 0xca, 0xb6, 0xd4, 0xf2, 0xd7, 0x4e, 0x36, 0x59, 0xfd, 0xf7, 0x5f, 0x59, 0x8c,
	0x39, 0xe0, 0x50, 0x61, 0x5d, 0x38, 0x07, 0x38, 0x90, 0x83, 0x36, 0xa1, 0x8a, 0x54, 0xb1, 0x24,
	0x28, 0x9b, 0x0b, 0x17, 0xd7, 0xd8, 0x9a, 0xb2, 0x55, 0x2b, 0x4b, 0x42, 0x33, 0x53, 0x1b, 0x53,
	0xc5, 0x81, 0x07, 0xe0, 0xc6, 0x81, 0xe7, 0xe0, 0x05, 0xb8, 0x72, 0xe4, 0x11, 0xa8, 0x3d, 0xf2,
	0x14, 0xd4, 0xf4, 0x48, 0xf2, 0x57, 0xbc, 0x5f, 0xe1, 0x36, 0xdd, 0x3d, 0xd3, 0xea, 0x8f, 0x5f,
	0xff, 0x5a, 0xe0, 0x46, 0xe1, 0xa8, 0x2f, 0xe6, 0x29, 0xe3, 0xfd, 0x19, 0x13, 0x34, 0xa0, 0x82,
	0x1e, 0xa7, 0x59, 0x22, 0x12, 0x52, 0x41, 0xed, 0xe1, 0xfe, 0xe2, 0xc2, 0x88, 0x72, 0xa6, 0x8d,
	0xdd, 0xdf, 0x2b, 0x00, 0xa7, 0xf9, 0xfd, 0x57, 0x27, 0xe4, 0x03, 0x70, 0x8a, 0xd7, 0xc3, 0x30,
	0x70, 0x8d, 0x8e, 0xd1, 0xb3, 0x7d, 0x28, 0x54, 0x2f, 0x02, 0xf2, 0x08, 0x2a, 0xc9, 0x45, 0xcc,
	0x32, 0x77, 0xa7, 0x63, 0xf4, 0x9c, 0xc1, 0xbd, 0x63, 0xf4, 0x78, 0xfc, 0x32, 0x9b, 0xd0, 0x38,
	0xfc, 0x91, 0x8a, 0x30, 0x89, 0x7d, 0x7d, 0x83, 0x1c, 0x40, 0xad, 0xf0, 0xb3, 0x8b, 0x7e, 0xaa,
	0xb9, 0x8f, 0x01, 0x38, 0x68, 0xe0, 0x82, 0x0a, 0xc9, 0x5d, 0xb3, 0x63, 0xf4, 0x9a, 0x83, 0xbd,
	0xdc, 0xd3, 0x73, 0x2a, 0xe8, 0x6b, 0x34, 0xf8, 0x10, 0x94, 0x67, 0xf2, 0x11, 0x34, 0xca, 0xc0,
	0x62, 0x3a, 0x63, 0x6e, 0x05, 0x5d, 0xd6, 0x0b, 0xe5, 0xb7, 0x74, 0xc6, 0xc8, 0x17, 0x4b, 0x97,
	0x94, 0x37, 0xb7, 0x8a, 0xae, 0x8b, 0x20, 0x8b, 0x3c, 0xcf, 0xe6, 0x29, 0x5b, 0xbc, 0x54, 0x12,
	0xf9, 0x3f, 0xd8, 0xf8, 0x6a, 0x4a, 0xf9, 0xd4, 0xad, 0xa1, 0x6b, 0x4b, 0x29, 0xbe, 0xa6, 0x7c,
	0x4a, 0x08, 0x98, 0x01, 0xe3, 0x63, 0xd7, 0x42, 0x3d, 0x9e, 0xc9, 0x97, 0xd0, 0x88, 0x92, 0x31,
	0xe6, 0xab, 0x3f, 0x65, 0xe3, 0xa7, 0x0e, 0x96, 0xb2, 0xf8, 0x26, 0xb7, 0xeb, 0xcf, 0x45, 0x4b,
	0x12, 0x19, 0xe4, 0x9f, 0xc3, 0x97, 0x80, 0x2f, 0xef, 0x97, 0x95, 0x0c, 0x27, 0x61, 0x5c, 0x86,
	0x69, 0x95, 0x21, 0x1e, 0x82, 0x15, 0xc6, 0x81, 0xe4, 0x22, 0x9b, 0xbb, 0x8e, 0x8e, 0xb0, 0x90,
	0xc9, 0x27, 0x50, 0x51, 0xc5, 0x64, 0x6e, 0x1d, 0x7d, 0xed, 0xaf, 0x25, 0xac, 0x6a, 0xc8, 0x7c,
	0x7d, 0x85, 0x3c, 0x04, 0x48, 0xe5, 0x28, 0x0a, 0xf9, 0x74, 0x48, 0x85, 0xdb, 0xe8, 0x18, 0x3d,
	0xd3, 0xb7, 0x73, 0x8d, 0x27, 0x54, 0x25, 0x64, 0x1a, 0x50, 0xc1, 0x94, 0xb5, 0x89, 0x56, 0x4b,
	0x2b, 0x3c, 0x41, 0xf6, 0xa1, 0x12, 0x27, 0xf1, 0x98, 0xb9, 0x2d, 0x34, 0x68, 0x81, 0x7c, 0x0c,
	0xad, 0xb2, 0xec, 0x49, 0xaa, 0x92, 0x74, 0xdb, 0x18, 0x60, 0xb3, 0x50, 0xbf, 0x44, 0x2d, 0xf9,
	0x10, 0xea, 0x34, 0x8a, 0x92, 0x8b, 0x21, 0x7b, 0x9b, 0x26, 0x9c, 0xb9, 0x7b, 0x1d, 0xa3, 0x67,
	0xf9, 0x0e, 0xea, 0xbe, 0x42, 0x95, 0xea, 0xb3, 0x48, 0xce, 0x59, 0x3c, 0xa4, 0x41, 0x90, 0x31,
	0xce, 0x5d, 0xa2, 0xfb, 0x8c, 0x4a, 0x4f, 0xeb, 0xba, 0xff, 0x98, 0x70, 0xaf, 0xc8, 0xcd, 0x93,
	0x62, 0x9a, 0x64, 0xa1, 0x98, 0xbf, 0x3a, 0x21, 0x3d, 0x68, 0x97, 0x81, 0x50, 0x29, 0xa6, 0x0b,
	0x08, 0x97, 0x91, 0xa8, 0xeb, 0x2f, 0x02, 0xd5, 0x52, 0xc9, 0x73, 0x14, 0xdb, 0x3e, 0x9e, 0xff,
	0x5b, 0xbc, 0x3e, 0x06, 0x5b, 0x39, 0xd5, 0x1d, 0xae, 0xe0, 0x8b, 0x56, 0xfe, 0xe2, 0x0d, 0x67,
	0x99, 0xee, 0xad, 0xcc, 0x4f, 0xe4, 0x31, 0x98, 0x2a, 0x5e, 0xc4, 0xab, 0x33, 0x70, 0xd7, 0xda,
	0x57, 0xa6, 0xe8, 0xe3, 0x2d, 0xf2, 0x14, 0xea, 0x54, 0x06, 0xa1, 0x28, 0x8a, 0x5d, 0x43, 0xf7,
	0x87, 0xf9, 0x2b, 0x4f, 0x99, 0x4e, 0x57, 0x0a, 0xef, 0x3b, 0x78, 0x3f, 0xef, 0xc2, 0x23, 0x68,
	0xeb, 0xe7, 0x5c, 0x4e, 0x26, 0x8c, 0xa3, 0x0b, 0x0d, 0xed, 0x16, 0xea, 0x5f, 0x97, 0x6a, 0xf2,
	0x19, 0xa8, 0x18, 0x83, 0xe1, 0x0f, 0x32, 0x41, 0x80, 0x3b, 0x83, 0x07, 0x6b, 0xb1, 0xbd, 0xe1,
	0x2c, 0xf8, 0x4e, 0x26, 0x7e, 0x4d, 0xea, 0x03, 0xf9, 0x1f, 0x58, 0x34, 0x4d, 0xa3, 0xb9, 0x82,
	0x0f, 0x20, 0x4a, 0x6a, 0x28, 0x7b, 0x02, 0x4d, 0xf8, 0x61, 0x2a, 0x10, 0xc1, 0xca, 0xa4, 0x64,
	0x4f, 0x90, 0x27, 0xab, 0x00, 0x7e, 0xb8, 0xad, 0x02, 0x2b, 0x48, 0x26, 0x60, 0xf2, 0x70, 0x12,
	0x23, 0x86, 0xeb, 0x3e, 0x9e, 0xd7, 0xd0, 0xdd, 0xbc, 0x12, 0xdd, 0xad, 0x6d, 0xe8, 0x6e, 0x2f,
	0xa1, 0xbb, 0xfb, 0x87, 0x09, 0xad, 0x72, 0x90, 0xe4, 0x6c, 0x46, 0xb3, 0xf9, 0xf5, 0x34, 0xb9,
	0x41, 0x57, 0x3b, 0x37, 0xa1, 0xab, 0xdd, 0x3b, 0xd1, 0x95, 0xb9, 0x85, 0xae, 0x2a, 0x57, 0xd1,
	0x55, 0xf5, 0xce, 0x74, 0x55, 0xbb, 0x3d, 0x5d, 0x59, 0xdb, 0xe8, 0xca, 0xbe, 0x2d, 0x5d, 0xc1,
	0x95, 0x0d, 0x75, 0xb6, 0x35, 0xb4, 0x7e, 0x0d, 0x5d, 0x35, 0x6e, 0x44, 0x57, 0xcd, 0x1b, 0xd0,
	0x55, 0xeb, 0x1d, 0x74, 0xf5, 0x13, 0x34, 0x8b, 0xd4, 0x9e, 0x33, 0x41, 0xc3, 0x88, 0x78, 0x4b,
	0x44, 0xc5, 0x35, 0xa6, 0x10, 0x44, 0x9b, 0xf3, 0x95, 0x23, 0xce, 0x2f, 0x43, 0x2e, 0x20, 0xd8,
	0x83, 0xb6, 0x48, 0x04, 0x8d, 0x86, 0x82, 0xf2, 0xf3, 0xe1, 0x38, 0x91, 0xb1, 0x40, 0xfc, 0x34,
	0xfc, 0x26, 0xea, 0xcf, 0x28, 0x3f, 0x7f, 0xa6, 0xb4, 0xdd, 0x5f, 0x0d, 0xd8, 0x5b, 0x8c, 0x2b,
	0x9d, 0x30, 0x5f, 0x46, 0x8c, 0x7c, 0x0e, 0x20, 0x95, 0xa0, 0x9b, 0x6a, 0x60, 0x23, 0xdc, 0x8d,
	0xe1, 0xa6, 0x13, 0x86, 0x7d, 0xb5, 0x65, 0x71, 0x54, 0x53, 0xcc, 0x05, 0xcd, 0x70, 0x8a, 0x77,
	0xf4, 0x14, 0xa3, 0xec, 0x09, 0x72, 0x1f, 0xaa, 0x2c, 0x0e, 0x94, 0x61, 0x57, 0x17, 0x9c, 0xc5,
	0x81, 0x6e, 0x83, 0x08, 0x67, 0x4c, 0x33, 0x67, 0xc3, 0xd7, 0x42, 0xf7, 0xb7, 0xa5, 0xb0, 0xca,
	0xf9, 0x5e, 0xfc, 0x5f, 0x18, 0xd7, 0xfe, 0x5f, 0xac, 0x0d, 0xe1, 0xce, 0xc6, 0x10, 0x96, 0x29,
	0x66, 0x32, 0xd2, 0xc3, 0xe5, 0xbc, 0x3b, 0x45, 0x55, 0x90, 0x3c, 0x45, 0x75, 0xec, 0xfe, 0x6c,
	0x2c, 0x46, 0x3e, 0x27, 0xb8, 0xbb, 0xd7, 0xeb, 0x01, 0x54, 0xd9, 0xdb, 0x34, 0xcc, 0x34, 0x07,
	0x58, 0x7e, 0x2e, 0x29, 0x60, 0x23, 0xb7, 0xea, 0xd2, 0xe8, 0xd6, 0xa9, 0x9d, 0x11, 0x9c, 0x61,
	0x79, 0x7e, 0x31, 0xe1, 0x60, 0xa3, 0x3c, 0x39, 0x7c, 0xde, 0x6f, 0xcf, 0xad, 0xac, 0xa6, 0xdd,
	0x9b, 0xae, 0x26, 0xf3, 0x4e, 0xab, 0xa9, 0xf2, 0xfe, 0xab, 0xa9, 0x7a, 0xfd, 0x6a, 0xaa, 0xdd,
	0x7e, 0x35, 0x59, 0xdb, 0x57, 0x93, 0xbd, 0x65, 0x35, 0xc1, 0x2d, 0x56, 0xd3, 0x2a, 0x6b, 0x39,
	0x57, 0xb2, 0x56, 0x7d, 0x1b, 0x6b, 0x35, 0x96, 0x58, 0xeb, 0xe4, 0xe9, 0x9f, 0x97, 0x47, 0xc6,
	0x5f, 0x97, 0x47, 0xc6, 0xdf, 0x97, 0x47, 0xc6, 0xf7, 0xfd, 0x49, 0x28, 0xa6, 0x72, 0x74, 0x3c,
	0x4e, 0x66, 0xfd, 0x53, 0x26, 0x42, 0x1e, 0x33, 0x71, 0x91, 0x64, 0xe7, 0x5a, 0xf8, 0xf4, 0x19,
	0xcd, 0xb2, 0x90, 0x65, 0xfd, 0xf2, 0x97, 0x7f, 0x54, 0xc5, 0xdf, 0xfd, 0x27, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x30, 0x9f, 0x1d, 0x77, 0x27, 0x0c, 0x00, 0x00,
}

func (m *MetadataPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TokenAddress) > 0 {
		i -= len(m.TokenAddress)
		copy(dAtA[i:], m.TokenAddress)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.TokenAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.AllowExpose {
		i--
		if m.AllowExpose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.MetadataOption) > 0 {
		i -= len(m.MetadataOption)
		copy(dAtA[i:], m.MetadataOption)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataOption)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Nonce != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x78
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x70
	}
	if m.PublishAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.PublishAt))
		i--
		dAtA[i] = 0x68
	}
	if m.State != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Industry) > 0 {
		i -= len(m.Industry)
		copy(dAtA[i:], m.Industry)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Industry)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DataType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x50
	}
	if m.LocationType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.LocationType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MetadataType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.MetadataType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MetadataName) > 0 {
		i -= len(m.MetadataName)
		copy(dAtA[i:], m.MetadataName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DataStatus != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DataStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetadataId) > 0 {
		i -= len(m.MetadataId)
		copy(dAtA[i:], m.MetadataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataAuthorityPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataAuthorityPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataAuthorityPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nonce != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x78
	}
	if m.PublishAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.PublishAt))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x6a
	}
	if m.State != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x60
	}
	if m.AuditAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.AuditAt))
		i--
		dAtA[i] = 0x58
	}
	if m.ApplyAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ApplyAt))
		i--
		dAtA[i] = 0x50
	}
	if m.UsedQuo != nil {
		{
			size, err := m.UsedQuo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AuditSuggestion) > 0 {
		i -= len(m.AuditSuggestion)
		copy(dAtA[i:], m.AuditSuggestion)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AuditSuggestion)))
		i--
		dAtA[i] = 0x42
	}
	if m.AuditOption != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.AuditOption))
		i--
		dAtA[i] = 0x38
	}
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UserType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x28
	}
	if m.DataStatus != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DataStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetadataAuthId) > 0 {
		i -= len(m.MetadataAuthId)
		copy(dAtA[i:], m.MetadataAuthId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataAuthId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TokenAddress) > 0 {
		i -= len(m.TokenAddress)
		copy(dAtA[i:], m.TokenAddress)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.TokenAddress)))
		i--
		dAtA[i] = 0x7a
	}
	if m.AllowExpose {
		i--
		if m.AllowExpose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.MetadataOption) > 0 {
		i -= len(m.MetadataOption)
		copy(dAtA[i:], m.MetadataOption)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataOption)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Nonce != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x60
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x58
	}
	if m.PublishAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.PublishAt))
		i--
		dAtA[i] = 0x50
	}
	if m.State != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Industry) > 0 {
		i -= len(m.Industry)
		copy(dAtA[i:], m.Industry)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Industry)))
		i--
		dAtA[i] = 0x42
	}
	if m.DataType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x38
	}
	if m.LocationType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.LocationType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.MetadataType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.MetadataType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MetadataName) > 0 {
		i -= len(m.MetadataName)
		copy(dAtA[i:], m.MetadataName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetadataId) > 0 {
		i -= len(m.MetadataId)
		copy(dAtA[i:], m.MetadataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalTaskCount != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.TotalTaskCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MetadataSummary != nil {
		{
			size, err := m.MetadataSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataUsageRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataUsageRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataUsageRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Times != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x20
	}
	if m.EndAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x18
	}
	if m.StartAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x10
	}
	if m.UsageType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UsageType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MetadataAuthority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataAuthority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataAuthority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsageRule != nil {
		{
			size, err := m.UsageRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetadataId) > 0 {
		i -= len(m.MetadataId)
		copy(dAtA[i:], m.MetadataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataUsedQuo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataUsedQuo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataUsedQuo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsedTimes != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UsedTimes))
		i--
		dAtA[i] = 0x18
	}
	if m.Expire {
		i--
		if m.Expire {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.UsageType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UsageType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MetadataAuthorityDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataAuthorityDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataAuthorityDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nonce != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x68
	}
	if m.UpdateAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x60
	}
	if m.PublishAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.PublishAt))
		i--
		dAtA[i] = 0x58
	}
	if m.State != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x50
	}
	if m.AuditAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.AuditAt))
		i--
		dAtA[i] = 0x48
	}
	if m.ApplyAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.ApplyAt))
		i--
		dAtA[i] = 0x40
	}
	if m.UsedQuo != nil {
		{
			size, err := m.UsedQuo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AuditSuggestion) > 0 {
		i -= len(m.AuditSuggestion)
		copy(dAtA[i:], m.AuditSuggestion)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.AuditSuggestion)))
		i--
		dAtA[i] = 0x32
	}
	if m.AuditOption != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.AuditOption))
		i--
		dAtA[i] = 0x28
	}
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserType != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetadataAuthId) > 0 {
		i -= len(m.MetadataAuthId)
		copy(dAtA[i:], m.MetadataAuthId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.MetadataAuthId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetadataPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.DataStatus != 0 {
		n += 1 + sovMetadata(uint64(m.DataStatus))
	}
	l = len(m.MetadataName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.MetadataType != 0 {
		n += 1 + sovMetadata(uint64(m.MetadataType))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.LocationType != 0 {
		n += 1 + sovMetadata(uint64(m.LocationType))
	}
	if m.DataType != 0 {
		n += 1 + sovMetadata(uint64(m.DataType))
	}
	l = len(m.Industry)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMetadata(uint64(m.State))
	}
	if m.PublishAt != 0 {
		n += 1 + sovMetadata(uint64(m.PublishAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.Nonce != 0 {
		n += 1 + sovMetadata(uint64(m.Nonce))
	}
	l = len(m.MetadataOption)
	if l > 0 {
		n += 2 + l + sovMetadata(uint64(l))
	}
	if m.AllowExpose {
		n += 3
	}
	l = len(m.TokenAddress)
	if l > 0 {
		n += 2 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataAuthorityPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataAuthId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.DataStatus != 0 {
		n += 1 + sovMetadata(uint64(m.DataStatus))
	}
	if m.UserType != 0 {
		n += 1 + sovMetadata(uint64(m.UserType))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.AuditOption != 0 {
		n += 1 + sovMetadata(uint64(m.AuditOption))
	}
	l = len(m.AuditSuggestion)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.UsedQuo != nil {
		l = m.UsedQuo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.ApplyAt != 0 {
		n += 1 + sovMetadata(uint64(m.ApplyAt))
	}
	if m.AuditAt != 0 {
		n += 1 + sovMetadata(uint64(m.AuditAt))
	}
	if m.State != 0 {
		n += 1 + sovMetadata(uint64(m.State))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.PublishAt != 0 {
		n += 1 + sovMetadata(uint64(m.PublishAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.Nonce != 0 {
		n += 2 + sovMetadata(uint64(m.Nonce))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.MetadataName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.MetadataType != 0 {
		n += 1 + sovMetadata(uint64(m.MetadataType))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.LocationType != 0 {
		n += 1 + sovMetadata(uint64(m.LocationType))
	}
	if m.DataType != 0 {
		n += 1 + sovMetadata(uint64(m.DataType))
	}
	l = len(m.Industry)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMetadata(uint64(m.State))
	}
	if m.PublishAt != 0 {
		n += 1 + sovMetadata(uint64(m.PublishAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.Nonce != 0 {
		n += 1 + sovMetadata(uint64(m.Nonce))
	}
	l = len(m.MetadataOption)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.AllowExpose {
		n += 2
	}
	l = len(m.TokenAddress)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetadataSummary != nil {
		l = m.MetadataSummary.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.TotalTaskCount != 0 {
		n += 1 + sovMetadata(uint64(m.TotalTaskCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataUsageRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsageType != 0 {
		n += 1 + sovMetadata(uint64(m.UsageType))
	}
	if m.StartAt != 0 {
		n += 1 + sovMetadata(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovMetadata(uint64(m.EndAt))
	}
	if m.Times != 0 {
		n += 1 + sovMetadata(uint64(m.Times))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataAuthority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.MetadataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.UsageRule != nil {
		l = m.UsageRule.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataUsedQuo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsageType != 0 {
		n += 1 + sovMetadata(uint64(m.UsageType))
	}
	if m.Expire {
		n += 2
	}
	if m.UsedTimes != 0 {
		n += 1 + sovMetadata(uint64(m.UsedTimes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataAuthorityDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetadataAuthId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovMetadata(uint64(m.UserType))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.AuditOption != 0 {
		n += 1 + sovMetadata(uint64(m.AuditOption))
	}
	l = len(m.AuditSuggestion)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.UsedQuo != nil {
		l = m.UsedQuo.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.ApplyAt != 0 {
		n += 1 + sovMetadata(uint64(m.ApplyAt))
	}
	if m.AuditAt != 0 {
		n += 1 + sovMetadata(uint64(m.AuditAt))
	}
	if m.State != 0 {
		n += 1 + sovMetadata(uint64(m.State))
	}
	if m.PublishAt != 0 {
		n += 1 + sovMetadata(uint64(m.PublishAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMetadata(uint64(m.UpdateAt))
	}
	if m.Nonce != 0 {
		n += 1 + sovMetadata(uint64(m.Nonce))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetadataPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStatus", wireType)
			}
			m.DataStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataStatus |= DataStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataType", wireType)
			}
			m.MetadataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataType |= MetadataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationType", wireType)
			}
			m.LocationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocationType |= DataLocationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= OrigindataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Industry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Industry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= MetadataState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
			}
			m.PublishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowExpose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowExpose = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataAuthorityPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataAuthorityPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataAuthorityPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataAuthId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataAuthId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStatus", wireType)
			}
			m.DataStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataStatus |= DataStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &MetadataAuthority{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditOption", wireType)
			}
			m.AuditOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuditOption |= AuditMetadataOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditSuggestion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditSuggestion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedQuo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsedQuo == nil {
				m.UsedQuo = &MetadataUsedQuo{}
			}
			if err := m.UsedQuo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyAt", wireType)
			}
			m.ApplyAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditAt", wireType)
			}
			m.AuditAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuditAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= MetadataAuthorityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
			}
			m.PublishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataType", wireType)
			}
			m.MetadataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataType |= MetadataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationType", wireType)
			}
			m.LocationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocationType |= DataLocationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= OrigindataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Industry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Industry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= MetadataState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
			}
			m.PublishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowExpose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowExpose = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetadataSummary == nil {
				m.MetadataSummary = &MetadataSummary{}
			}
			if err := m.MetadataSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTaskCount", wireType)
			}
			m.TotalTaskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTaskCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataUsageRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataUsageRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataUsageRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageType", wireType)
			}
			m.UsageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageType |= MetadataUsageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataAuthority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataAuthority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataAuthority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsageRule == nil {
				m.UsageRule = &MetadataUsageRule{}
			}
			if err := m.UsageRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataUsedQuo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataUsedQuo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataUsedQuo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageType", wireType)
			}
			m.UsageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageType |= MetadataUsageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expire = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedTimes", wireType)
			}
			m.UsedTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedTimes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataAuthorityDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataAuthorityDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataAuthorityDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataAuthId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataAuthId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &MetadataAuthority{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditOption", wireType)
			}
			m.AuditOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuditOption |= AuditMetadataOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditSuggestion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditSuggestion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedQuo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsedQuo == nil {
				m.UsedQuo = &MetadataUsedQuo{}
			}
			if err := m.UsedQuo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyAt", wireType)
			}
			m.ApplyAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditAt", wireType)
			}
			m.AuditAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuditAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= MetadataAuthorityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
			}
			m.PublishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
