// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/types/resourcedata.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResourceData struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	NodeId   string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	NodeName string `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	DataId   string `protobuf:"bytes,4,opt,name=dataId,proto3" json:"dataId,omitempty"`
	// the status of data, N means normal, D means deleted.
	DataStatus string `protobuf:"bytes,5,opt,name=dataStatus,proto3" json:"dataStatus,omitempty"`
	// resource status, eg: create/release/revoke
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// unit: MB
	TotalMem string `protobuf:"bytes,7,opt,name=totalMem,proto3" json:"totalMem,omitempty"`
	// unit: MB
	UsedMem string `protobuf:"bytes,8,opt,name=usedMem,proto3" json:"usedMem,omitempty"`
	// number of cpu cores.
	TotalProcessor uint64 `protobuf:"varint,9,opt,name=totalProcessor,proto3" json:"totalProcessor,omitempty"`
	// unit: MB
	TotalBandWidth       string   `protobuf:"bytes,10,opt,name=totalBandWidth,proto3" json:"totalBandWidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceData) Reset()         { *m = ResourceData{} }
func (m *ResourceData) String() string { return proto.CompactTextString(m) }
func (*ResourceData) ProtoMessage()    {}
func (*ResourceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8efe43321c6120dd, []int{0}
}
func (m *ResourceData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceData.Merge(m, src)
}
func (m *ResourceData) XXX_Size() int {
	return m.Size()
}
func (m *ResourceData) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceData.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceData proto.InternalMessageInfo

func (m *ResourceData) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ResourceData) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ResourceData) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ResourceData) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *ResourceData) GetDataStatus() string {
	if m != nil {
		return m.DataStatus
	}
	return ""
}

func (m *ResourceData) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ResourceData) GetTotalMem() string {
	if m != nil {
		return m.TotalMem
	}
	return ""
}

func (m *ResourceData) GetUsedMem() string {
	if m != nil {
		return m.UsedMem
	}
	return ""
}

func (m *ResourceData) GetTotalProcessor() uint64 {
	if m != nil {
		return m.TotalProcessor
	}
	return 0
}

func (m *ResourceData) GetTotalBandWidth() string {
	if m != nil {
		return m.TotalBandWidth
	}
	return ""
}

func init() {
	proto.RegisterType((*ResourceData)(nil), "types.ResourceData")
}

func init() { proto.RegisterFile("lib/types/resourcedata.proto", fileDescriptor_8efe43321c6120dd) }

var fileDescriptor_8efe43321c6120dd = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4a, 0x3b, 0x31,
	0x10, 0xc7, 0x49, 0x7f, 0xfd, 0x1b, 0x7e, 0x78, 0x08, 0x22, 0xa1, 0xc8, 0x52, 0x14, 0xa4, 0x20,
	0x36, 0x07, 0x4f, 0x5e, 0xab, 0x28, 0x3d, 0x28, 0xb2, 0x1e, 0x04, 0x6f, 0xd9, 0x66, 0x6c, 0x03,
	0x6d, 0xa7, 0x24, 0xb3, 0x48, 0x5f, 0xcb, 0xa7, 0xf0, 0xe8, 0x23, 0xc8, 0x3e, 0x89, 0x24, 0xe9,
	0x2e, 0xd2, 0xdb, 0x7c, 0xbe, 0x7f, 0x66, 0x96, 0x0d, 0x3f, 0x5d, 0xd9, 0x42, 0xd1, 0x6e, 0x0b,
	0x5e, 0x39, 0xf0, 0x58, 0xba, 0x39, 0x18, 0x4d, 0x7a, 0xb2, 0x75, 0x48, 0x28, 0x3a, 0xd1, 0x19,
	0x9e, 0x3b, 0xd8, 0xa2, 0x57, 0x51, 0x2b, 0xca, 0x77, 0xb5, 0xc0, 0x05, 0x46, 0x88, 0x53, 0xca,
	0x9e, 0x7d, 0xb6, 0xf8, 0xff, 0x7c, 0xbf, 0xe2, 0x4e, 0x93, 0x16, 0x43, 0xde, 0xb7, 0x06, 0x36,
	0x64, 0x69, 0x27, 0xd9, 0x88, 0x8d, 0x07, 0x79, 0xc3, 0xe2, 0x84, 0x77, 0x37, 0x68, 0x60, 0x66,
	0x64, 0x2b, 0x3a, 0x7b, 0x0a, 0x9d, 0x30, 0x3d, 0xe9, 0x35, 0xc8, 0x7f, 0xa9, 0x53, 0x73, 0xe8,
	0x84, 0x4f, 0x9b, 0x19, 0xd9, 0x4e, 0x9d, 0x44, 0x22, 0xe3, 0x3c, 0x4c, 0x2f, 0xa4, 0xa9, 0xf4,
	0xb2, 0x13, 0xbd, 0x3f, 0x8a, 0x38, 0xe6, 0x1d, 0x4f, 0x9a, 0x40, 0x76, 0xa3, 0x95, 0x20, 0x5c,
	0x22, 0x24, 0xbd, 0x7a, 0x84, 0xb5, 0xec, 0xa5, 0x4b, 0x35, 0x0b, 0xc9, 0x7b, 0xa5, 0x07, 0x13,
	0xac, 0x7e, 0xb4, 0x6a, 0x14, 0x17, 0xfc, 0x28, 0xa6, 0x9e, 0x1d, 0xce, 0xc1, 0x7b, 0x74, 0x72,
	0x30, 0x62, 0xe3, 0x76, 0x7e, 0xa0, 0x36, 0xb9, 0xa9, 0xde, 0x98, 0x57, 0x6b, 0x68, 0x29, 0x79,
	0x5c, 0x74, 0xa0, 0x4e, 0x6f, 0xbe, 0xaa, 0x8c, 0x7d, 0x57, 0x19, 0xfb, 0xa9, 0x32, 0xf6, 0x76,
	0xb9, 0xb0, 0xb4, 0x2c, 0x8b, 0xc9, 0x1c, 0xd7, 0x2a, 0x47, 0x0f, 0x44, 0xfa, 0x7e, 0x85, 0x1f,
	0xea, 0x56, 0x3b, 0x67, 0xc1, 0x5d, 0x3d, 0xa0, 0x6a, 0x9e, 0xab, 0xe8, 0xc6, 0xdf, 0x7e, 0xfd,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x77, 0x39, 0xdf, 0x43, 0xc2, 0x01, 0x00, 0x00,
}

func (m *ResourceData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TotalBandWidth) > 0 {
		i -= len(m.TotalBandWidth)
		copy(dAtA[i:], m.TotalBandWidth)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.TotalBandWidth)))
		i--
		dAtA[i] = 0x52
	}
	if m.TotalProcessor != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalProcessor))
		i--
		dAtA[i] = 0x48
	}
	if len(m.UsedMem) > 0 {
		i -= len(m.UsedMem)
		copy(dAtA[i:], m.UsedMem)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.UsedMem)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TotalMem) > 0 {
		i -= len(m.TotalMem)
		copy(dAtA[i:], m.TotalMem)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.TotalMem)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DataStatus) > 0 {
		i -= len(m.DataStatus)
		copy(dAtA[i:], m.DataStatus)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.DataStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResourcedata(dAtA []byte, offset int, v uint64) int {
	offset -= sovResourcedata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourceData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.DataStatus)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.TotalMem)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.UsedMem)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.TotalProcessor != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalProcessor))
	}
	l = len(m.TotalBandWidth)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovResourcedata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResourcedata(x uint64) (n int) {
	return sovResourcedata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourcedata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalMem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedMem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcessor", wireType)
			}
			m.TotalProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProcessor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandWidth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBandWidth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourcedata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourcedata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourcedata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourcedata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResourcedata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResourcedata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResourcedata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResourcedata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourcedata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResourcedata = fmt.Errorf("proto: unexpected end of group")
)
