// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/types/identitydata.proto

package types

import (
	fmt "fmt"
	common "github.com/RosettaFlow/Carrier-Go/lib/common"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IdentityPB represents the stored data structure.
type IdentityPB struct {
	IdentityId string `protobuf:"bytes,1,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	NodeId     string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeName   string `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	DataId     string `protobuf:"bytes,4,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	// N means normal, D means deleted
	DataStatus common.DataStatus `protobuf:"varint,5,opt,name=data_status,json=dataStatus,proto3,enum=api.protobuf.DataStatus" json:"data_status,omitempty"`
	// Y : normal, N non-normal
	Status common.CommonStatus `protobuf:"varint,6,opt,name=status,proto3,enum=api.protobuf.CommonStatus" json:"status,omitempty"`
	// json format for credential
	Credential           string   `protobuf:"bytes,7,opt,name=credential,proto3" json:"credential,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentityPB) Reset()         { *m = IdentityPB{} }
func (m *IdentityPB) String() string { return proto.CompactTextString(m) }
func (*IdentityPB) ProtoMessage()    {}
func (*IdentityPB) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdff2e4768e45a01, []int{0}
}
func (m *IdentityPB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityPB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityPB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentityPB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityPB.Merge(m, src)
}
func (m *IdentityPB) XXX_Size() int {
	return m.Size()
}
func (m *IdentityPB) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityPB.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityPB proto.InternalMessageInfo

func (m *IdentityPB) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *IdentityPB) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *IdentityPB) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *IdentityPB) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *IdentityPB) GetDataStatus() common.DataStatus {
	if m != nil {
		return m.DataStatus
	}
	return common.DataStatus_DataStatus_Unknown
}

func (m *IdentityPB) GetStatus() common.CommonStatus {
	if m != nil {
		return m.Status
	}
	return common.CommonStatus_CommonStatus_Unknown
}

func (m *IdentityPB) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

func init() {
	proto.RegisterType((*IdentityPB)(nil), "types.IdentityPB")
}

func init() { proto.RegisterFile("lib/types/identitydata.proto", fileDescriptor_fdff2e4768e45a01) }

var fileDescriptor_fdff2e4768e45a01 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0xb5, 0xa9, 0x9d, 0x82, 0x87, 0x05, 0x31, 0x54, 0x89, 0x45, 0x2f, 0x05, 0x31,
	0x0b, 0xf5, 0xd4, 0x6b, 0x2b, 0x4a, 0x2e, 0x22, 0xf5, 0xe6, 0x45, 0x26, 0xdd, 0xb5, 0x2e, 0x34,
	0x99, 0x90, 0xdd, 0x22, 0x7d, 0x06, 0x5f, 0xcc, 0xa3, 0x8f, 0x20, 0x7d, 0x12, 0xd9, 0x49, 0x52,
	0xf1, 0xb6, 0xff, 0x7c, 0xf3, 0x65, 0x67, 0xb2, 0x70, 0xbe, 0x36, 0x99, 0x74, 0xdb, 0x52, 0x5b,
	0x69, 0x94, 0x2e, 0x9c, 0x71, 0x5b, 0x85, 0x0e, 0x93, 0xb2, 0x22, 0x47, 0xa2, 0xcb, 0x64, 0x78,
	0xe2, 0x9b, 0x96, 0x94, 0xe7, 0x54, 0xc8, 0x0c, 0xad, 0xae, 0xe9, 0xf0, 0xaa, 0xd2, 0x25, 0x59,
	0xc9, 0x21, 0xdb, 0xbc, 0xc9, 0x15, 0xad, 0x88, 0x03, 0x9f, 0xea, 0xa6, 0xcb, 0xcf, 0x0e, 0x40,
	0xda, 0x7c, 0xf9, 0x69, 0x26, 0x2e, 0x60, 0xd0, 0xde, 0xf3, 0x6a, 0x54, 0x14, 0x8c, 0x82, 0x71,
	0x7f, 0x01, 0x6d, 0x29, 0x55, 0xe2, 0x14, 0x7a, 0x05, 0x29, 0xed, 0x61, 0x87, 0x61, 0xe8, 0x63,
	0xaa, 0xc4, 0x19, 0xf4, 0x19, 0x14, 0x98, 0xeb, 0xe8, 0x80, 0xd1, 0x91, 0x2f, 0x3c, 0x62, 0xae,
	0xbd, 0xe5, 0xc7, 0xf6, 0xd6, 0x61, 0x6d, 0xf9, 0x98, 0x2a, 0x31, 0x85, 0x01, 0x03, 0xeb, 0xd0,
	0x6d, 0x6c, 0xd4, 0x1d, 0x05, 0xe3, 0xe3, 0x49, 0x94, 0x60, 0x69, 0x92, 0x76, 0xee, 0xe4, 0x0e,
	0x1d, 0x3e, 0x33, 0x5f, 0x80, 0xda, 0x9f, 0xc5, 0x04, 0xc2, 0xc6, 0x0a, 0xd9, 0x1a, 0xfe, 0xb7,
	0xe6, 0xfc, 0x3f, 0x1a, 0xaf, 0xe9, 0x14, 0x31, 0xc0, 0xb2, 0xd2, 0xbc, 0x0d, 0xae, 0xa3, 0x5e,
	0xbd, 0xdd, 0x5f, 0x65, 0x36, 0xfd, 0xda, 0xc5, 0xc1, 0xf7, 0x2e, 0x0e, 0x7e, 0x76, 0x71, 0xf0,
	0x72, 0xbd, 0x32, 0xee, 0x7d, 0x93, 0x25, 0x4b, 0xca, 0xe5, 0x82, 0xac, 0x76, 0x0e, 0xef, 0xd7,
	0xf4, 0x21, 0xe7, 0x58, 0x55, 0x46, 0x57, 0x37, 0x0f, 0x24, 0xf7, 0xcf, 0x93, 0x85, 0x7c, 0xf3,
	0xed, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x8b, 0xc4, 0x26, 0xb2, 0x01, 0x00, 0x00,
}

func (m *IdentityPB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityPB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityPB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Credential) > 0 {
		i -= len(m.Credential)
		copy(dAtA[i:], m.Credential)
		i = encodeVarintIdentitydata(dAtA, i, uint64(len(m.Credential)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintIdentitydata(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.DataStatus != 0 {
		i = encodeVarintIdentitydata(dAtA, i, uint64(m.DataStatus))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintIdentitydata(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintIdentitydata(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintIdentitydata(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintIdentitydata(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIdentitydata(dAtA []byte, offset int, v uint64) int {
	offset -= sovIdentitydata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IdentityPB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovIdentitydata(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovIdentitydata(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovIdentitydata(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovIdentitydata(uint64(l))
	}
	if m.DataStatus != 0 {
		n += 1 + sovIdentitydata(uint64(m.DataStatus))
	}
	if m.Status != 0 {
		n += 1 + sovIdentitydata(uint64(m.Status))
	}
	l = len(m.Credential)
	if l > 0 {
		n += 1 + l + sovIdentitydata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIdentitydata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdentitydata(x uint64) (n int) {
	return sovIdentitydata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdentityPB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentitydata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityPB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityPB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentitydata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentitydata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentitydata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentitydata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentitydata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentitydata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentitydata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentitydata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentitydata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentitydata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentitydata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentitydata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStatus", wireType)
			}
			m.DataStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentitydata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataStatus |= common.DataStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentitydata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= common.CommonStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentitydata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentitydata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentitydata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credential = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentitydata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdentitydata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentitydata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentitydata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentitydata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentitydata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdentitydata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIdentitydata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIdentitydata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIdentitydata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentitydata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIdentitydata = fmt.Errorf("proto: unexpected end of group")
)
