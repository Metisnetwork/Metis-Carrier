// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/fighter/datasvc/data_svc.proto

package datasvc

import (
	context "context"
	fmt "fmt"
	common "github.com/RosettaFlow/Carrier-Go/lib/fighter/common"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskStatus int32

const (
	TaskStatus_Start     TaskStatus = 0
	TaskStatus_Finished  TaskStatus = 1
	TaskStatus_Cancelled TaskStatus = 2
	TaskStatus_Failed    TaskStatus = 3
)

var TaskStatus_name = map[int32]string{
	0: "Start",
	1: "Finished",
	2: "Cancelled",
	3: "Failed",
}

var TaskStatus_value = map[string]int32{
	"Start":     0,
	"Finished":  1,
	"Cancelled": 2,
	"Failed":    3,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}

func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{0}
}

type DownloadRequest struct {
	FilePath             string   `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadRequest) Reset()         { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()    {}
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{0}
}
func (m *DownloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadRequest.Merge(m, src)
}
func (m *DownloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadRequest proto.InternalMessageInfo

func (m *DownloadRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

type DownloadReply struct {
	// Types that are valid to be assigned to Data:
	//	*DownloadReply_Status
	//	*DownloadReply_Content
	Data                 isDownloadReply_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DownloadReply) Reset()         { *m = DownloadReply{} }
func (m *DownloadReply) String() string { return proto.CompactTextString(m) }
func (*DownloadReply) ProtoMessage()    {}
func (*DownloadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{1}
}
func (m *DownloadReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadReply.Merge(m, src)
}
func (m *DownloadReply) XXX_Size() int {
	return m.Size()
}
func (m *DownloadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadReply.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadReply proto.InternalMessageInfo

type isDownloadReply_Data interface {
	isDownloadReply_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownloadReply_Status struct {
	Status TaskStatus `protobuf:"varint,1,opt,name=status,proto3,enum=datasvc.TaskStatus,oneof" json:"status,omitempty"`
}
type DownloadReply_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (*DownloadReply_Status) isDownloadReply_Data()  {}
func (*DownloadReply_Content) isDownloadReply_Data() {}

func (m *DownloadReply) GetData() isDownloadReply_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DownloadReply) GetStatus() TaskStatus {
	if x, ok := m.GetData().(*DownloadReply_Status); ok {
		return x.Status
	}
	return TaskStatus_Start
}

func (m *DownloadReply) GetContent() []byte {
	if x, ok := m.GetData().(*DownloadReply_Content); ok {
		return x.Content
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownloadReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownloadReply_Status)(nil),
		(*DownloadReply_Content)(nil),
	}
}

type FileInfo struct {
	FileName             string   `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileType             string   `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Columns              []string `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	ColDtypes            []string `protobuf:"bytes,5,rep,name=col_dtypes,json=colDtypes,proto3" json:"col_dtypes,omitempty"`
	Keywords             []string `protobuf:"bytes,6,rep,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{2}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FileInfo) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

func (m *FileInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FileInfo) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *FileInfo) GetColDtypes() []string {
	if m != nil {
		return m.ColDtypes
	}
	return nil
}

func (m *FileInfo) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

type UploadRequest struct {
	// Types that are valid to be assigned to Data:
	//	*UploadRequest_Meta
	//	*UploadRequest_Content
	Data                 isUploadRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UploadRequest) Reset()         { *m = UploadRequest{} }
func (m *UploadRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()    {}
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{3}
}
func (m *UploadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRequest.Merge(m, src)
}
func (m *UploadRequest) XXX_Size() int {
	return m.Size()
}
func (m *UploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRequest proto.InternalMessageInfo

type isUploadRequest_Data interface {
	isUploadRequest_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UploadRequest_Meta struct {
	Meta *FileInfo `protobuf:"bytes,1,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}
type UploadRequest_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (*UploadRequest_Meta) isUploadRequest_Data()    {}
func (*UploadRequest_Content) isUploadRequest_Data() {}

func (m *UploadRequest) GetData() isUploadRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UploadRequest) GetMeta() *FileInfo {
	if x, ok := m.GetData().(*UploadRequest_Meta); ok {
		return x.Meta
	}
	return nil
}

func (m *UploadRequest) GetContent() []byte {
	if x, ok := m.GetData().(*UploadRequest_Content); ok {
		return x.Content
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UploadRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UploadRequest_Meta)(nil),
		(*UploadRequest_Content)(nil),
	}
}

type UploadReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	DataId               string   `protobuf:"bytes,2,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	FilePath             string   `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadReply) Reset()         { *m = UploadReply{} }
func (m *UploadReply) String() string { return proto.CompactTextString(m) }
func (*UploadReply) ProtoMessage()    {}
func (*UploadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{4}
}
func (m *UploadReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadReply.Merge(m, src)
}
func (m *UploadReply) XXX_Size() int {
	return m.Size()
}
func (m *UploadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadReply.DiscardUnknown(m)
}

var xxx_messageInfo_UploadReply proto.InternalMessageInfo

func (m *UploadReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *UploadReply) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *UploadReply) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

type ListDataReply struct {
	Data                 []*ListDataReply_Row `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListDataReply) Reset()         { *m = ListDataReply{} }
func (m *ListDataReply) String() string { return proto.CompactTextString(m) }
func (*ListDataReply) ProtoMessage()    {}
func (*ListDataReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{5}
}
func (m *ListDataReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDataReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDataReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDataReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDataReply.Merge(m, src)
}
func (m *ListDataReply) XXX_Size() int {
	return m.Size()
}
func (m *ListDataReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDataReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListDataReply proto.InternalMessageInfo

func (m *ListDataReply) GetData() []*ListDataReply_Row {
	if m != nil {
		return m.Data
	}
	return nil
}

type ListDataReply_Row struct {
	DataId               string   `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	Info                 string   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	FileName             string   `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Size_                int32    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDataReply_Row) Reset()         { *m = ListDataReply_Row{} }
func (m *ListDataReply_Row) String() string { return proto.CompactTextString(m) }
func (*ListDataReply_Row) ProtoMessage()    {}
func (*ListDataReply_Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{5, 0}
}
func (m *ListDataReply_Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDataReply_Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDataReply_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDataReply_Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDataReply_Row.Merge(m, src)
}
func (m *ListDataReply_Row) XXX_Size() int {
	return m.Size()
}
func (m *ListDataReply_Row) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDataReply_Row.DiscardUnknown(m)
}

var xxx_messageInfo_ListDataReply_Row proto.InternalMessageInfo

func (m *ListDataReply_Row) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *ListDataReply_Row) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *ListDataReply_Row) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ListDataReply_Row) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type GetDataDetailReply struct {
	NRows                int32                      `protobuf:"varint,1,opt,name=n_rows,json=nRows,proto3" json:"n_rows,omitempty"`
	Items                []*GetDataDetailReply_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GetDataDetailReply) Reset()         { *m = GetDataDetailReply{} }
func (m *GetDataDetailReply) String() string { return proto.CompactTextString(m) }
func (*GetDataDetailReply) ProtoMessage()    {}
func (*GetDataDetailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{6}
}
func (m *GetDataDetailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataDetailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataDetailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataDetailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataDetailReply.Merge(m, src)
}
func (m *GetDataDetailReply) XXX_Size() int {
	return m.Size()
}
func (m *GetDataDetailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataDetailReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataDetailReply proto.InternalMessageInfo

func (m *GetDataDetailReply) GetNRows() int32 {
	if m != nil {
		return m.NRows
	}
	return 0
}

func (m *GetDataDetailReply) GetItems() []*GetDataDetailReply_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type GetDataDetailReply_Item struct {
	Column               string   `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Dtype                string   `protobuf:"bytes,2,opt,name=dtype,proto3" json:"dtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDataDetailReply_Item) Reset()         { *m = GetDataDetailReply_Item{} }
func (m *GetDataDetailReply_Item) String() string { return proto.CompactTextString(m) }
func (*GetDataDetailReply_Item) ProtoMessage()    {}
func (*GetDataDetailReply_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{6, 0}
}
func (m *GetDataDetailReply_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataDetailReply_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataDetailReply_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataDetailReply_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataDetailReply_Item.Merge(m, src)
}
func (m *GetDataDetailReply_Item) XXX_Size() int {
	return m.Size()
}
func (m *GetDataDetailReply_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataDetailReply_Item.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataDetailReply_Item proto.InternalMessageInfo

func (m *GetDataDetailReply_Item) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *GetDataDetailReply_Item) GetDtype() string {
	if m != nil {
		return m.Dtype
	}
	return ""
}

type GetStatusReply struct {
	TotalCpu             uint32   `protobuf:"varint,1,opt,name=total_cpu,json=totalCpu,proto3" json:"total_cpu,omitempty"`
	UsedCpu              uint32   `protobuf:"varint,2,opt,name=used_cpu,json=usedCpu,proto3" json:"used_cpu,omitempty"`
	IdleCpu              uint32   `protobuf:"varint,3,opt,name=idle_cpu,json=idleCpu,proto3" json:"idle_cpu,omitempty"`
	TotalMemory          uint64   `protobuf:"varint,4,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	UsedMemory           uint64   `protobuf:"varint,5,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
	IdleMemory           uint64   `protobuf:"varint,6,opt,name=idle_memory,json=idleMemory,proto3" json:"idle_memory,omitempty"`
	TotalDisk            uint64   `protobuf:"varint,7,opt,name=total_disk,json=totalDisk,proto3" json:"total_disk,omitempty"`
	UsedDisk             uint64   `protobuf:"varint,8,opt,name=used_disk,json=usedDisk,proto3" json:"used_disk,omitempty"`
	IdleDisk             uint64   `protobuf:"varint,9,opt,name=idle_disk,json=idleDisk,proto3" json:"idle_disk,omitempty"`
	TotalBandwidth       uint64   `protobuf:"varint,10,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	UsedBandwidth        uint64   `protobuf:"varint,11,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"used_bandwidth,omitempty"`
	IdleBandwidth        uint64   `protobuf:"varint,12,opt,name=idle_bandwidth,json=idleBandwidth,proto3" json:"idle_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatusReply) Reset()         { *m = GetStatusReply{} }
func (m *GetStatusReply) String() string { return proto.CompactTextString(m) }
func (*GetStatusReply) ProtoMessage()    {}
func (*GetStatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{7}
}
func (m *GetStatusReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatusReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusReply.Merge(m, src)
}
func (m *GetStatusReply) XXX_Size() int {
	return m.Size()
}
func (m *GetStatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusReply proto.InternalMessageInfo

func (m *GetStatusReply) GetTotalCpu() uint32 {
	if m != nil {
		return m.TotalCpu
	}
	return 0
}

func (m *GetStatusReply) GetUsedCpu() uint32 {
	if m != nil {
		return m.UsedCpu
	}
	return 0
}

func (m *GetStatusReply) GetIdleCpu() uint32 {
	if m != nil {
		return m.IdleCpu
	}
	return 0
}

func (m *GetStatusReply) GetTotalMemory() uint64 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

func (m *GetStatusReply) GetUsedMemory() uint64 {
	if m != nil {
		return m.UsedMemory
	}
	return 0
}

func (m *GetStatusReply) GetIdleMemory() uint64 {
	if m != nil {
		return m.IdleMemory
	}
	return 0
}

func (m *GetStatusReply) GetTotalDisk() uint64 {
	if m != nil {
		return m.TotalDisk
	}
	return 0
}

func (m *GetStatusReply) GetUsedDisk() uint64 {
	if m != nil {
		return m.UsedDisk
	}
	return 0
}

func (m *GetStatusReply) GetIdleDisk() uint64 {
	if m != nil {
		return m.IdleDisk
	}
	return 0
}

func (m *GetStatusReply) GetTotalBandwidth() uint64 {
	if m != nil {
		return m.TotalBandwidth
	}
	return 0
}

func (m *GetStatusReply) GetUsedBandwidth() uint64 {
	if m != nil {
		return m.UsedBandwidth
	}
	return 0
}

func (m *GetStatusReply) GetIdleBandwidth() uint64 {
	if m != nil {
		return m.IdleBandwidth
	}
	return 0
}

type SendSharesDataRequest struct {
	DataId               string   `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	Receivers            []string `protobuf:"bytes,2,rep,name=receivers,proto3" json:"receivers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendSharesDataRequest) Reset()         { *m = SendSharesDataRequest{} }
func (m *SendSharesDataRequest) String() string { return proto.CompactTextString(m) }
func (*SendSharesDataRequest) ProtoMessage()    {}
func (*SendSharesDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{8}
}
func (m *SendSharesDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendSharesDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendSharesDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendSharesDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendSharesDataRequest.Merge(m, src)
}
func (m *SendSharesDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendSharesDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendSharesDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendSharesDataRequest proto.InternalMessageInfo

func (m *SendSharesDataRequest) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *SendSharesDataRequest) GetReceivers() []string {
	if m != nil {
		return m.Receivers
	}
	return nil
}

type SendSharesDataReply struct {
	Status               TaskStatus `protobuf:"varint,1,opt,name=status,proto3,enum=datasvc.TaskStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SendSharesDataReply) Reset()         { *m = SendSharesDataReply{} }
func (m *SendSharesDataReply) String() string { return proto.CompactTextString(m) }
func (*SendSharesDataReply) ProtoMessage()    {}
func (*SendSharesDataReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c1e51d2cf0273a9, []int{9}
}
func (m *SendSharesDataReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendSharesDataReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendSharesDataReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendSharesDataReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendSharesDataReply.Merge(m, src)
}
func (m *SendSharesDataReply) XXX_Size() int {
	return m.Size()
}
func (m *SendSharesDataReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendSharesDataReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendSharesDataReply proto.InternalMessageInfo

func (m *SendSharesDataReply) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_Start
}

func init() {
	proto.RegisterEnum("datasvc.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterType((*DownloadRequest)(nil), "datasvc.DownloadRequest")
	proto.RegisterType((*DownloadReply)(nil), "datasvc.DownloadReply")
	proto.RegisterType((*FileInfo)(nil), "datasvc.FileInfo")
	proto.RegisterType((*UploadRequest)(nil), "datasvc.UploadRequest")
	proto.RegisterType((*UploadReply)(nil), "datasvc.UploadReply")
	proto.RegisterType((*ListDataReply)(nil), "datasvc.ListDataReply")
	proto.RegisterType((*ListDataReply_Row)(nil), "datasvc.ListDataReply.Row")
	proto.RegisterType((*GetDataDetailReply)(nil), "datasvc.GetDataDetailReply")
	proto.RegisterType((*GetDataDetailReply_Item)(nil), "datasvc.GetDataDetailReply.Item")
	proto.RegisterType((*GetStatusReply)(nil), "datasvc.GetStatusReply")
	proto.RegisterType((*SendSharesDataRequest)(nil), "datasvc.SendSharesDataRequest")
	proto.RegisterType((*SendSharesDataReply)(nil), "datasvc.SendSharesDataReply")
}

func init() {
	proto.RegisterFile("lib/fighter/datasvc/data_svc.proto", fileDescriptor_6c1e51d2cf0273a9)
}

var fileDescriptor_6c1e51d2cf0273a9 = []byte{
	// 1128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x36, 0x75, 0xb3, 0x74, 0x74, 0x89, 0x3c, 0x89, 0x25, 0xfe, 0xf2, 0x25, 0x0a, 0x81, 0x1f,
	0x11, 0x5c, 0x44, 0x0a, 0xdc, 0xcb, 0xc2, 0x8b, 0xa2, 0xb0, 0x55, 0x5f, 0x80, 0x34, 0x30, 0xe8,
	0x64, 0xd1, 0xa2, 0x85, 0x30, 0x22, 0xc7, 0xd6, 0x40, 0x14, 0x47, 0x21, 0x47, 0x16, 0xd4, 0x65,
	0x5f, 0xa1, 0x9b, 0x76, 0xdf, 0xa7, 0x68, 0x5f, 0xa0, 0xcb, 0x02, 0x7d, 0x81, 0xc2, 0xe8, 0x83,
	0x14, 0x73, 0x86, 0xa4, 0x28, 0x47, 0x46, 0xd3, 0x15, 0x39, 0xdf, 0xf7, 0xf1, 0x3b, 0xe7, 0xcc,
	0x9c, 0x99, 0x21, 0x58, 0x1e, 0x1f, 0xf6, 0xae, 0xf9, 0xcd, 0x48, 0xb2, 0xa0, 0xe7, 0x52, 0x49,
	0xc3, 0x5b, 0x07, 0x9f, 0x83, 0xf0, 0xd6, 0xe9, 0x4e, 0x03, 0x21, 0x05, 0xd9, 0x8c, 0xf0, 0xd6,
	0xce, 0x8d, 0x10, 0x37, 0x1e, 0xeb, 0x21, 0x3c, 0x9c, 0x5d, 0xf7, 0xd8, 0x64, 0x2a, 0x17, 0x5a,
	0xd5, 0xda, 0x8d, 0x48, 0x3a, 0xe5, 0x3d, 0xea, 0xfb, 0x42, 0x52, 0xc9, 0x85, 0x1f, 0x46, 0xec,
	0xd3, 0x74, 0x1c, 0x47, 0x4c, 0x26, 0xc2, 0x8f, 0x1e, 0x5a, 0x60, 0x75, 0xe1, 0x51, 0x5f, 0xcc,
	0x7d, 0x4f, 0x50, 0xd7, 0x66, 0xef, 0x66, 0x2c, 0x94, 0x64, 0x07, 0x4a, 0xd7, 0xdc, 0x63, 0x83,
	0x29, 0x95, 0x23, 0xd3, 0x68, 0x1b, 0x9d, 0x92, 0x5d, 0x54, 0xc0, 0x25, 0x95, 0x23, 0x6b, 0x08,
	0xd5, 0xa5, 0x7e, 0xea, 0x2d, 0xc8, 0x0b, 0x28, 0x84, 0x92, 0xca, 0x59, 0x88, 0xd2, 0xda, 0xe1,
	0xe3, 0x6e, 0x94, 0x76, 0xf7, 0x0d, 0x0d, 0xc7, 0x57, 0x48, 0x9d, 0x6f, 0xd8, 0x91, 0x88, 0xb4,
	0x60, 0xd3, 0x11, 0xbe, 0x64, 0xbe, 0x34, 0x33, 0x6d, 0xa3, 0x53, 0x39, 0xdf, 0xb0, 0x63, 0xe0,
	0xb8, 0x00, 0x39, 0xf5, 0xad, 0xf5, 0x9b, 0x01, 0xc5, 0x53, 0xee, 0xb1, 0x0b, 0xff, 0x5a, 0x24,
	0xd9, 0xf8, 0x74, 0xc2, 0xd2, 0xd9, 0xbc, 0xa6, 0x13, 0x96, 0x90, 0x72, 0x31, 0x65, 0xe8, 0x17,
	0x91, 0x6f, 0x16, 0x53, 0x46, 0xda, 0x50, 0x76, 0x59, 0xe8, 0x04, 0x7c, 0xaa, 0x66, 0xc4, 0xcc,
	0x22, 0x9d, 0x86, 0x88, 0xa9, 0x92, 0xf1, 0x66, 0x13, 0x3f, 0x34, 0x73, 0xed, 0x6c, 0xa7, 0x64,
	0xc7, 0x43, 0xb2, 0x07, 0xe0, 0x08, 0x6f, 0xe0, 0x2a, 0xe3, 0xd0, 0xcc, 0x23, 0x59, 0x72, 0x84,
	0xd7, 0x47, 0x80, 0xb4, 0xa0, 0x38, 0x66, 0x8b, 0xb9, 0x08, 0xdc, 0xd0, 0x2c, 0x20, 0x99, 0x8c,
	0xad, 0x6f, 0xa1, 0xfa, 0x76, 0x9a, 0x9e, 0xcf, 0xe7, 0x90, 0x9b, 0x30, 0x49, 0x31, 0xf9, 0xf2,
	0xe1, 0x56, 0x32, 0x3f, 0x71, 0x89, 0xe7, 0x1b, 0x36, 0x0a, 0x3e, 0x68, 0x6e, 0xae, 0xa0, 0x1c,
	0xbb, 0xab, 0xd9, 0xaf, 0x41, 0x46, 0x8c, 0xd1, 0xb9, 0x68, 0x67, 0xc4, 0x98, 0x34, 0x01, 0xbb,
	0x66, 0xc0, 0xdd, 0x68, 0x3a, 0x0a, 0x6a, 0x78, 0xe1, 0xae, 0x2e, 0x6a, 0xf6, 0xde, 0xa2, 0xfe,
	0x62, 0x40, 0xf5, 0x15, 0x0f, 0x65, 0x9f, 0x4a, 0xaa, 0x7d, 0xbb, 0x3a, 0x9c, 0x69, 0xb4, 0xb3,
	0x9d, 0xf2, 0x61, 0x2b, 0xc9, 0x79, 0x45, 0xd5, 0xb5, 0xc5, 0xdc, 0x46, 0x5d, 0xcb, 0x81, 0xac,
	0x2d, 0xe6, 0xe9, 0xf0, 0xc6, 0x4a, 0x78, 0x02, 0x39, 0xee, 0x5f, 0x8b, 0x28, 0x29, 0x7c, 0x5f,
	0x5d, 0xd9, 0xec, 0xbd, 0x95, 0x25, 0x90, 0x0b, 0xf9, 0xf7, 0xcc, 0xcc, 0xb5, 0x8d, 0x4e, 0xde,
	0xc6, 0x77, 0xeb, 0x67, 0x03, 0xc8, 0x19, 0xc3, 0xf8, 0x7d, 0x26, 0x29, 0xf7, 0x74, 0xae, 0xdb,
	0x50, 0xf0, 0x07, 0x81, 0x98, 0xeb, 0x0e, 0xcc, 0xdb, 0x79, 0xdf, 0x16, 0xf3, 0x90, 0x7c, 0x06,
	0x79, 0x2e, 0xd9, 0x24, 0x34, 0x33, 0x58, 0x43, 0x3b, 0xa9, 0xe1, 0x7d, 0x8b, 0xee, 0x85, 0x64,
	0x13, 0x5b, 0xcb, 0x5b, 0x9f, 0x40, 0x4e, 0x0d, 0x49, 0x03, 0x0a, 0xba, 0x1b, 0xe2, 0x52, 0xf4,
	0x88, 0x3c, 0x81, 0xbc, 0x9b, 0xea, 0x37, 0x3d, 0xb0, 0x7e, 0xca, 0x42, 0xed, 0x8c, 0x49, 0xdd,
	0xef, 0x3a, 0xaf, 0x1d, 0x28, 0x49, 0x21, 0xa9, 0x37, 0x70, 0xa6, 0x33, 0xf4, 0xa8, 0xda, 0x45,
	0x04, 0x4e, 0xa6, 0x33, 0xf2, 0x3f, 0x28, 0xce, 0x42, 0xe6, 0x22, 0x97, 0x41, 0x6e, 0x53, 0x8d,
	0x23, 0x8a, 0xbb, 0x1e, 0x43, 0x2a, 0xab, 0x29, 0x35, 0x56, 0xd4, 0x33, 0xa8, 0x68, 0xcb, 0x09,
	0x9b, 0x88, 0x60, 0x81, 0xb3, 0x93, 0xb3, 0xcb, 0x88, 0x7d, 0x85, 0x10, 0x79, 0x0a, 0x65, 0x34,
	0x8e, 0x14, 0x79, 0x54, 0x80, 0x82, 0x96, 0x02, 0xb4, 0x8f, 0x04, 0x05, 0x2d, 0x50, 0x50, 0x24,
	0xd8, 0x03, 0xd0, 0x41, 0x5c, 0x1e, 0x8e, 0xcd, 0x4d, 0xe4, 0x75, 0x25, 0x7d, 0x1e, 0x8e, 0x55,
	0x59, 0x18, 0x00, 0xd9, 0x22, 0xb2, 0x58, 0x4a, 0x4c, 0xa2, 0x39, 0x92, 0x25, 0x4d, 0x2a, 0x00,
	0xc9, 0xe7, 0xf0, 0x48, 0x1b, 0x0f, 0xa9, 0xef, 0xce, 0xb9, 0x2b, 0x47, 0x26, 0xa0, 0xa4, 0x86,
	0xf0, 0x71, 0x8c, 0x92, 0xff, 0x43, 0x0d, 0x43, 0x2c, 0x75, 0x65, 0xd4, 0x55, 0x15, 0xba, 0x22,
	0xc3, 0x60, 0x4b, 0x59, 0x45, 0xcb, 0x14, 0x9a, 0xc8, 0xac, 0xd7, 0xb0, 0x7d, 0xc5, 0x7c, 0xf7,
	0x6a, 0x44, 0x03, 0x16, 0xea, 0xe6, 0xd5, 0x1b, 0xf3, 0xc1, 0x6e, 0xdd, 0x85, 0x52, 0xc0, 0x1c,
	0xc6, 0x6f, 0x59, 0xa0, 0xdb, 0xa7, 0x64, 0x2f, 0x01, 0xeb, 0x18, 0x1e, 0xdf, 0xf7, 0x53, 0xcb,
	0xfd, 0xd1, 0x07, 0x1c, 0x84, 0xf1, 0x31, 0x78, 0xf0, 0x05, 0xc0, 0x12, 0x25, 0x25, 0xc8, 0x5f,
	0x49, 0x1a, 0xc8, 0xfa, 0x06, 0xa9, 0xa8, 0xa3, 0xcf, 0xe7, 0xe1, 0x88, 0xb9, 0x75, 0x83, 0x54,
	0xa1, 0x74, 0x42, 0x7d, 0x87, 0x79, 0x1e, 0x73, 0xeb, 0x19, 0x02, 0x50, 0x38, 0xa5, 0x5c, 0xbd,
	0x67, 0x0f, 0x7f, 0x2d, 0x40, 0x45, 0x05, 0xbf, 0x0c, 0xc4, 0x2d, 0x77, 0x59, 0x40, 0xde, 0x42,
	0x29, 0x69, 0x40, 0xd2, 0xe8, 0xea, 0x6b, 0xa1, 0x1b, 0xdf, 0x19, 0xdd, 0x2f, 0xd5, 0x9d, 0xd1,
	0x6a, 0xa6, 0x77, 0x41, 0xaa, 0x59, 0xad, 0xe6, 0x0f, 0x7f, 0xfe, 0xfd, 0x63, 0x66, 0x8b, 0x3c,
	0xc2, 0x5b, 0xa8, 0x77, 0x93, 0x38, 0xd9, 0x50, 0x8c, 0x37, 0xfd, 0x83, 0xae, 0x8d, 0xf5, 0xe7,
	0x83, 0xd5, 0x40, 0xd3, 0x3a, 0xa9, 0x69, 0x53, 0x2f, 0xf6, 0xf9, 0x1a, 0x40, 0x1f, 0x62, 0x91,
	0x6b, 0xfc, 0xf5, 0xca, 0xb9, 0xd9, 0x7a, 0xf2, 0x1e, 0xae, 0x3c, 0x77, 0xd0, 0x73, 0xdb, 0xaa,
	0x6b, 0xcf, 0x59, 0xe2, 0x73, 0x64, 0x1c, 0x74, 0x0c, 0xf2, 0x1d, 0x94, 0x8f, 0xa9, 0x74, 0x46,
	0xfa, 0x93, 0xff, 0xe8, 0xbd, 0x8b, 0xde, 0x0d, 0x6b, 0x4b, 0x7b, 0x0f, 0x97, 0x46, 0x68, 0xfe,
	0xd2, 0x20, 0x14, 0x2a, 0xf1, 0xf5, 0x87, 0xb9, 0x9b, 0x89, 0xcf, 0xbd, 0x5b, 0x34, 0x35, 0x27,
	0x2b, 0xf7, 0xa5, 0xb5, 0x87, 0x31, 0x9a, 0x16, 0xd1, 0x31, 0x5c, 0x31, 0xf7, 0x5f, 0x2d, 0x2b,
	0x78, 0x69, 0x90, 0xcf, 0x01, 0xfa, 0xcc, 0x63, 0x92, 0xfd, 0x4b, 0x80, 0xf5, 0x25, 0x6c, 0x90,
	0x4b, 0xa8, 0xad, 0xb6, 0x27, 0xd9, 0x4f, 0x94, 0x6b, 0xf7, 0x41, 0x6b, 0xf7, 0x41, 0x5e, 0x3b,
	0x72, 0xd8, 0x3a, 0xa7, 0xbe, 0xeb, 0x31, 0xd5, 0xb2, 0x36, 0xa3, 0xee, 0xe2, 0x4c, 0x90, 0x46,
	0x37, 0xfa, 0x8f, 0x48, 0x81, 0x36, 0x7b, 0xd7, 0x32, 0xd7, 0xe2, 0xca, 0xc8, 0xc2, 0xca, 0x77,
	0xad, 0xa6, 0xae, 0x7c, 0x74, 0xdf, 0xf2, 0xc8, 0x38, 0x20, 0x0c, 0xea, 0x3a, 0x94, 0x6e, 0x7b,
	0xc5, 0x92, 0xed, 0xb4, 0xa3, 0xc6, 0x55, 0xa0, 0xe6, 0x3a, 0x58, 0xc5, 0x79, 0x86, 0x71, 0x76,
	0xac, 0x46, 0x3a, 0xce, 0xd2, 0xef, 0xc8, 0x38, 0x38, 0x3e, 0xf9, 0xfd, 0x6e, 0xdf, 0xf8, 0xe3,
	0x6e, 0xdf, 0xf8, 0xeb, 0x6e, 0xdf, 0xf8, 0xe6, 0xd3, 0x1b, 0x2e, 0x47, 0xb3, 0xa1, 0xf2, 0xeb,
	0xd9, 0x22, 0x64, 0x52, 0xd2, 0x53, 0x4f, 0xcc, 0x7b, 0x27, 0x34, 0x08, 0x38, 0x0b, 0x5e, 0x9c,
	0x89, 0xde, 0x9a, 0xdf, 0xb5, 0x61, 0x01, 0x77, 0xc1, 0xc7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xf3, 0x44, 0x7d, 0xcf, 0xcc, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataProviderClient is the client API for DataProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataProviderClient interface {
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatusReply, error)
	ListData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDataReply, error)
	UploadData(ctx context.Context, opts ...grpc.CallOption) (DataProvider_UploadDataClient, error)
	BatchUpload(ctx context.Context, opts ...grpc.CallOption) (DataProvider_BatchUploadClient, error)
	DownloadData(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (DataProvider_DownloadDataClient, error)
	DeleteData(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*UploadReply, error)
	SendSharesData(ctx context.Context, in *SendSharesDataRequest, opts ...grpc.CallOption) (*SendSharesDataReply, error)
	HandleTaskReadyGo(ctx context.Context, in *common.TaskReadyGoReq, opts ...grpc.CallOption) (*common.TaskReadyGoReply, error)
	HandleCancelTask(ctx context.Context, in *common.TaskCancelReq, opts ...grpc.CallOption) (*common.TaskCancelReply, error)
}

type dataProviderClient struct {
	cc *grpc.ClientConn
}

func NewDataProviderClient(cc *grpc.ClientConn) DataProviderClient {
	return &dataProviderClient{cc}
}

func (c *dataProviderClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatusReply, error) {
	out := new(GetStatusReply)
	err := c.cc.Invoke(ctx, "/datasvc.DataProvider/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) ListData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDataReply, error) {
	out := new(ListDataReply)
	err := c.cc.Invoke(ctx, "/datasvc.DataProvider/ListData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) UploadData(ctx context.Context, opts ...grpc.CallOption) (DataProvider_UploadDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataProvider_serviceDesc.Streams[0], "/datasvc.DataProvider/UploadData", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataProviderUploadDataClient{stream}
	return x, nil
}

type DataProvider_UploadDataClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadReply, error)
	grpc.ClientStream
}

type dataProviderUploadDataClient struct {
	grpc.ClientStream
}

func (x *dataProviderUploadDataClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataProviderUploadDataClient) CloseAndRecv() (*UploadReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataProviderClient) BatchUpload(ctx context.Context, opts ...grpc.CallOption) (DataProvider_BatchUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataProvider_serviceDesc.Streams[1], "/datasvc.DataProvider/BatchUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataProviderBatchUploadClient{stream}
	return x, nil
}

type DataProvider_BatchUploadClient interface {
	Send(*UploadRequest) error
	Recv() (*UploadReply, error)
	grpc.ClientStream
}

type dataProviderBatchUploadClient struct {
	grpc.ClientStream
}

func (x *dataProviderBatchUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataProviderBatchUploadClient) Recv() (*UploadReply, error) {
	m := new(UploadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataProviderClient) DownloadData(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (DataProvider_DownloadDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataProvider_serviceDesc.Streams[2], "/datasvc.DataProvider/DownloadData", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataProviderDownloadDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataProvider_DownloadDataClient interface {
	Recv() (*DownloadReply, error)
	grpc.ClientStream
}

type dataProviderDownloadDataClient struct {
	grpc.ClientStream
}

func (x *dataProviderDownloadDataClient) Recv() (*DownloadReply, error) {
	m := new(DownloadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataProviderClient) DeleteData(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*UploadReply, error) {
	out := new(UploadReply)
	err := c.cc.Invoke(ctx, "/datasvc.DataProvider/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) SendSharesData(ctx context.Context, in *SendSharesDataRequest, opts ...grpc.CallOption) (*SendSharesDataReply, error) {
	out := new(SendSharesDataReply)
	err := c.cc.Invoke(ctx, "/datasvc.DataProvider/SendSharesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) HandleTaskReadyGo(ctx context.Context, in *common.TaskReadyGoReq, opts ...grpc.CallOption) (*common.TaskReadyGoReply, error) {
	out := new(common.TaskReadyGoReply)
	err := c.cc.Invoke(ctx, "/datasvc.DataProvider/HandleTaskReadyGo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) HandleCancelTask(ctx context.Context, in *common.TaskCancelReq, opts ...grpc.CallOption) (*common.TaskCancelReply, error) {
	out := new(common.TaskCancelReply)
	err := c.cc.Invoke(ctx, "/datasvc.DataProvider/HandleCancelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProviderServer is the server API for DataProvider service.
type DataProviderServer interface {
	GetStatus(context.Context, *emptypb.Empty) (*GetStatusReply, error)
	ListData(context.Context, *emptypb.Empty) (*ListDataReply, error)
	UploadData(DataProvider_UploadDataServer) error
	BatchUpload(DataProvider_BatchUploadServer) error
	DownloadData(*DownloadRequest, DataProvider_DownloadDataServer) error
	DeleteData(context.Context, *DownloadRequest) (*UploadReply, error)
	SendSharesData(context.Context, *SendSharesDataRequest) (*SendSharesDataReply, error)
	HandleTaskReadyGo(context.Context, *common.TaskReadyGoReq) (*common.TaskReadyGoReply, error)
	HandleCancelTask(context.Context, *common.TaskCancelReq) (*common.TaskCancelReply, error)
}

// UnimplementedDataProviderServer can be embedded to have forward compatible implementations.
type UnimplementedDataProviderServer struct {
}

func (*UnimplementedDataProviderServer) GetStatus(ctx context.Context, req *emptypb.Empty) (*GetStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedDataProviderServer) ListData(ctx context.Context, req *emptypb.Empty) (*ListDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListData not implemented")
}
func (*UnimplementedDataProviderServer) UploadData(srv DataProvider_UploadDataServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadData not implemented")
}
func (*UnimplementedDataProviderServer) BatchUpload(srv DataProvider_BatchUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchUpload not implemented")
}
func (*UnimplementedDataProviderServer) DownloadData(req *DownloadRequest, srv DataProvider_DownloadDataServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadData not implemented")
}
func (*UnimplementedDataProviderServer) DeleteData(ctx context.Context, req *DownloadRequest) (*UploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (*UnimplementedDataProviderServer) SendSharesData(ctx context.Context, req *SendSharesDataRequest) (*SendSharesDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSharesData not implemented")
}
func (*UnimplementedDataProviderServer) HandleTaskReadyGo(ctx context.Context, req *common.TaskReadyGoReq) (*common.TaskReadyGoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTaskReadyGo not implemented")
}
func (*UnimplementedDataProviderServer) HandleCancelTask(ctx context.Context, req *common.TaskCancelReq) (*common.TaskCancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCancelTask not implemented")
}

func RegisterDataProviderServer(s *grpc.Server, srv DataProviderServer) {
	s.RegisterService(&_DataProvider_serviceDesc, srv)
}

func _DataProvider_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasvc.DataProvider/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_ListData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).ListData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasvc.DataProvider/ListData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).ListData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_UploadData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataProviderServer).UploadData(&dataProviderUploadDataServer{stream})
}

type DataProvider_UploadDataServer interface {
	SendAndClose(*UploadReply) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type dataProviderUploadDataServer struct {
	grpc.ServerStream
}

func (x *dataProviderUploadDataServer) SendAndClose(m *UploadReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataProviderUploadDataServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataProvider_BatchUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataProviderServer).BatchUpload(&dataProviderBatchUploadServer{stream})
}

type DataProvider_BatchUploadServer interface {
	Send(*UploadReply) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type dataProviderBatchUploadServer struct {
	grpc.ServerStream
}

func (x *dataProviderBatchUploadServer) Send(m *UploadReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataProviderBatchUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataProvider_DownloadData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataProviderServer).DownloadData(m, &dataProviderDownloadDataServer{stream})
}

type DataProvider_DownloadDataServer interface {
	Send(*DownloadReply) error
	grpc.ServerStream
}

type dataProviderDownloadDataServer struct {
	grpc.ServerStream
}

func (x *dataProviderDownloadDataServer) Send(m *DownloadReply) error {
	return x.ServerStream.SendMsg(m)
}

func _DataProvider_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasvc.DataProvider/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).DeleteData(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_SendSharesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSharesDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).SendSharesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasvc.DataProvider/SendSharesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).SendSharesData(ctx, req.(*SendSharesDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_HandleTaskReadyGo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TaskReadyGoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).HandleTaskReadyGo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasvc.DataProvider/HandleTaskReadyGo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).HandleTaskReadyGo(ctx, req.(*common.TaskReadyGoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_HandleCancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TaskCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).HandleCancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasvc.DataProvider/HandleCancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).HandleCancelTask(ctx, req.(*common.TaskCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datasvc.DataProvider",
	HandlerType: (*DataProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _DataProvider_GetStatus_Handler,
		},
		{
			MethodName: "ListData",
			Handler:    _DataProvider_ListData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _DataProvider_DeleteData_Handler,
		},
		{
			MethodName: "SendSharesData",
			Handler:    _DataProvider_SendSharesData_Handler,
		},
		{
			MethodName: "HandleTaskReadyGo",
			Handler:    _DataProvider_HandleTaskReadyGo_Handler,
		},
		{
			MethodName: "HandleCancelTask",
			Handler:    _DataProvider_HandleCancelTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadData",
			Handler:       _DataProvider_UploadData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchUpload",
			Handler:       _DataProvider_BatchUpload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadData",
			Handler:       _DataProvider_DownloadData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lib/fighter/datasvc/data_svc.proto",
}

func (m *DownloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownloadReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DownloadReply_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadReply_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintDataSvc(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *DownloadReply_Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadReply_Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Content != nil {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Keywords) > 0 {
		for iNdEx := len(m.Keywords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keywords[iNdEx])
			copy(dAtA[i:], m.Keywords[iNdEx])
			i = encodeVarintDataSvc(dAtA, i, uint64(len(m.Keywords[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ColDtypes) > 0 {
		for iNdEx := len(m.ColDtypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ColDtypes[iNdEx])
			copy(dAtA[i:], m.ColDtypes[iNdEx])
			i = encodeVarintDataSvc(dAtA, i, uint64(len(m.ColDtypes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Columns[iNdEx])
			copy(dAtA[i:], m.Columns[iNdEx])
			i = encodeVarintDataSvc(dAtA, i, uint64(len(m.Columns[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileType) > 0 {
		i -= len(m.FileType)
		copy(dAtA[i:], m.FileType)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.FileType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UploadRequest_Meta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadRequest_Meta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataSvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UploadRequest_Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadRequest_Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Content != nil {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UploadReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDataReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDataReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDataReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataSvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListDataReply_Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDataReply_Row) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDataReply_Row) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDataDetailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataDetailReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataDetailReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataSvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NRows != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.NRows))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDataDetailReply_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataDetailReply_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataDetailReply_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Dtype) > 0 {
		i -= len(m.Dtype)
		copy(dAtA[i:], m.Dtype)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.Dtype)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Column) > 0 {
		i -= len(m.Column)
		copy(dAtA[i:], m.Column)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.Column)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStatusReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatusReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IdleBandwidth != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.IdleBandwidth))
		i--
		dAtA[i] = 0x60
	}
	if m.UsedBandwidth != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.UsedBandwidth))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalBandwidth != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.TotalBandwidth))
		i--
		dAtA[i] = 0x50
	}
	if m.IdleDisk != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.IdleDisk))
		i--
		dAtA[i] = 0x48
	}
	if m.UsedDisk != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.UsedDisk))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalDisk != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.TotalDisk))
		i--
		dAtA[i] = 0x38
	}
	if m.IdleMemory != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.IdleMemory))
		i--
		dAtA[i] = 0x30
	}
	if m.UsedMemory != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.UsedMemory))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalMemory != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.TotalMemory))
		i--
		dAtA[i] = 0x20
	}
	if m.IdleCpu != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.IdleCpu))
		i--
		dAtA[i] = 0x18
	}
	if m.UsedCpu != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.UsedCpu))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalCpu != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.TotalCpu))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendSharesDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendSharesDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendSharesDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Receivers[iNdEx])
			copy(dAtA[i:], m.Receivers[iNdEx])
			i = encodeVarintDataSvc(dAtA, i, uint64(len(m.Receivers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintDataSvc(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendSharesDataReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendSharesDataReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendSharesDataReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintDataSvc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataSvc(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataSvc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DownloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownloadReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownloadReply_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovDataSvc(uint64(m.Status))
	return n
}
func (m *DownloadReply_Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = len(m.Content)
		n += 1 + l + sovDataSvc(uint64(l))
	}
	return n
}
func (m *FileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	l = len(m.FileType)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovDataSvc(uint64(l))
		}
	}
	if len(m.ColDtypes) > 0 {
		for _, s := range m.ColDtypes {
			l = len(s)
			n += 1 + l + sovDataSvc(uint64(l))
		}
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovDataSvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadRequest_Meta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovDataSvc(uint64(l))
	}
	return n
}
func (m *UploadRequest_Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = len(m.Content)
		n += 1 + l + sovDataSvc(uint64(l))
	}
	return n
}
func (m *UploadReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDataReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovDataSvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDataReply_Row) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovDataSvc(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDataDetailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NRows != 0 {
		n += 1 + sovDataSvc(uint64(m.NRows))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovDataSvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDataDetailReply_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Column)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	l = len(m.Dtype)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStatusReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCpu != 0 {
		n += 1 + sovDataSvc(uint64(m.TotalCpu))
	}
	if m.UsedCpu != 0 {
		n += 1 + sovDataSvc(uint64(m.UsedCpu))
	}
	if m.IdleCpu != 0 {
		n += 1 + sovDataSvc(uint64(m.IdleCpu))
	}
	if m.TotalMemory != 0 {
		n += 1 + sovDataSvc(uint64(m.TotalMemory))
	}
	if m.UsedMemory != 0 {
		n += 1 + sovDataSvc(uint64(m.UsedMemory))
	}
	if m.IdleMemory != 0 {
		n += 1 + sovDataSvc(uint64(m.IdleMemory))
	}
	if m.TotalDisk != 0 {
		n += 1 + sovDataSvc(uint64(m.TotalDisk))
	}
	if m.UsedDisk != 0 {
		n += 1 + sovDataSvc(uint64(m.UsedDisk))
	}
	if m.IdleDisk != 0 {
		n += 1 + sovDataSvc(uint64(m.IdleDisk))
	}
	if m.TotalBandwidth != 0 {
		n += 1 + sovDataSvc(uint64(m.TotalBandwidth))
	}
	if m.UsedBandwidth != 0 {
		n += 1 + sovDataSvc(uint64(m.UsedBandwidth))
	}
	if m.IdleBandwidth != 0 {
		n += 1 + sovDataSvc(uint64(m.IdleBandwidth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendSharesDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovDataSvc(uint64(l))
	}
	if len(m.Receivers) > 0 {
		for _, s := range m.Receivers {
			l = len(s)
			n += 1 + l + sovDataSvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendSharesDataReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovDataSvc(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDataSvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataSvc(x uint64) (n int) {
	return sovDataSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DownloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v TaskStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = &DownloadReply_Status{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &DownloadReply_Content{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDtypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColDtypes = append(m.ColDtypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FileInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &UploadRequest_Meta{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &UploadRequest_Content{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDataReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDataReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDataReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ListDataReply_Row{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDataReply_Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDataDetailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDataDetailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDataDetailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NRows", wireType)
			}
			m.NRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NRows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &GetDataDetailReply_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDataDetailReply_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Column = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatusReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCpu", wireType)
			}
			m.TotalCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCpu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCpu", wireType)
			}
			m.UsedCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedCpu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleCpu", wireType)
			}
			m.IdleCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleCpu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMemory", wireType)
			}
			m.TotalMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMemory", wireType)
			}
			m.UsedMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleMemory", wireType)
			}
			m.IdleMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisk", wireType)
			}
			m.TotalDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDisk", wireType)
			}
			m.UsedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleDisk", wireType)
			}
			m.IdleDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			m.TotalBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			m.UsedBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleBandwidth", wireType)
			}
			m.IdleBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendSharesDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendSharesDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendSharesDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendSharesDataReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendSharesDataReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendSharesDataReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataSvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataSvc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataSvc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataSvc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataSvc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataSvc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataSvc = fmt.Errorf("proto: unexpected end of group")
)
