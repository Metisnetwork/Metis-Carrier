// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/api/sys_rpc_api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 调度服务的信息
type YarnNodeInfo struct {
	NodeType             string                  `protobuf:"bytes,1,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	NodeId               string                  `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	InternalIp           string                  `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string                  `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string                  `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string                  `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	IdentityType         string                  `protobuf:"bytes,7,opt,name=identity_type,json=identityType,proto3" json:"identity_type,omitempty"`
	IdentityId           string                  `protobuf:"bytes,8,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	ResourceUsed         *ResourceUsedDetailShow `protobuf:"bytes,9,opt,name=resource_used,json=resourceUsed,proto3" json:"resource_used,omitempty"`
	Peers                []*YarnRegisteredPeer   `protobuf:"bytes,10,rep,name=peers,proto3" json:"peers,omitempty"`
	SeedPeers            []*SeedPeer             `protobuf:"bytes,11,rep,name=seed_peers,json=seedPeers,proto3" json:"seed_peers,omitempty"`
	State                string                  `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	Name                 string                  `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *YarnNodeInfo) Reset()         { *m = YarnNodeInfo{} }
func (m *YarnNodeInfo) String() string { return proto.CompactTextString(m) }
func (*YarnNodeInfo) ProtoMessage()    {}
func (*YarnNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{0}
}
func (m *YarnNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnNodeInfo.Merge(m, src)
}
func (m *YarnNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *YarnNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_YarnNodeInfo proto.InternalMessageInfo

func (m *YarnNodeInfo) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *YarnNodeInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *YarnNodeInfo) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *YarnNodeInfo) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *YarnNodeInfo) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *YarnNodeInfo) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

func (m *YarnNodeInfo) GetIdentityType() string {
	if m != nil {
		return m.IdentityType
	}
	return ""
}

func (m *YarnNodeInfo) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *YarnNodeInfo) GetResourceUsed() *ResourceUsedDetailShow {
	if m != nil {
		return m.ResourceUsed
	}
	return nil
}

func (m *YarnNodeInfo) GetPeers() []*YarnRegisteredPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *YarnNodeInfo) GetSeedPeers() []*SeedPeer {
	if m != nil {
		return m.SeedPeers
	}
	return nil
}

func (m *YarnNodeInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *YarnNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 调度服务的系统资源信息
type YarnNodeSysInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalMem             uint64   `protobuf:"varint,2,opt,name=total_mem,json=totalMem,proto3" json:"total_mem,omitempty"`
	UsedMem              uint64   `protobuf:"varint,3,opt,name=used_mem,json=usedMem,proto3" json:"used_mem,omitempty"`
	TotalProcessor       uint64   `protobuf:"varint,4,opt,name=total_processor,json=totalProcessor,proto3" json:"total_processor,omitempty"`
	UsedProcessor        uint64   `protobuf:"varint,5,opt,name=used_processor,json=usedProcessor,proto3" json:"used_processor,omitempty"`
	TotalBandwidth       uint64   `protobuf:"varint,6,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	UsedBandwidth        uint64   `protobuf:"varint,7,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"used_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YarnNodeSysInfo) Reset()         { *m = YarnNodeSysInfo{} }
func (m *YarnNodeSysInfo) String() string { return proto.CompactTextString(m) }
func (*YarnNodeSysInfo) ProtoMessage()    {}
func (*YarnNodeSysInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{1}
}
func (m *YarnNodeSysInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnNodeSysInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnNodeSysInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnNodeSysInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnNodeSysInfo.Merge(m, src)
}
func (m *YarnNodeSysInfo) XXX_Size() int {
	return m.Size()
}
func (m *YarnNodeSysInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnNodeSysInfo.DiscardUnknown(m)
}

var xxx_messageInfo_YarnNodeSysInfo proto.InternalMessageInfo

func (m *YarnNodeSysInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *YarnNodeSysInfo) GetTotalMem() uint64 {
	if m != nil {
		return m.TotalMem
	}
	return 0
}

func (m *YarnNodeSysInfo) GetUsedMem() uint64 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *YarnNodeSysInfo) GetTotalProcessor() uint64 {
	if m != nil {
		return m.TotalProcessor
	}
	return 0
}

func (m *YarnNodeSysInfo) GetUsedProcessor() uint64 {
	if m != nil {
		return m.UsedProcessor
	}
	return 0
}

func (m *YarnNodeSysInfo) GetTotalBandwidth() uint64 {
	if m != nil {
		return m.TotalBandwidth
	}
	return 0
}

func (m *YarnNodeSysInfo) GetUsedBandwidth() uint64 {
	if m != nil {
		return m.UsedBandwidth
	}
	return 0
}

// 调度服务上被注册的资源节点信息
type YarnRegisteredPeer struct {
	NodeType             string                    `protobuf:"bytes,1,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	NodeDetail           *YarnRegisteredPeerDetail `protobuf:"bytes,2,opt,name=node_detail,json=nodeDetail,proto3" json:"node_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *YarnRegisteredPeer) Reset()         { *m = YarnRegisteredPeer{} }
func (m *YarnRegisteredPeer) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredPeer) ProtoMessage()    {}
func (*YarnRegisteredPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{2}
}
func (m *YarnRegisteredPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredPeer.Merge(m, src)
}
func (m *YarnRegisteredPeer) XXX_Size() int {
	return m.Size()
}
func (m *YarnRegisteredPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredPeer.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredPeer proto.InternalMessageInfo

func (m *YarnRegisteredPeer) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *YarnRegisteredPeer) GetNodeDetail() *YarnRegisteredPeerDetail {
	if m != nil {
		return m.NodeDetail
	}
	return nil
}

type YarnRegisteredPeerDetail struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string   `protobuf:"bytes,2,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string   `protobuf:"bytes,3,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,4,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string   `protobuf:"bytes,5,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	ConnState            int32    `protobuf:"varint,6,opt,name=conn_state,json=connState,proto3" json:"conn_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YarnRegisteredPeerDetail) Reset()         { *m = YarnRegisteredPeerDetail{} }
func (m *YarnRegisteredPeerDetail) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredPeerDetail) ProtoMessage()    {}
func (*YarnRegisteredPeerDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{3}
}
func (m *YarnRegisteredPeerDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredPeerDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredPeerDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredPeerDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredPeerDetail.Merge(m, src)
}
func (m *YarnRegisteredPeerDetail) XXX_Size() int {
	return m.Size()
}
func (m *YarnRegisteredPeerDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredPeerDetail.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredPeerDetail proto.InternalMessageInfo

func (m *YarnRegisteredPeerDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetConnState() int32 {
	if m != nil {
		return m.ConnState
	}
	return 0
}

type SeedPeer struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string   `protobuf:"bytes,2,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,3,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ConnState            int32    `protobuf:"varint,4,opt,name=conn_state,json=connState,proto3" json:"conn_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeedPeer) Reset()         { *m = SeedPeer{} }
func (m *SeedPeer) String() string { return proto.CompactTextString(m) }
func (*SeedPeer) ProtoMessage()    {}
func (*SeedPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{4}
}
func (m *SeedPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeedPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeedPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeedPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedPeer.Merge(m, src)
}
func (m *SeedPeer) XXX_Size() int {
	return m.Size()
}
func (m *SeedPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedPeer.DiscardUnknown(m)
}

var xxx_messageInfo_SeedPeer proto.InternalMessageInfo

func (m *SeedPeer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SeedPeer) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *SeedPeer) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *SeedPeer) GetConnState() int32 {
	if m != nil {
		return m.ConnState
	}
	return 0
}

// 调度服务上的 计算服务详情信息
type YarnRegisteredJobNode struct {
	Id                   string                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string                        `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string                        `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string                        `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string                        `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	Information          *ResourceUsedDetailShow       `protobuf:"bytes,7,opt,name=information,proto3" json:"information,omitempty"`
	Duration             uint64                        `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Task                 *YarnRegisteredJobNodeTaskIds `protobuf:"bytes,9,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *YarnRegisteredJobNode) Reset()         { *m = YarnRegisteredJobNode{} }
func (m *YarnRegisteredJobNode) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredJobNode) ProtoMessage()    {}
func (*YarnRegisteredJobNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{5}
}
func (m *YarnRegisteredJobNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredJobNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredJobNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredJobNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredJobNode.Merge(m, src)
}
func (m *YarnRegisteredJobNode) XXX_Size() int {
	return m.Size()
}
func (m *YarnRegisteredJobNode) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredJobNode.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredJobNode proto.InternalMessageInfo

func (m *YarnRegisteredJobNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *YarnRegisteredJobNode) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *YarnRegisteredJobNode) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *YarnRegisteredJobNode) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *YarnRegisteredJobNode) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

func (m *YarnRegisteredJobNode) GetInformation() *ResourceUsedDetailShow {
	if m != nil {
		return m.Information
	}
	return nil
}

func (m *YarnRegisteredJobNode) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *YarnRegisteredJobNode) GetTask() *YarnRegisteredJobNodeTaskIds {
	if m != nil {
		return m.Task
	}
	return nil
}

type YarnRegisteredJobNodeTaskIds struct {
	Count                uint32   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	TaskIds              []string `protobuf:"bytes,2,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YarnRegisteredJobNodeTaskIds) Reset()         { *m = YarnRegisteredJobNodeTaskIds{} }
func (m *YarnRegisteredJobNodeTaskIds) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredJobNodeTaskIds) ProtoMessage()    {}
func (*YarnRegisteredJobNodeTaskIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{6}
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredJobNodeTaskIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredJobNodeTaskIds.Merge(m, src)
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_Size() int {
	return m.Size()
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredJobNodeTaskIds.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredJobNodeTaskIds proto.InternalMessageInfo

func (m *YarnRegisteredJobNodeTaskIds) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *YarnRegisteredJobNodeTaskIds) GetTaskIds() []string {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

type YarnRegisteredDataNode struct {
	Id                   string                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string                       `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string                       `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string                       `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string                       `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	Information          *ResourceUsedDetailShow      `protobuf:"bytes,7,opt,name=information,proto3" json:"information,omitempty"`
	Duration             uint64                       `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Delta                *YarnRegisteredDataNodeDelta `protobuf:"bytes,9,opt,name=delta,proto3" json:"delta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *YarnRegisteredDataNode) Reset()         { *m = YarnRegisteredDataNode{} }
func (m *YarnRegisteredDataNode) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredDataNode) ProtoMessage()    {}
func (*YarnRegisteredDataNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{7}
}
func (m *YarnRegisteredDataNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredDataNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredDataNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredDataNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredDataNode.Merge(m, src)
}
func (m *YarnRegisteredDataNode) XXX_Size() int {
	return m.Size()
}
func (m *YarnRegisteredDataNode) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredDataNode.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredDataNode proto.InternalMessageInfo

func (m *YarnRegisteredDataNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *YarnRegisteredDataNode) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *YarnRegisteredDataNode) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *YarnRegisteredDataNode) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *YarnRegisteredDataNode) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

func (m *YarnRegisteredDataNode) GetInformation() *ResourceUsedDetailShow {
	if m != nil {
		return m.Information
	}
	return nil
}

func (m *YarnRegisteredDataNode) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *YarnRegisteredDataNode) GetDelta() *YarnRegisteredDataNodeDelta {
	if m != nil {
		return m.Delta
	}
	return nil
}

type YarnRegisteredDataNodeDelta struct {
	FileCount            uint32   `protobuf:"varint,1,opt,name=fileCount,proto3" json:"fileCount,omitempty"`
	FileTotalSize        uint32   `protobuf:"varint,2,opt,name=fileTotalSize,proto3" json:"fileTotalSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YarnRegisteredDataNodeDelta) Reset()         { *m = YarnRegisteredDataNodeDelta{} }
func (m *YarnRegisteredDataNodeDelta) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredDataNodeDelta) ProtoMessage()    {}
func (*YarnRegisteredDataNodeDelta) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{8}
}
func (m *YarnRegisteredDataNodeDelta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredDataNodeDelta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredDataNodeDelta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredDataNodeDelta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredDataNodeDelta.Merge(m, src)
}
func (m *YarnRegisteredDataNodeDelta) XXX_Size() int {
	return m.Size()
}
func (m *YarnRegisteredDataNodeDelta) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredDataNodeDelta.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredDataNodeDelta proto.InternalMessageInfo

func (m *YarnRegisteredDataNodeDelta) GetFileCount() uint32 {
	if m != nil {
		return m.FileCount
	}
	return 0
}

func (m *YarnRegisteredDataNodeDelta) GetFileTotalSize() uint32 {
	if m != nil {
		return m.FileTotalSize
	}
	return 0
}

type GetNodeInfoResponse struct {
	Status               int32         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Information          *YarnNodeInfo `protobuf:"bytes,3,opt,name=information,proto3" json:"information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetNodeInfoResponse) Reset()         { *m = GetNodeInfoResponse{} }
func (m *GetNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoResponse) ProtoMessage()    {}
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{9}
}
func (m *GetNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoResponse.Merge(m, src)
}
func (m *GetNodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoResponse proto.InternalMessageInfo

func (m *GetNodeInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetNodeInfoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetNodeInfoResponse) GetInformation() *YarnNodeInfo {
	if m != nil {
		return m.Information
	}
	return nil
}

type GetRegisteredPeersResponse struct {
	Status               int32                     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	JobNodes             []*YarnRegisteredJobNode  `protobuf:"bytes,3,rep,name=job_nodes,json=jobNodes,proto3" json:"job_nodes,omitempty"`
	DataNodes            []*YarnRegisteredDataNode `protobuf:"bytes,4,rep,name=data_nodes,json=dataNodes,proto3" json:"data_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetRegisteredPeersResponse) Reset()         { *m = GetRegisteredPeersResponse{} }
func (m *GetRegisteredPeersResponse) String() string { return proto.CompactTextString(m) }
func (*GetRegisteredPeersResponse) ProtoMessage()    {}
func (*GetRegisteredPeersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{10}
}
func (m *GetRegisteredPeersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegisteredPeersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegisteredPeersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegisteredPeersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegisteredPeersResponse.Merge(m, src)
}
func (m *GetRegisteredPeersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRegisteredPeersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegisteredPeersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegisteredPeersResponse proto.InternalMessageInfo

func (m *GetRegisteredPeersResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetRegisteredPeersResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetRegisteredPeersResponse) GetJobNodes() []*YarnRegisteredJobNode {
	if m != nil {
		return m.JobNodes
	}
	return nil
}

func (m *GetRegisteredPeersResponse) GetDataNodes() []*YarnRegisteredDataNode {
	if m != nil {
		return m.DataNodes
	}
	return nil
}

type SetSeedNodeRequest struct {
	InternalIp           string   `protobuf:"bytes,1,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,2,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetSeedNodeRequest) Reset()         { *m = SetSeedNodeRequest{} }
func (m *SetSeedNodeRequest) String() string { return proto.CompactTextString(m) }
func (*SetSeedNodeRequest) ProtoMessage()    {}
func (*SetSeedNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{11}
}
func (m *SetSeedNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSeedNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSeedNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSeedNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSeedNodeRequest.Merge(m, src)
}
func (m *SetSeedNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetSeedNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSeedNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetSeedNodeRequest proto.InternalMessageInfo

func (m *SetSeedNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *SetSeedNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

type SetSeedNodeResponse struct {
	Status               int32     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	SeedPeer             *SeedPeer `protobuf:"bytes,3,opt,name=seed_peer,json=seedPeer,proto3" json:"seed_peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SetSeedNodeResponse) Reset()         { *m = SetSeedNodeResponse{} }
func (m *SetSeedNodeResponse) String() string { return proto.CompactTextString(m) }
func (*SetSeedNodeResponse) ProtoMessage()    {}
func (*SetSeedNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{12}
}
func (m *SetSeedNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSeedNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSeedNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSeedNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSeedNodeResponse.Merge(m, src)
}
func (m *SetSeedNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetSeedNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSeedNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetSeedNodeResponse proto.InternalMessageInfo

func (m *SetSeedNodeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SetSeedNodeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SetSeedNodeResponse) GetSeedPeer() *SeedPeer {
	if m != nil {
		return m.SeedPeer
	}
	return nil
}

type UpdateSeedNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string   `protobuf:"bytes,2,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,3,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSeedNodeRequest) Reset()         { *m = UpdateSeedNodeRequest{} }
func (m *UpdateSeedNodeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSeedNodeRequest) ProtoMessage()    {}
func (*UpdateSeedNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{13}
}
func (m *UpdateSeedNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSeedNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSeedNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSeedNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSeedNodeRequest.Merge(m, src)
}
func (m *UpdateSeedNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSeedNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSeedNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSeedNodeRequest proto.InternalMessageInfo

func (m *UpdateSeedNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateSeedNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *UpdateSeedNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

type GetSeedNodeListResponse struct {
	Status               int32       `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	SeedPeers            []*SeedPeer `protobuf:"bytes,3,rep,name=seed_peers,json=seedPeers,proto3" json:"seed_peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetSeedNodeListResponse) Reset()         { *m = GetSeedNodeListResponse{} }
func (m *GetSeedNodeListResponse) String() string { return proto.CompactTextString(m) }
func (*GetSeedNodeListResponse) ProtoMessage()    {}
func (*GetSeedNodeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{14}
}
func (m *GetSeedNodeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeedNodeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeedNodeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeedNodeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeedNodeListResponse.Merge(m, src)
}
func (m *GetSeedNodeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSeedNodeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeedNodeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeedNodeListResponse proto.InternalMessageInfo

func (m *GetSeedNodeListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetSeedNodeListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetSeedNodeListResponse) GetSeedPeers() []*SeedPeer {
	if m != nil {
		return m.SeedPeers
	}
	return nil
}

type SetDataNodeRequest struct {
	InternalIp           string   `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string   `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string   `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDataNodeRequest) Reset()         { *m = SetDataNodeRequest{} }
func (m *SetDataNodeRequest) String() string { return proto.CompactTextString(m) }
func (*SetDataNodeRequest) ProtoMessage()    {}
func (*SetDataNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{15}
}
func (m *SetDataNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDataNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDataNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDataNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDataNodeRequest.Merge(m, src)
}
func (m *SetDataNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetDataNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDataNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDataNodeRequest proto.InternalMessageInfo

func (m *SetDataNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *SetDataNodeRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *SetDataNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *SetDataNodeRequest) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

type SetDataNodeResponse struct {
	Status               int32                     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	DataNode             *YarnRegisteredPeerDetail `protobuf:"bytes,3,opt,name=data_node,json=dataNode,proto3" json:"data_node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SetDataNodeResponse) Reset()         { *m = SetDataNodeResponse{} }
func (m *SetDataNodeResponse) String() string { return proto.CompactTextString(m) }
func (*SetDataNodeResponse) ProtoMessage()    {}
func (*SetDataNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{16}
}
func (m *SetDataNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDataNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDataNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDataNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDataNodeResponse.Merge(m, src)
}
func (m *SetDataNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetDataNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDataNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetDataNodeResponse proto.InternalMessageInfo

func (m *SetDataNodeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SetDataNodeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SetDataNodeResponse) GetDataNode() *YarnRegisteredPeerDetail {
	if m != nil {
		return m.DataNode
	}
	return nil
}

type UpdateDataNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string   `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string   `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string   `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDataNodeRequest) Reset()         { *m = UpdateDataNodeRequest{} }
func (m *UpdateDataNodeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDataNodeRequest) ProtoMessage()    {}
func (*UpdateDataNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{17}
}
func (m *UpdateDataNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDataNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDataNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDataNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDataNodeRequest.Merge(m, src)
}
func (m *UpdateDataNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDataNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDataNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDataNodeRequest proto.InternalMessageInfo

func (m *UpdateDataNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateDataNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *UpdateDataNodeRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *UpdateDataNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *UpdateDataNodeRequest) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

type GetRegisteredNodeListResponse struct {
	Status               int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Nodes                []*YarnRegisteredPeer `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetRegisteredNodeListResponse) Reset()         { *m = GetRegisteredNodeListResponse{} }
func (m *GetRegisteredNodeListResponse) String() string { return proto.CompactTextString(m) }
func (*GetRegisteredNodeListResponse) ProtoMessage()    {}
func (*GetRegisteredNodeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{18}
}
func (m *GetRegisteredNodeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegisteredNodeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegisteredNodeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegisteredNodeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegisteredNodeListResponse.Merge(m, src)
}
func (m *GetRegisteredNodeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRegisteredNodeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegisteredNodeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegisteredNodeListResponse proto.InternalMessageInfo

func (m *GetRegisteredNodeListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetRegisteredNodeListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetRegisteredNodeListResponse) GetNodes() []*YarnRegisteredPeer {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type SetJobNodeRequest struct {
	InternalIp           string   `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string   `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string   `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetJobNodeRequest) Reset()         { *m = SetJobNodeRequest{} }
func (m *SetJobNodeRequest) String() string { return proto.CompactTextString(m) }
func (*SetJobNodeRequest) ProtoMessage()    {}
func (*SetJobNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{19}
}
func (m *SetJobNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetJobNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetJobNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetJobNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetJobNodeRequest.Merge(m, src)
}
func (m *SetJobNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetJobNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetJobNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetJobNodeRequest proto.InternalMessageInfo

func (m *SetJobNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *SetJobNodeRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *SetJobNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *SetJobNodeRequest) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

type SetJobNodeResponse struct {
	Status               int32                     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	JobNode              *YarnRegisteredPeerDetail `protobuf:"bytes,3,opt,name=job_node,json=jobNode,proto3" json:"job_node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SetJobNodeResponse) Reset()         { *m = SetJobNodeResponse{} }
func (m *SetJobNodeResponse) String() string { return proto.CompactTextString(m) }
func (*SetJobNodeResponse) ProtoMessage()    {}
func (*SetJobNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{20}
}
func (m *SetJobNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetJobNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetJobNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetJobNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetJobNodeResponse.Merge(m, src)
}
func (m *SetJobNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetJobNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetJobNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetJobNodeResponse proto.InternalMessageInfo

func (m *SetJobNodeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SetJobNodeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SetJobNodeResponse) GetJobNode() *YarnRegisteredPeerDetail {
	if m != nil {
		return m.JobNode
	}
	return nil
}

type UpdateJobNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string   `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string   `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string   `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateJobNodeRequest) Reset()         { *m = UpdateJobNodeRequest{} }
func (m *UpdateJobNodeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateJobNodeRequest) ProtoMessage()    {}
func (*UpdateJobNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{21}
}
func (m *UpdateJobNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateJobNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateJobNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateJobNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobNodeRequest.Merge(m, src)
}
func (m *UpdateJobNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateJobNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobNodeRequest proto.InternalMessageInfo

func (m *UpdateJobNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateJobNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *UpdateJobNodeRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *UpdateJobNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *UpdateJobNodeRequest) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

type ReportTaskEventRequest struct {
	TaskEvent            *TaskEventDeclare `protobuf:"bytes,1,opt,name=task_event,json=taskEvent,proto3" json:"task_event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReportTaskEventRequest) Reset()         { *m = ReportTaskEventRequest{} }
func (m *ReportTaskEventRequest) String() string { return proto.CompactTextString(m) }
func (*ReportTaskEventRequest) ProtoMessage()    {}
func (*ReportTaskEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{22}
}
func (m *ReportTaskEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportTaskEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportTaskEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportTaskEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportTaskEventRequest.Merge(m, src)
}
func (m *ReportTaskEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportTaskEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportTaskEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportTaskEventRequest proto.InternalMessageInfo

func (m *ReportTaskEventRequest) GetTaskEvent() *TaskEventDeclare {
	if m != nil {
		return m.TaskEvent
	}
	return nil
}

// 未定义
type ReportTaskResourceExpenseRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportTaskResourceExpenseRequest) Reset()         { *m = ReportTaskResourceExpenseRequest{} }
func (m *ReportTaskResourceExpenseRequest) String() string { return proto.CompactTextString(m) }
func (*ReportTaskResourceExpenseRequest) ProtoMessage()    {}
func (*ReportTaskResourceExpenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9da989a22daaf207, []int{23}
}
func (m *ReportTaskResourceExpenseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportTaskResourceExpenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportTaskResourceExpenseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportTaskResourceExpenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportTaskResourceExpenseRequest.Merge(m, src)
}
func (m *ReportTaskResourceExpenseRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportTaskResourceExpenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportTaskResourceExpenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportTaskResourceExpenseRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*YarnNodeInfo)(nil), "rpcapi.YarnNodeInfo")
	proto.RegisterType((*YarnNodeSysInfo)(nil), "rpcapi.YarnNodeSysInfo")
	proto.RegisterType((*YarnRegisteredPeer)(nil), "rpcapi.YarnRegisteredPeer")
	proto.RegisterType((*YarnRegisteredPeerDetail)(nil), "rpcapi.YarnRegisteredPeerDetail")
	proto.RegisterType((*SeedPeer)(nil), "rpcapi.SeedPeer")
	proto.RegisterType((*YarnRegisteredJobNode)(nil), "rpcapi.YarnRegisteredJobNode")
	proto.RegisterType((*YarnRegisteredJobNodeTaskIds)(nil), "rpcapi.YarnRegisteredJobNodeTaskIds")
	proto.RegisterType((*YarnRegisteredDataNode)(nil), "rpcapi.YarnRegisteredDataNode")
	proto.RegisterType((*YarnRegisteredDataNodeDelta)(nil), "rpcapi.YarnRegisteredDataNodeDelta")
	proto.RegisterType((*GetNodeInfoResponse)(nil), "rpcapi.GetNodeInfoResponse")
	proto.RegisterType((*GetRegisteredPeersResponse)(nil), "rpcapi.GetRegisteredPeersResponse")
	proto.RegisterType((*SetSeedNodeRequest)(nil), "rpcapi.SetSeedNodeRequest")
	proto.RegisterType((*SetSeedNodeResponse)(nil), "rpcapi.SetSeedNodeResponse")
	proto.RegisterType((*UpdateSeedNodeRequest)(nil), "rpcapi.UpdateSeedNodeRequest")
	proto.RegisterType((*GetSeedNodeListResponse)(nil), "rpcapi.GetSeedNodeListResponse")
	proto.RegisterType((*SetDataNodeRequest)(nil), "rpcapi.SetDataNodeRequest")
	proto.RegisterType((*SetDataNodeResponse)(nil), "rpcapi.SetDataNodeResponse")
	proto.RegisterType((*UpdateDataNodeRequest)(nil), "rpcapi.UpdateDataNodeRequest")
	proto.RegisterType((*GetRegisteredNodeListResponse)(nil), "rpcapi.GetRegisteredNodeListResponse")
	proto.RegisterType((*SetJobNodeRequest)(nil), "rpcapi.SetJobNodeRequest")
	proto.RegisterType((*SetJobNodeResponse)(nil), "rpcapi.SetJobNodeResponse")
	proto.RegisterType((*UpdateJobNodeRequest)(nil), "rpcapi.UpdateJobNodeRequest")
	proto.RegisterType((*ReportTaskEventRequest)(nil), "rpcapi.ReportTaskEventRequest")
	proto.RegisterType((*ReportTaskResourceExpenseRequest)(nil), "rpcapi.ReportTaskResourceExpenseRequest")
}

func init() { proto.RegisterFile("lib/api/sys_rpc_api.proto", fileDescriptor_9da989a22daaf207) }

var fileDescriptor_9da989a22daaf207 = []byte{
	// 1583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xd6, 0xfa, 0x23, 0xb1, 0x8f, 0xe3, 0xa4, 0xef, 0xb4, 0x4d, 0x1d, 0x27, 0x71, 0xfd, 0x4e,
	0x52, 0x9a, 0x06, 0x35, 0x2e, 0x41, 0x50, 0x28, 0xaa, 0x04, 0x4d, 0x4a, 0x14, 0xc4, 0x47, 0x58,
	0xb7, 0x17, 0xf4, 0xc6, 0x9a, 0x78, 0xa7, 0xc9, 0xb6, 0xf6, 0xce, 0xb2, 0x33, 0x6e, 0xea, 0x56,
	0x05, 0x89, 0xbf, 0xc0, 0x0d, 0x37, 0x08, 0x7e, 0x03, 0xfc, 0x02, 0xee, 0x90, 0x10, 0x12, 0x12,
	0xe2, 0x1e, 0x55, 0x5c, 0xf0, 0x27, 0x90, 0xd0, 0xcc, 0xee, 0xec, 0x87, 0xbd, 0xb6, 0x9b, 0x16,
	0xd4, 0x4a, 0xdc, 0x79, 0xcf, 0x3c, 0x73, 0x9e, 0x33, 0xe7, 0x39, 0x73, 0xce, 0x24, 0xb0, 0xd0,
	0xb1, 0xf7, 0x1b, 0xc4, 0xb5, 0x1b, 0xbc, 0xcf, 0x5b, 0x9e, 0xdb, 0x6e, 0x11, 0xd7, 0xde, 0x70,
	0x3d, 0x26, 0x18, 0x9a, 0xf2, 0xdc, 0x36, 0x71, 0xed, 0xea, 0x92, 0x86, 0xb4, 0x59, 0xb7, 0xcb,
	0x9c, 0x56, 0x97, 0x72, 0x4e, 0x0e, 0xa8, 0x8f, 0xaa, 0x56, 0xf5, 0xaa, 0x20, 0xfc, 0x6e, 0xd2,
	0x43, 0x75, 0xe9, 0x80, 0xb1, 0x83, 0x0e, 0x55, 0xcb, 0xc4, 0x71, 0x98, 0x20, 0xc2, 0x66, 0x0e,
	0xf7, 0x57, 0xf1, 0x9f, 0x59, 0x98, 0xf9, 0x84, 0x78, 0xce, 0x87, 0xcc, 0xa2, 0xbb, 0xce, 0x6d,
	0x86, 0x16, 0xa1, 0xe8, 0x30, 0x8b, 0xb6, 0x44, 0xdf, 0xa5, 0x15, 0xa3, 0x6e, 0xac, 0x15, 0xcd,
	0x82, 0x34, 0xdc, 0xe8, 0xbb, 0x14, 0x9d, 0x81, 0x69, 0xb5, 0x68, 0x5b, 0x95, 0x8c, 0x5a, 0x9a,
	0x92, 0x9f, 0xbb, 0x16, 0x3a, 0x0b, 0x25, 0xdb, 0x11, 0xd4, 0x73, 0x48, 0xa7, 0x65, 0xbb, 0x95,
	0xac, 0x5a, 0x04, 0x6d, 0xda, 0x75, 0x25, 0x80, 0xde, 0x8f, 0x00, 0x39, 0x1f, 0xa0, 0x4d, 0xbb,
	0x2e, 0x5a, 0x81, 0x72, 0xe8, 0xc1, 0x65, 0x9e, 0xa8, 0xe4, 0x15, 0x64, 0x46, 0x1b, 0xf7, 0x98,
	0x27, 0x24, 0x28, 0xf4, 0xa2, 0x40, 0x53, 0x3e, 0x48, 0x1b, 0x35, 0xc8, 0xb6, 0xa8, 0x23, 0x6c,
	0xd1, 0xf7, 0x4f, 0x31, 0x1d, 0x78, 0x0a, 0x8c, 0xea, 0x24, 0x32, 0x60, 0x0d, 0xb2, 0xad, 0x4a,
	0x21, 0x08, 0x38, 0x30, 0xed, 0x5a, 0x68, 0x0b, 0xca, 0x1e, 0xe5, 0xac, 0xe7, 0xb5, 0x69, 0xab,
	0xc7, 0xa9, 0x55, 0x29, 0xd6, 0x8d, 0xb5, 0xd2, 0x66, 0x6d, 0xc3, 0x17, 0x64, 0xc3, 0x0c, 0x16,
	0x6f, 0x72, 0x6a, 0x6d, 0x53, 0x41, 0xec, 0x4e, 0xf3, 0x90, 0x1d, 0x99, 0x33, 0x5e, 0xcc, 0x8e,
	0x2e, 0x41, 0xde, 0xa5, 0xd4, 0xe3, 0x15, 0xa8, 0x67, 0xd7, 0x4a, 0x9b, 0x55, 0xbd, 0x59, 0x66,
	0xdc, 0xa4, 0x07, 0x36, 0x17, 0xd4, 0xa3, 0xd6, 0x1e, 0xa5, 0x9e, 0xe9, 0x03, 0x51, 0x03, 0x80,
	0x53, 0x6a, 0xb5, 0xfc, 0x6d, 0x25, 0xb5, 0xed, 0x84, 0xde, 0xd6, 0xa4, 0x01, 0xb8, 0xc8, 0x83,
	0x5f, 0x1c, 0x9d, 0x82, 0x3c, 0x17, 0x44, 0xd0, 0xca, 0x8c, 0x3a, 0x82, 0xff, 0x81, 0x10, 0xe4,
	0x1c, 0xd2, 0xa5, 0x95, 0xb2, 0x32, 0xaa, 0xdf, 0xf8, 0x2f, 0x03, 0xe6, 0xb4, 0xd4, 0xcd, 0x3e,
	0x57, 0x6a, 0x6b, 0x9c, 0x11, 0xe1, 0x64, 0x05, 0x08, 0x26, 0x48, 0xa7, 0xd5, 0xa5, 0x5d, 0x25,
	0x73, 0xce, 0x2c, 0x28, 0xc3, 0x07, 0xb4, 0x8b, 0x16, 0xa0, 0x20, 0xb3, 0xa1, 0xd6, 0xb2, 0x6a,
	0x6d, 0x5a, 0x7e, 0xcb, 0xa5, 0xf3, 0x30, 0xe7, 0xef, 0x73, 0x3d, 0xd6, 0xa6, 0x9c, 0x33, 0x4f,
	0xc9, 0x9c, 0x33, 0x67, 0x95, 0x79, 0x4f, 0x5b, 0xd1, 0x39, 0x98, 0x55, 0x3e, 0x22, 0x5c, 0x5e,
	0xe1, 0xca, 0xd2, 0x1a, 0xc1, 0x42, 0x7f, 0xfb, 0xc4, 0xb1, 0x8e, 0x6c, 0x4b, 0x1c, 0x2a, 0xb9,
	0xb5, 0xbf, 0x6b, 0xda, 0x1a, 0xfa, 0x8b, 0x70, 0xd3, 0x91, 0xbf, 0x10, 0x86, 0x05, 0xa0, 0xe1,
	0xbc, 0x8f, 0xaf, 0xf7, 0x77, 0xa0, 0xa4, 0x16, 0x2d, 0x25, 0xb0, 0x4a, 0x46, 0x69, 0xb3, 0x3e,
	0x5a, 0x45, 0xbf, 0x10, 0x4c, 0x90, 0x9b, 0xfc, 0xdf, 0xf8, 0x37, 0x03, 0x2a, 0xa3, 0x80, 0x68,
	0x16, 0x32, 0xb6, 0x15, 0xb0, 0x66, 0xec, 0xa1, 0x6b, 0x94, 0x99, 0x74, 0x8d, 0xb2, 0x93, 0xaf,
	0x51, 0xee, 0x49, 0xae, 0x51, 0x3e, 0xe5, 0x1a, 0x2d, 0x03, 0xb4, 0x99, 0xe3, 0xb4, 0xfc, 0xea,
	0x92, 0x99, 0xcf, 0x9b, 0x45, 0x69, 0x69, 0x4a, 0x03, 0xfe, 0x1c, 0x0a, 0xba, 0x1c, 0x8f, 0x7f,
	0x8c, 0xa1, 0x28, 0xb3, 0x29, 0x51, 0x26, 0x03, 0xc8, 0x0d, 0x06, 0xf0, 0x53, 0x06, 0x4e, 0x27,
	0x13, 0xfb, 0x1e, 0xdb, 0x97, 0xb5, 0x1d, 0x84, 0x93, 0x19, 0x15, 0xce, 0x73, 0x6d, 0x4e, 0x6f,
	0xcb, 0x58, 0x6e, 0x33, 0xaf, 0xab, 0xba, 0xb0, 0x2a, 0xd4, 0xc9, 0x4d, 0x25, 0xbe, 0x05, 0x55,
	0xa1, 0x60, 0xf5, 0x3c, 0x7f, 0x7b, 0xc1, 0xbf, 0x9d, 0xfa, 0x1b, 0xbd, 0x01, 0x39, 0x39, 0x01,
	0x82, 0x5e, 0xb5, 0x9a, 0x5e, 0xa8, 0x41, 0x9a, 0x6e, 0x10, 0x7e, 0x77, 0xd7, 0xe2, 0xa6, 0xda,
	0x81, 0x3f, 0x82, 0xa5, 0x71, 0x28, 0xd9, 0x66, 0xda, 0xac, 0xe7, 0x08, 0xa5, 0x72, 0xd9, 0xf4,
	0x3f, 0x64, 0x37, 0x50, 0x13, 0xc7, 0xb6, 0x78, 0x25, 0x53, 0xcf, 0xae, 0x15, 0xcd, 0x69, 0xe1,
	0x6f, 0xc0, 0x3f, 0x67, 0x60, 0x3e, 0xe9, 0x71, 0x9b, 0x08, 0xf2, 0x1f, 0xd7, 0xe7, 0x4d, 0xc8,
	0x5b, 0xb4, 0x23, 0x48, 0x20, 0xd0, 0x4a, 0xba, 0x40, 0x3a, 0x51, 0xdb, 0x12, 0x6a, 0xfa, 0x3b,
	0x30, 0x81, 0xc5, 0x31, 0x28, 0xb4, 0x04, 0xc5, 0xdb, 0x76, 0x87, 0x6e, 0xc5, 0x34, 0x8a, 0x0c,
	0x68, 0x15, 0xca, 0xf2, 0xe3, 0x86, 0xec, 0x9b, 0x4d, 0xfb, 0x01, 0x55, 0xc9, 0x2f, 0x9b, 0x49,
	0x23, 0x3e, 0x82, 0x93, 0x3b, 0x54, 0xe8, 0x97, 0x80, 0x49, 0xb9, 0xcb, 0x1c, 0x4e, 0xd1, 0x3c,
	0x4c, 0xc9, 0x2b, 0xd8, 0xe3, 0xca, 0x6f, 0xde, 0x0c, 0xbe, 0xd0, 0x09, 0xc8, 0x76, 0xf9, 0x41,
	0xa0, 0xa3, 0xfc, 0x89, 0x5e, 0x4f, 0x26, 0x2f, 0xab, 0x0e, 0x79, 0x2a, 0x7e, 0xc8, 0xd0, 0x79,
	0x1c, 0x88, 0x7f, 0x30, 0xa0, 0xba, 0x43, 0x45, 0xb2, 0x45, 0xf2, 0xa7, 0x08, 0xe0, 0x0a, 0x14,
	0xef, 0xb0, 0xfd, 0x96, 0x6c, 0xbf, 0xbc, 0x92, 0x55, 0xc3, 0x73, 0x79, 0xec, 0x25, 0x30, 0x0b,
	0x77, 0xfc, 0x1f, 0x1c, 0x5d, 0x05, 0xb0, 0x88, 0x20, 0xc1, 0xe6, 0x9c, 0xda, 0x5c, 0x1b, 0x2f,
	0x90, 0x59, 0xb4, 0x82, 0x5f, 0x1c, 0xdf, 0x02, 0xd4, 0xa4, 0x42, 0xb6, 0x44, 0xb5, 0x42, 0x3f,
	0xed, 0x51, 0x2e, 0x06, 0x4b, 0xdb, 0x98, 0xdc, 0x09, 0x33, 0xc3, 0x95, 0x8b, 0x1d, 0x38, 0x99,
	0xf0, 0x7d, 0xec, 0xbc, 0x5c, 0x84, 0x62, 0xf8, 0xaa, 0x08, 0x64, 0x19, 0x7e, 0x54, 0x14, 0xf4,
	0xa3, 0x02, 0x77, 0xe1, 0xf4, 0x4d, 0xd7, 0x22, 0x82, 0x0e, 0x1e, 0xe7, 0x5f, 0x69, 0xf4, 0x58,
	0xc0, 0x99, 0x9d, 0xe8, 0x78, 0xef, 0xdb, 0x5c, 0x3c, 0xc5, 0x11, 0x93, 0x0f, 0xa7, 0xec, 0xc4,
	0x87, 0x13, 0xfe, 0xd6, 0x50, 0x8a, 0x85, 0x5a, 0xa6, 0x2b, 0xf6, 0x3c, 0x9b, 0x11, 0xfe, 0x4c,
	0xe9, 0x1e, 0x45, 0x78, 0xec, 0xa4, 0x5c, 0x85, 0x62, 0x58, 0xd3, 0x81, 0xee, 0x93, 0x5f, 0x2f,
	0x05, 0x5d, 0xd4, 0xf8, 0x7b, 0x43, 0x17, 0xc2, 0x60, 0x96, 0x26, 0x14, 0xc2, 0x73, 0xcd, 0xda,
	0x43, 0x58, 0x4e, 0x34, 0x93, 0x67, 0x28, 0xaa, 0x4b, 0x90, 0x8f, 0xf7, 0x92, 0xb1, 0xef, 0x77,
	0x05, 0xc4, 0xdf, 0x18, 0xf0, 0xbf, 0x26, 0x15, 0xba, 0xbd, 0xbc, 0x80, 0x45, 0xf5, 0x50, 0x95,
	0x7d, 0x18, 0xe0, 0xb1, 0x73, 0xf2, 0x16, 0x14, 0x74, 0x8f, 0x7d, 0xe2, 0x92, 0x9a, 0x0e, 0xba,
	0x2c, 0xfe, 0xce, 0x80, 0x53, 0x7e, 0x45, 0x0d, 0x64, 0xe8, 0x45, 0x2e, 0xa8, 0x8f, 0x61, 0xde,
	0xa4, 0x72, 0x55, 0x3e, 0x86, 0xae, 0xdf, 0xa3, 0x8e, 0xd0, 0x51, 0x5f, 0x06, 0x50, 0xef, 0x1f,
	0x2a, 0x8d, 0x2a, 0xfa, 0xd2, 0x66, 0x45, 0x67, 0x23, 0x44, 0x6f, 0xd3, 0x76, 0x87, 0x78, 0xd4,
	0x2c, 0x0a, 0x6d, 0xc1, 0x18, 0xea, 0x91, 0x4b, 0xfd, 0xaa, 0xb8, 0x7e, 0xdf, 0xa5, 0x0e, 0xd7,
	0x29, 0xd9, 0xfc, 0x7a, 0x0e, 0x4a, 0x32, 0xa3, 0x4d, 0xea, 0xdd, 0xb3, 0xdb, 0x14, 0x1d, 0x42,
	0x29, 0x36, 0x9e, 0xd1, 0xbc, 0xe6, 0xb9, 0xde, 0x75, 0x45, 0x7f, 0x87, 0x8a, 0x3d, 0xe2, 0x91,
	0x2e, 0xaf, 0x2e, 0x6a, 0x7b, 0xca, 0x2c, 0xc7, 0xab, 0x5f, 0xfc, 0xfa, 0xc7, 0x97, 0x99, 0x1a,
	0x5e, 0x68, 0xb4, 0x89, 0xe7, 0xd9, 0xd4, 0x6b, 0xdc, 0x7b, 0xa5, 0xd1, 0x27, 0x9e, 0xd3, 0x70,
	0x02, 0xe8, 0x15, 0x63, 0x1d, 0x3d, 0x02, 0x34, 0x3c, 0x8e, 0x47, 0x12, 0xe2, 0x18, 0xe1, 0x88,
	0x11, 0x8e, 0x5f, 0x56, 0xbc, 0xe7, 0x70, 0x7d, 0x88, 0xd7, 0x4b, 0xee, 0x90, 0xf4, 0x77, 0xa1,
	0x14, 0x1b, 0x77, 0xa8, 0x1a, 0x75, 0xf1, 0xc1, 0xf9, 0x1a, 0x1d, 0x36, 0x65, 0x3e, 0xe2, 0x15,
	0x45, 0xba, 0x8c, 0x2b, 0x43, 0xa4, 0xdc, 0x47, 0x4b, 0x32, 0x01, 0xb3, 0xc9, 0x59, 0x87, 0xc2,
	0x17, 0x43, 0xea, 0x0c, 0x1c, 0x4f, 0xf9, 0x92, 0xa2, 0xac, 0xe3, 0xc5, 0x21, 0xca, 0x5e, 0xe8,
	0x4c, 0xb2, 0xf6, 0x61, 0x76, 0x9b, 0x76, 0x68, 0x8c, 0x35, 0x7c, 0x0b, 0xfa, 0xf6, 0x64, 0xfb,
	0xd2, 0xdc, 0x51, 0x2a, 0xec, 0xae, 0xdb, 0x09, 0x69, 0xb7, 0xe4, 0xd5, 0x1a, 0x4d, 0x6d, 0x85,
	0x4c, 0x92, 0xda, 0x85, 0xb9, 0x81, 0x69, 0x3b, 0x52, 0xd9, 0xb3, 0x31, 0x65, 0xd3, 0xc6, 0xf3,
	0x98, 0x72, 0x92, 0x73, 0x56, 0x42, 0x25, 0x23, 0x53, 0x7a, 0x86, 0xcf, 0xff, 0xb8, 0x9e, 0x03,
	0x73, 0x25, 0x91, 0xdc, 0xc1, 0xb9, 0x87, 0xcf, 0x2b, 0xb6, 0xff, 0xe3, 0xa5, 0x34, 0x3d, 0x35,
	0x5a, 0x12, 0xde, 0xd7, 0x9a, 0x86, 0x9c, 0x03, 0x9a, 0x1e, 0x8b, 0x76, 0x5d, 0xd1, 0xae, 0xe2,
	0xb3, 0x23, 0x34, 0x8d, 0x33, 0x3f, 0xd2, 0xba, 0x86, 0xcc, 0xcf, 0xac, 0xeb, 0x68, 0x7a, 0x2b,
	0xc1, 0x24, 0xe9, 0x1f, 0x28, 0x6d, 0xb5, 0x65, 0xac, 0xb6, 0xe7, 0x52, 0x6f, 0xed, 0x90, 0xc2,
	0x6b, 0x8a, 0x1d, 0xe3, 0xe5, 0x61, 0xf6, 0x18, 0x8b, 0x7f, 0x6b, 0x21, 0x9a, 0x2b, 0x68, 0x21,
	0x96, 0xd1, 0x64, 0xab, 0xaf, 0x56, 0xd3, 0x96, 0x26, 0xde, 0x1f, 0x1e, 0x82, 0xfd, 0x5b, 0x5b,
	0x4e, 0x8c, 0x11, 0xb4, 0x94, 0x14, 0xf8, 0x18, 0x94, 0x17, 0x14, 0xe5, 0x0a, 0xae, 0x8d, 0x90,
	0x37, 0xc6, 0xfa, 0x10, 0xca, 0xbe, 0x8a, 0x9a, 0xf5, 0x99, 0xc5, 0x1d, 0x4d, 0x6e, 0xc5, 0x89,
	0x82, 0xa2, 0xde, 0x09, 0xa3, 0xff, 0x27, 0xa4, 0x1d, 0x7d, 0x9d, 0xee, 0x44, 0x24, 0x41, 0x55,
	0x0d, 0xcc, 0x3f, 0x14, 0xfb, 0x8b, 0x38, 0x6d, 0x30, 0x8e, 0x3d, 0xf3, 0xb8, 0x59, 0x90, 0x70,
	0x26, 0xb9, 0xbf, 0x32, 0x60, 0x61, 0xe4, 0xa4, 0x44, 0x6b, 0xc3, 0x61, 0xa4, 0x0f, 0xd3, 0xb1,
	0x01, 0xbd, 0xa6, 0x02, 0x6a, 0xe0, 0xf5, 0x31, 0x01, 0x0d, 0xb8, 0xbd, 0x62, 0xac, 0x5f, 0xbb,
	0xfc, 0xe3, 0xe3, 0x9a, 0xf1, 0xcb, 0xe3, 0x9a, 0xf1, 0xfb, 0xe3, 0x9a, 0x71, 0xeb, 0xc2, 0x81,
	0x2d, 0x0e, 0x7b, 0xfb, 0x1b, 0x6d, 0xd6, 0x6d, 0x98, 0x8c, 0x53, 0x21, 0xc8, 0xbb, 0x1d, 0x76,
	0xd4, 0xd8, 0xf2, 0x5d, 0x5e, 0xdc, 0x61, 0x8d, 0xe0, 0x9f, 0xf4, 0xfb, 0x53, 0xea, 0x5f, 0xef,
	0xaf, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x90, 0x39, 0x3e, 0xf7, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// YarnServiceClient is the client API for YarnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YarnServiceClient interface {
	// Getter YarnNode ...
	// 查看自身调度服务信息
	GetNodeInfo(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	// 查看自身调度服务的 peer注册信息
	GetRegisteredPeers(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetRegisteredPeersResponse, error)
	// about seed
	// 新增种子节点信息
	SetSeedNode(ctx context.Context, in *SetSeedNodeRequest, opts ...grpc.CallOption) (*SetSeedNodeResponse, error)
	// 修改种子节点信息
	UpdateSeedNode(ctx context.Context, in *UpdateSeedNodeRequest, opts ...grpc.CallOption) (*SetSeedNodeResponse, error)
	// 删除种子节点信息
	DeleteSeedNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error)
	// 查询种子节点列表
	GetSeedNodeList(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetSeedNodeListResponse, error)
	// about dataNode
	// 新增数据服务信息
	SetDataNode(ctx context.Context, in *SetDataNodeRequest, opts ...grpc.CallOption) (*SetDataNodeResponse, error)
	// 修改数据服务信息
	UpdateDataNode(ctx context.Context, in *UpdateDataNodeRequest, opts ...grpc.CallOption) (*SetDataNodeResponse, error)
	// 删除数据服务信息
	DeleteDataNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error)
	// 查询数据服务列表
	GetDataNodeList(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetRegisteredNodeListResponse, error)
	// about jobNode
	// 新增计算服务信息
	SetJobNode(ctx context.Context, in *SetJobNodeRequest, opts ...grpc.CallOption) (*SetJobNodeResponse, error)
	// 修改计算服务信息
	UpdateJobNode(ctx context.Context, in *UpdateJobNodeRequest, opts ...grpc.CallOption) (*SetJobNodeResponse, error)
	// 删除计算服务信息
	DeleteJobNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error)
	// 查询计算服务列表
	GetJobNodeList(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetRegisteredNodeListResponse, error)
	// about report
	// 上报任务事件
	ReportTaskEvent(ctx context.Context, in *ReportTaskEventRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error)
	// 上报资源使用实况
	ReportTaskResourceExpense(ctx context.Context, in *ReportTaskResourceExpenseRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error)
}

type yarnServiceClient struct {
	cc *grpc.ClientConn
}

func NewYarnServiceClient(cc *grpc.ClientConn) YarnServiceClient {
	return &yarnServiceClient{cc}
}

func (c *yarnServiceClient) GetNodeInfo(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GetRegisteredPeers(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetRegisteredPeersResponse, error) {
	out := new(GetRegisteredPeersResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/GetRegisteredPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) SetSeedNode(ctx context.Context, in *SetSeedNodeRequest, opts ...grpc.CallOption) (*SetSeedNodeResponse, error) {
	out := new(SetSeedNodeResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/SetSeedNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) UpdateSeedNode(ctx context.Context, in *UpdateSeedNodeRequest, opts ...grpc.CallOption) (*SetSeedNodeResponse, error) {
	out := new(SetSeedNodeResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/UpdateSeedNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) DeleteSeedNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error) {
	out := new(SimpleResponseCode)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/DeleteSeedNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GetSeedNodeList(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetSeedNodeListResponse, error) {
	out := new(GetSeedNodeListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/GetSeedNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) SetDataNode(ctx context.Context, in *SetDataNodeRequest, opts ...grpc.CallOption) (*SetDataNodeResponse, error) {
	out := new(SetDataNodeResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/SetDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) UpdateDataNode(ctx context.Context, in *UpdateDataNodeRequest, opts ...grpc.CallOption) (*SetDataNodeResponse, error) {
	out := new(SetDataNodeResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/UpdateDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) DeleteDataNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error) {
	out := new(SimpleResponseCode)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/DeleteDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GetDataNodeList(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetRegisteredNodeListResponse, error) {
	out := new(GetRegisteredNodeListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/GetDataNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) SetJobNode(ctx context.Context, in *SetJobNodeRequest, opts ...grpc.CallOption) (*SetJobNodeResponse, error) {
	out := new(SetJobNodeResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/SetJobNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) UpdateJobNode(ctx context.Context, in *UpdateJobNodeRequest, opts ...grpc.CallOption) (*SetJobNodeResponse, error) {
	out := new(SetJobNodeResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/UpdateJobNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) DeleteJobNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error) {
	out := new(SimpleResponseCode)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/DeleteJobNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GetJobNodeList(ctx context.Context, in *EmptyGetParams, opts ...grpc.CallOption) (*GetRegisteredNodeListResponse, error) {
	out := new(GetRegisteredNodeListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/GetJobNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) ReportTaskEvent(ctx context.Context, in *ReportTaskEventRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error) {
	out := new(SimpleResponseCode)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/ReportTaskEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) ReportTaskResourceExpense(ctx context.Context, in *ReportTaskResourceExpenseRequest, opts ...grpc.CallOption) (*SimpleResponseCode, error) {
	out := new(SimpleResponseCode)
	err := c.cc.Invoke(ctx, "/rpcapi.YarnService/ReportTaskResourceExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YarnServiceServer is the server API for YarnService service.
type YarnServiceServer interface {
	// Getter YarnNode ...
	// 查看自身调度服务信息
	GetNodeInfo(context.Context, *EmptyGetParams) (*GetNodeInfoResponse, error)
	// 查看自身调度服务的 peer注册信息
	GetRegisteredPeers(context.Context, *EmptyGetParams) (*GetRegisteredPeersResponse, error)
	// about seed
	// 新增种子节点信息
	SetSeedNode(context.Context, *SetSeedNodeRequest) (*SetSeedNodeResponse, error)
	// 修改种子节点信息
	UpdateSeedNode(context.Context, *UpdateSeedNodeRequest) (*SetSeedNodeResponse, error)
	// 删除种子节点信息
	DeleteSeedNode(context.Context, *DeleteRegisteredNodeRequest) (*SimpleResponseCode, error)
	// 查询种子节点列表
	GetSeedNodeList(context.Context, *EmptyGetParams) (*GetSeedNodeListResponse, error)
	// about dataNode
	// 新增数据服务信息
	SetDataNode(context.Context, *SetDataNodeRequest) (*SetDataNodeResponse, error)
	// 修改数据服务信息
	UpdateDataNode(context.Context, *UpdateDataNodeRequest) (*SetDataNodeResponse, error)
	// 删除数据服务信息
	DeleteDataNode(context.Context, *DeleteRegisteredNodeRequest) (*SimpleResponseCode, error)
	// 查询数据服务列表
	GetDataNodeList(context.Context, *EmptyGetParams) (*GetRegisteredNodeListResponse, error)
	// about jobNode
	// 新增计算服务信息
	SetJobNode(context.Context, *SetJobNodeRequest) (*SetJobNodeResponse, error)
	// 修改计算服务信息
	UpdateJobNode(context.Context, *UpdateJobNodeRequest) (*SetJobNodeResponse, error)
	// 删除计算服务信息
	DeleteJobNode(context.Context, *DeleteRegisteredNodeRequest) (*SimpleResponseCode, error)
	// 查询计算服务列表
	GetJobNodeList(context.Context, *EmptyGetParams) (*GetRegisteredNodeListResponse, error)
	// about report
	// 上报任务事件
	ReportTaskEvent(context.Context, *ReportTaskEventRequest) (*SimpleResponseCode, error)
	// 上报资源使用实况
	ReportTaskResourceExpense(context.Context, *ReportTaskResourceExpenseRequest) (*SimpleResponseCode, error)
}

// UnimplementedYarnServiceServer can be embedded to have forward compatible implementations.
type UnimplementedYarnServiceServer struct {
}

func (*UnimplementedYarnServiceServer) GetNodeInfo(ctx context.Context, req *EmptyGetParams) (*GetNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (*UnimplementedYarnServiceServer) GetRegisteredPeers(ctx context.Context, req *EmptyGetParams) (*GetRegisteredPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredPeers not implemented")
}
func (*UnimplementedYarnServiceServer) SetSeedNode(ctx context.Context, req *SetSeedNodeRequest) (*SetSeedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSeedNode not implemented")
}
func (*UnimplementedYarnServiceServer) UpdateSeedNode(ctx context.Context, req *UpdateSeedNodeRequest) (*SetSeedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeedNode not implemented")
}
func (*UnimplementedYarnServiceServer) DeleteSeedNode(ctx context.Context, req *DeleteRegisteredNodeRequest) (*SimpleResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeedNode not implemented")
}
func (*UnimplementedYarnServiceServer) GetSeedNodeList(ctx context.Context, req *EmptyGetParams) (*GetSeedNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeedNodeList not implemented")
}
func (*UnimplementedYarnServiceServer) SetDataNode(ctx context.Context, req *SetDataNodeRequest) (*SetDataNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDataNode not implemented")
}
func (*UnimplementedYarnServiceServer) UpdateDataNode(ctx context.Context, req *UpdateDataNodeRequest) (*SetDataNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataNode not implemented")
}
func (*UnimplementedYarnServiceServer) DeleteDataNode(ctx context.Context, req *DeleteRegisteredNodeRequest) (*SimpleResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataNode not implemented")
}
func (*UnimplementedYarnServiceServer) GetDataNodeList(ctx context.Context, req *EmptyGetParams) (*GetRegisteredNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataNodeList not implemented")
}
func (*UnimplementedYarnServiceServer) SetJobNode(ctx context.Context, req *SetJobNodeRequest) (*SetJobNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobNode not implemented")
}
func (*UnimplementedYarnServiceServer) UpdateJobNode(ctx context.Context, req *UpdateJobNodeRequest) (*SetJobNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobNode not implemented")
}
func (*UnimplementedYarnServiceServer) DeleteJobNode(ctx context.Context, req *DeleteRegisteredNodeRequest) (*SimpleResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobNode not implemented")
}
func (*UnimplementedYarnServiceServer) GetJobNodeList(ctx context.Context, req *EmptyGetParams) (*GetRegisteredNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobNodeList not implemented")
}
func (*UnimplementedYarnServiceServer) ReportTaskEvent(ctx context.Context, req *ReportTaskEventRequest) (*SimpleResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskEvent not implemented")
}
func (*UnimplementedYarnServiceServer) ReportTaskResourceExpense(ctx context.Context, req *ReportTaskResourceExpenseRequest) (*SimpleResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskResourceExpense not implemented")
}

func RegisterYarnServiceServer(s *grpc.Server, srv YarnServiceServer) {
	s.RegisterService(&_YarnService_serviceDesc, srv)
}

func _YarnService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetNodeInfo(ctx, req.(*EmptyGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GetRegisteredPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetRegisteredPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/GetRegisteredPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetRegisteredPeers(ctx, req.(*EmptyGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_SetSeedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSeedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).SetSeedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/SetSeedNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).SetSeedNode(ctx, req.(*SetSeedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_UpdateSeedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).UpdateSeedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/UpdateSeedNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).UpdateSeedNode(ctx, req.(*UpdateSeedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_DeleteSeedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisteredNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).DeleteSeedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/DeleteSeedNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).DeleteSeedNode(ctx, req.(*DeleteRegisteredNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GetSeedNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetSeedNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/GetSeedNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetSeedNodeList(ctx, req.(*EmptyGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_SetDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDataNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).SetDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/SetDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).SetDataNode(ctx, req.(*SetDataNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_UpdateDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).UpdateDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/UpdateDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).UpdateDataNode(ctx, req.(*UpdateDataNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_DeleteDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisteredNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).DeleteDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/DeleteDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).DeleteDataNode(ctx, req.(*DeleteRegisteredNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GetDataNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetDataNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/GetDataNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetDataNodeList(ctx, req.(*EmptyGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_SetJobNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).SetJobNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/SetJobNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).SetJobNode(ctx, req.(*SetJobNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_UpdateJobNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).UpdateJobNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/UpdateJobNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).UpdateJobNode(ctx, req.(*UpdateJobNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_DeleteJobNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisteredNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).DeleteJobNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/DeleteJobNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).DeleteJobNode(ctx, req.(*DeleteRegisteredNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GetJobNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetJobNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/GetJobNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetJobNodeList(ctx, req.(*EmptyGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_ReportTaskEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).ReportTaskEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/ReportTaskEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).ReportTaskEvent(ctx, req.(*ReportTaskEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_ReportTaskResourceExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskResourceExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).ReportTaskResourceExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.YarnService/ReportTaskResourceExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).ReportTaskResourceExpense(ctx, req.(*ReportTaskResourceExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YarnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcapi.YarnService",
	HandlerType: (*YarnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _YarnService_GetNodeInfo_Handler,
		},
		{
			MethodName: "GetRegisteredPeers",
			Handler:    _YarnService_GetRegisteredPeers_Handler,
		},
		{
			MethodName: "SetSeedNode",
			Handler:    _YarnService_SetSeedNode_Handler,
		},
		{
			MethodName: "UpdateSeedNode",
			Handler:    _YarnService_UpdateSeedNode_Handler,
		},
		{
			MethodName: "DeleteSeedNode",
			Handler:    _YarnService_DeleteSeedNode_Handler,
		},
		{
			MethodName: "GetSeedNodeList",
			Handler:    _YarnService_GetSeedNodeList_Handler,
		},
		{
			MethodName: "SetDataNode",
			Handler:    _YarnService_SetDataNode_Handler,
		},
		{
			MethodName: "UpdateDataNode",
			Handler:    _YarnService_UpdateDataNode_Handler,
		},
		{
			MethodName: "DeleteDataNode",
			Handler:    _YarnService_DeleteDataNode_Handler,
		},
		{
			MethodName: "GetDataNodeList",
			Handler:    _YarnService_GetDataNodeList_Handler,
		},
		{
			MethodName: "SetJobNode",
			Handler:    _YarnService_SetJobNode_Handler,
		},
		{
			MethodName: "UpdateJobNode",
			Handler:    _YarnService_UpdateJobNode_Handler,
		},
		{
			MethodName: "DeleteJobNode",
			Handler:    _YarnService_DeleteJobNode_Handler,
		},
		{
			MethodName: "GetJobNodeList",
			Handler:    _YarnService_GetJobNodeList_Handler,
		},
		{
			MethodName: "ReportTaskEvent",
			Handler:    _YarnService_ReportTaskEvent_Handler,
		},
		{
			MethodName: "ReportTaskResourceExpense",
			Handler:    _YarnService_ReportTaskResourceExpense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/api/sys_rpc_api.proto",
}

func (m *YarnNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnNodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SeedPeers) > 0 {
		for iNdEx := len(m.SeedPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeedPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.ResourceUsed != nil {
		{
			size, err := m.ResourceUsed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IdentityType) > 0 {
		i -= len(m.IdentityType)
		copy(dAtA[i:], m.IdentityType)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.IdentityType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *YarnNodeSysInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnNodeSysInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnNodeSysInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsedBandwidth != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.UsedBandwidth))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalBandwidth != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.TotalBandwidth))
		i--
		dAtA[i] = 0x30
	}
	if m.UsedProcessor != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.UsedProcessor))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalProcessor != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.TotalProcessor))
		i--
		dAtA[i] = 0x20
	}
	if m.UsedMem != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.UsedMem))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalMem != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.TotalMem))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodeDetail != nil {
		{
			size, err := m.NodeDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredPeerDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredPeerDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredPeerDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConnState != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.ConnState))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeedPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeedPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeedPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConnState != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.ConnState))
		i--
		dAtA[i] = 0x20
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredJobNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredJobNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredJobNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Duration != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x40
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredJobNodeTaskIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredJobNodeTaskIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredJobNodeTaskIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskIds) > 0 {
		for iNdEx := len(m.TaskIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskIds[iNdEx])
			copy(dAtA[i:], m.TaskIds[iNdEx])
			i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.TaskIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredDataNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredDataNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredDataNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Delta != nil {
		{
			size, err := m.Delta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Duration != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x40
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredDataNodeDelta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredDataNodeDelta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredDataNodeDelta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FileTotalSize != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.FileTotalSize))
		i--
		dAtA[i] = 0x10
	}
	if m.FileCount != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.FileCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRegisteredPeersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegisteredPeersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegisteredPeersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataNodes) > 0 {
		for iNdEx := len(m.DataNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.JobNodes) > 0 {
		for iNdEx := len(m.JobNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JobNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetSeedNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSeedNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSeedNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetSeedNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSeedNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSeedNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeedPeer != nil {
		{
			size, err := m.SeedPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSeedNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSeedNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeedNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSeedNodeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeedNodeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeedNodeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SeedPeers) > 0 {
		for iNdEx := len(m.SeedPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeedPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetDataNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDataNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDataNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *SetDataNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDataNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDataNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DataNode != nil {
		{
			size, err := m.DataNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDataNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDataNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDataNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRegisteredNodeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegisteredNodeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegisteredNodeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetJobNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetJobNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetJobNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *SetJobNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetJobNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetJobNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.JobNode != nil {
		{
			size, err := m.JobNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateJobNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateJobNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateJobNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportTaskEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportTaskEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportTaskEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskEvent != nil {
		{
			size, err := m.TaskEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportTaskResourceExpenseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportTaskResourceExpenseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportTaskResourceExpenseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintSysRpcApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovSysRpcApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *YarnNodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.IdentityType)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.ResourceUsed != nil {
		l = m.ResourceUsed.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if len(m.SeedPeers) > 0 {
		for _, e := range m.SeedPeers {
			l = e.Size()
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YarnNodeSysInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.TotalMem != 0 {
		n += 1 + sovSysRpcApi(uint64(m.TotalMem))
	}
	if m.UsedMem != 0 {
		n += 1 + sovSysRpcApi(uint64(m.UsedMem))
	}
	if m.TotalProcessor != 0 {
		n += 1 + sovSysRpcApi(uint64(m.TotalProcessor))
	}
	if m.UsedProcessor != 0 {
		n += 1 + sovSysRpcApi(uint64(m.UsedProcessor))
	}
	if m.TotalBandwidth != 0 {
		n += 1 + sovSysRpcApi(uint64(m.TotalBandwidth))
	}
	if m.UsedBandwidth != 0 {
		n += 1 + sovSysRpcApi(uint64(m.UsedBandwidth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YarnRegisteredPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.NodeDetail != nil {
		l = m.NodeDetail.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YarnRegisteredPeerDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.ConnState != 0 {
		n += 1 + sovSysRpcApi(uint64(m.ConnState))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeedPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.ConnState != 0 {
		n += 1 + sovSysRpcApi(uint64(m.ConnState))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YarnRegisteredJobNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Duration))
	}
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YarnRegisteredJobNodeTaskIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Count))
	}
	if len(m.TaskIds) > 0 {
		for _, s := range m.TaskIds {
			l = len(s)
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YarnRegisteredDataNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Duration))
	}
	if m.Delta != nil {
		l = m.Delta.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YarnRegisteredDataNodeDelta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileCount != 0 {
		n += 1 + sovSysRpcApi(uint64(m.FileCount))
	}
	if m.FileTotalSize != 0 {
		n += 1 + sovSysRpcApi(uint64(m.FileTotalSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRegisteredPeersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if len(m.JobNodes) > 0 {
		for _, e := range m.JobNodes {
			l = e.Size()
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if len(m.DataNodes) > 0 {
		for _, e := range m.DataNodes {
			l = e.Size()
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetSeedNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetSeedNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.SeedPeer != nil {
		l = m.SeedPeer.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSeedNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeedNodeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if len(m.SeedPeers) > 0 {
		for _, e := range m.SeedPeers {
			l = e.Size()
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDataNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDataNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.DataNode != nil {
		l = m.DataNode.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDataNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRegisteredNodeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetJobNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetJobNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.JobNode != nil {
		l = m.JobNode.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateJobNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportTaskEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskEvent != nil {
		l = m.TaskEvent.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportTaskResourceExpenseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSysRpcApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSysRpcApi(x uint64) (n int) {
	return sovSysRpcApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *YarnNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceUsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceUsed == nil {
				m.ResourceUsed = &ResourceUsedDetailShow{}
			}
			if err := m.ResourceUsed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &YarnRegisteredPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeedPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeedPeers = append(m.SeedPeers, &SeedPeer{})
			if err := m.SeedPeers[len(m.SeedPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnNodeSysInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnNodeSysInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnNodeSysInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMem", wireType)
			}
			m.TotalMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMem", wireType)
			}
			m.UsedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcessor", wireType)
			}
			m.TotalProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProcessor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedProcessor", wireType)
			}
			m.UsedProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedProcessor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			m.TotalBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			m.UsedBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeDetail == nil {
				m.NodeDetail = &YarnRegisteredPeerDetail{}
			}
			if err := m.NodeDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredPeerDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredPeerDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredPeerDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnState", wireType)
			}
			m.ConnState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeedPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeedPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeedPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnState", wireType)
			}
			m.ConnState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredJobNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredJobNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredJobNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &ResourceUsedDetailShow{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &YarnRegisteredJobNodeTaskIds{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredJobNodeTaskIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredJobNodeTaskIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredJobNodeTaskIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskIds = append(m.TaskIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredDataNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredDataNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredDataNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &ResourceUsedDetailShow{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delta == nil {
				m.Delta = &YarnRegisteredDataNodeDelta{}
			}
			if err := m.Delta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredDataNodeDelta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredDataNodeDelta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredDataNodeDelta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileCount", wireType)
			}
			m.FileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileTotalSize", wireType)
			}
			m.FileTotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileTotalSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &YarnNodeInfo{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegisteredPeersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegisteredPeersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegisteredPeersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobNodes = append(m.JobNodes, &YarnRegisteredJobNode{})
			if err := m.JobNodes[len(m.JobNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataNodes = append(m.DataNodes, &YarnRegisteredDataNode{})
			if err := m.DataNodes[len(m.DataNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSeedNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSeedNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSeedNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSeedNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSeedNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSeedNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeedPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeedPeer == nil {
				m.SeedPeer = &SeedPeer{}
			}
			if err := m.SeedPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSeedNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSeedNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSeedNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeedNodeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeedNodeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeedNodeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeedPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeedPeers = append(m.SeedPeers, &SeedPeer{})
			if err := m.SeedPeers[len(m.SeedPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDataNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDataNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDataNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDataNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDataNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDataNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataNode == nil {
				m.DataNode = &YarnRegisteredPeerDetail{}
			}
			if err := m.DataNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDataNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDataNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDataNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegisteredNodeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegisteredNodeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegisteredNodeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &YarnRegisteredPeer{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetJobNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetJobNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetJobNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetJobNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetJobNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetJobNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobNode == nil {
				m.JobNode = &YarnRegisteredPeerDetail{}
			}
			if err := m.JobNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateJobNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateJobNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateJobNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportTaskEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportTaskEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportTaskEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskEvent == nil {
				m.TaskEvent = &TaskEventDeclare{}
			}
			if err := m.TaskEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportTaskResourceExpenseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportTaskResourceExpenseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportTaskResourceExpenseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSysRpcApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSysRpcApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSysRpcApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSysRpcApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSysRpcApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSysRpcApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSysRpcApi = fmt.Errorf("proto: unexpected end of group")
)
