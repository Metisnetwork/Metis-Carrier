// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/api/power_rpc_api.proto

package api

import (
	context "context"
	fmt "fmt"
	common "github.com/RosettaFlow/Carrier-Go/lib/common"
	types "github.com/RosettaFlow/Carrier-Go/lib/types"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//  ------------------------  power  ------------------------
type GetPowerTotalDetailResponse struct {
	Owner                *common.Organization    `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Power                *types.PowerTotalDetail `protobuf:"bytes,2,opt,name=power,proto3" json:"power,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetPowerTotalDetailResponse) Reset()         { *m = GetPowerTotalDetailResponse{} }
func (m *GetPowerTotalDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetPowerTotalDetailResponse) ProtoMessage()    {}
func (*GetPowerTotalDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{0}
}
func (m *GetPowerTotalDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPowerTotalDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPowerTotalDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPowerTotalDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPowerTotalDetailResponse.Merge(m, src)
}
func (m *GetPowerTotalDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPowerTotalDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPowerTotalDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPowerTotalDetailResponse proto.InternalMessageInfo

func (m *GetPowerTotalDetailResponse) GetOwner() *common.Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetPowerTotalDetailResponse) GetPower() *types.PowerTotalDetail {
	if m != nil {
		return m.Power
	}
	return nil
}

type GetPowerTotalDetailListResponse struct {
	Status               int32                          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PowerList            []*GetPowerTotalDetailResponse `protobuf:"bytes,3,rep,name=power_list,json=powerList,proto3" json:"power_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GetPowerTotalDetailListResponse) Reset()         { *m = GetPowerTotalDetailListResponse{} }
func (m *GetPowerTotalDetailListResponse) String() string { return proto.CompactTextString(m) }
func (*GetPowerTotalDetailListResponse) ProtoMessage()    {}
func (*GetPowerTotalDetailListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{1}
}
func (m *GetPowerTotalDetailListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPowerTotalDetailListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPowerTotalDetailListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPowerTotalDetailListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPowerTotalDetailListResponse.Merge(m, src)
}
func (m *GetPowerTotalDetailListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPowerTotalDetailListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPowerTotalDetailListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPowerTotalDetailListResponse proto.InternalMessageInfo

func (m *GetPowerTotalDetailListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetPowerTotalDetailListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetPowerTotalDetailListResponse) GetPowerList() []*GetPowerTotalDetailResponse {
	if m != nil {
		return m.PowerList
	}
	return nil
}

type PublishPowerRequest struct {
	JobNodeId            string   `protobuf:"bytes,1,opt,name=job_node_id,json=jobNodeId,proto3" json:"job_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishPowerRequest) Reset()         { *m = PublishPowerRequest{} }
func (m *PublishPowerRequest) String() string { return proto.CompactTextString(m) }
func (*PublishPowerRequest) ProtoMessage()    {}
func (*PublishPowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{2}
}
func (m *PublishPowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishPowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishPowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishPowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishPowerRequest.Merge(m, src)
}
func (m *PublishPowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishPowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishPowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishPowerRequest proto.InternalMessageInfo

func (m *PublishPowerRequest) GetJobNodeId() string {
	if m != nil {
		return m.JobNodeId
	}
	return ""
}

type GetPowerSingleDetailResponse struct {
	Owner                *common.Organization     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Power                *types.PowerSingleDetail `protobuf:"bytes,2,opt,name=power,proto3" json:"power,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetPowerSingleDetailResponse) Reset()         { *m = GetPowerSingleDetailResponse{} }
func (m *GetPowerSingleDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetPowerSingleDetailResponse) ProtoMessage()    {}
func (*GetPowerSingleDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{3}
}
func (m *GetPowerSingleDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPowerSingleDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPowerSingleDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPowerSingleDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPowerSingleDetailResponse.Merge(m, src)
}
func (m *GetPowerSingleDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPowerSingleDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPowerSingleDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPowerSingleDetailResponse proto.InternalMessageInfo

func (m *GetPowerSingleDetailResponse) GetOwner() *common.Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetPowerSingleDetailResponse) GetPower() *types.PowerSingleDetail {
	if m != nil {
		return m.Power
	}
	return nil
}

type GetPowerSingleDetailListResponse struct {
	Status               int32                           `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PowerList            []*GetPowerSingleDetailResponse `protobuf:"bytes,3,rep,name=power_list,json=powerList,proto3" json:"power_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *GetPowerSingleDetailListResponse) Reset()         { *m = GetPowerSingleDetailListResponse{} }
func (m *GetPowerSingleDetailListResponse) String() string { return proto.CompactTextString(m) }
func (*GetPowerSingleDetailListResponse) ProtoMessage()    {}
func (*GetPowerSingleDetailListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{4}
}
func (m *GetPowerSingleDetailListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPowerSingleDetailListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPowerSingleDetailListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPowerSingleDetailListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPowerSingleDetailListResponse.Merge(m, src)
}
func (m *GetPowerSingleDetailListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPowerSingleDetailListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPowerSingleDetailListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPowerSingleDetailListResponse proto.InternalMessageInfo

func (m *GetPowerSingleDetailListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetPowerSingleDetailListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetPowerSingleDetailListResponse) GetPowerList() []*GetPowerSingleDetailResponse {
	if m != nil {
		return m.PowerList
	}
	return nil
}

type PublishPowerResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PowerId              string   `protobuf:"bytes,3,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishPowerResponse) Reset()         { *m = PublishPowerResponse{} }
func (m *PublishPowerResponse) String() string { return proto.CompactTextString(m) }
func (*PublishPowerResponse) ProtoMessage()    {}
func (*PublishPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{5}
}
func (m *PublishPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishPowerResponse.Merge(m, src)
}
func (m *PublishPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishPowerResponse proto.InternalMessageInfo

func (m *PublishPowerResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PublishPowerResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PublishPowerResponse) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

type RevokePowerRequest struct {
	PowerId              string   `protobuf:"bytes,1,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokePowerRequest) Reset()         { *m = RevokePowerRequest{} }
func (m *RevokePowerRequest) String() string { return proto.CompactTextString(m) }
func (*RevokePowerRequest) ProtoMessage()    {}
func (*RevokePowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{6}
}
func (m *RevokePowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokePowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokePowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokePowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokePowerRequest.Merge(m, src)
}
func (m *RevokePowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RevokePowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokePowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevokePowerRequest proto.InternalMessageInfo

func (m *RevokePowerRequest) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetPowerTotalDetailResponse)(nil), "rpcapi.GetPowerTotalDetailResponse")
	proto.RegisterType((*GetPowerTotalDetailListResponse)(nil), "rpcapi.GetPowerTotalDetailListResponse")
	proto.RegisterType((*PublishPowerRequest)(nil), "rpcapi.PublishPowerRequest")
	proto.RegisterType((*GetPowerSingleDetailResponse)(nil), "rpcapi.GetPowerSingleDetailResponse")
	proto.RegisterType((*GetPowerSingleDetailListResponse)(nil), "rpcapi.GetPowerSingleDetailListResponse")
	proto.RegisterType((*PublishPowerResponse)(nil), "rpcapi.PublishPowerResponse")
	proto.RegisterType((*RevokePowerRequest)(nil), "rpcapi.RevokePowerRequest")
}

func init() { proto.RegisterFile("lib/api/power_rpc_api.proto", fileDescriptor_e5594bc2f9a3f125) }

var fileDescriptor_e5594bc2f9a3f125 = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x41, 0x4f, 0xd4, 0x4e,
	0x18, 0xc6, 0x33, 0x6c, 0xe0, 0xff, 0xdf, 0x59, 0x0e, 0xa6, 0x2a, 0x94, 0xee, 0xba, 0xae, 0x85,
	0x08, 0x92, 0xd0, 0x2a, 0xc6, 0x98, 0x70, 0x04, 0x95, 0x90, 0x18, 0x25, 0xc5, 0x93, 0x1e, 0x36,
	0xd3, 0xf6, 0x65, 0x19, 0xe8, 0x76, 0xc6, 0x99, 0x29, 0x04, 0x0f, 0xc6, 0x90, 0x78, 0x36, 0xc6,
	0x2f, 0xe5, 0xd1, 0xc4, 0x2f, 0x60, 0x88, 0x9f, 0xc2, 0x93, 0xe9, 0x4c, 0x17, 0x5b, 0xb7, 0x6c,
	0xa2, 0xde, 0x76, 0xe6, 0x7d, 0xdf, 0xf9, 0x3d, 0xf3, 0x3c, 0x3b, 0xc5, 0xed, 0x84, 0x86, 0x3e,
	0xe1, 0xd4, 0xe7, 0xec, 0x04, 0x44, 0x5f, 0xf0, 0xa8, 0x4f, 0x38, 0xf5, 0xb8, 0x60, 0x8a, 0x59,
	0x33, 0x82, 0x47, 0x84, 0x53, 0xe7, 0x7a, 0xde, 0x14, 0xb1, 0xe1, 0x90, 0xa5, 0x7e, 0x48, 0x24,
	0x98, 0x72, 0x65, 0x3b, 0x26, 0x8a, 0x14, 0xdb, 0x9d, 0x7c, 0x5b, 0x9d, 0x72, 0x90, 0xbe, 0x00,
	0xc9, 0x32, 0x11, 0x41, 0xa9, 0xea, 0x8c, 0x80, 0x8a, 0xc8, 0xa3, 0x2a, 0xcf, 0xe9, 0x0c, 0x18,
	0x1b, 0x24, 0xa0, 0xcb, 0x24, 0x4d, 0x99, 0x22, 0x8a, 0xb2, 0x54, 0x16, 0xd5, 0x76, 0x51, 0xd5,
	0xab, 0x30, 0xdb, 0xf7, 0x61, 0xc8, 0xd5, 0xa9, 0x29, 0xba, 0x6f, 0x71, 0x7b, 0x1b, 0xd4, 0x6e,
	0x7e, 0x89, 0x17, 0x4c, 0x91, 0xe4, 0x11, 0x28, 0x42, 0x93, 0x00, 0x24, 0x67, 0xa9, 0x04, 0xeb,
	0x2e, 0x9e, 0x66, 0x27, 0x29, 0x08, 0x1b, 0xf5, 0xd0, 0x4a, 0x6b, 0xdd, 0xf1, 0x2e, 0xa0, 0x61,
	0xb6, 0xef, 0x3d, 0x17, 0x03, 0x92, 0xd2, 0x37, 0x9a, 0x16, 0x98, 0x46, 0x6b, 0x0d, 0x4f, 0x6b,
	0x4b, 0xec, 0x29, 0x3d, 0x31, 0xef, 0xe9, 0x1b, 0x79, 0x63, 0x04, 0xd3, 0xe5, 0x7e, 0x40, 0xf8,
	0x66, 0x8d, 0x80, 0xa7, 0x54, 0xaa, 0x0b, 0x11, 0x73, 0x78, 0x46, 0x2a, 0xa2, 0x32, 0xa9, 0x55,
	0x4c, 0x07, 0xc5, 0xca, 0xba, 0x82, 0x1b, 0x43, 0x39, 0xd0, 0xa0, 0x66, 0x90, 0xff, 0xb4, 0x36,
	0x31, 0x36, 0x79, 0x24, 0x54, 0x2a, 0xbb, 0xd1, 0x6b, 0xac, 0xb4, 0xd6, 0x17, 0x3d, 0x93, 0x86,
	0x37, 0xe1, 0x9e, 0x41, 0x53, 0x8f, 0xe5, 0x54, 0xf7, 0x01, 0xbe, 0xba, 0x9b, 0x85, 0x09, 0x95,
	0x07, 0xba, 0x3b, 0x80, 0xd7, 0x19, 0x48, 0x65, 0x75, 0x71, 0xeb, 0x90, 0x85, 0xfd, 0x94, 0xc5,
	0xd0, 0xa7, 0xb1, 0x56, 0xd2, 0x0c, 0x9a, 0x87, 0x2c, 0x7c, 0xc6, 0x62, 0xd8, 0x89, 0xdd, 0x77,
	0x08, 0x77, 0x46, 0x84, 0x3d, 0x9a, 0x0e, 0x12, 0xf8, 0x67, 0x2b, 0xbd, 0xaa, 0x95, 0x76, 0xd9,
	0xca, 0x0a, 0xa2, 0xf0, 0xf2, 0x23, 0xc2, 0xbd, 0x3a, 0x09, 0x7f, 0x69, 0xe6, 0x56, 0x8d, 0x99,
	0x4b, 0xbf, 0x9b, 0x59, 0x77, 0xd5, 0xb2, 0x9b, 0xaf, 0xf0, 0xb5, 0xaa, 0x9b, 0x7f, 0x2c, 0x63,
	0x01, 0xff, 0x6f, 0x64, 0xd0, 0xd8, 0x6e, 0xe8, 0xed, 0xff, 0xf4, 0x7a, 0x27, 0x76, 0x7d, 0x6c,
	0x05, 0x70, 0xcc, 0x8e, 0xa0, 0x92, 0x54, 0x79, 0x00, 0x55, 0x06, 0xd6, 0x7f, 0x34, 0xf0, 0xac,
	0x91, 0x0d, 0xe2, 0x98, 0x46, 0x60, 0x9d, 0x21, 0x3c, 0x7f, 0xc9, 0xdf, 0xcf, 0x9a, 0xf3, 0xcc,
	0xc3, 0xf9, 0x15, 0xd2, 0xe3, 0xfc, 0xe1, 0x38, 0xcb, 0x13, 0xfe, 0x50, 0x65, 0xab, 0xdd, 0xdb,
	0x67, 0x5f, 0xbf, 0x7f, 0x9a, 0xea, 0xb9, 0x6d, 0x3f, 0x22, 0x42, 0x50, 0x10, 0xfe, 0xf1, 0x3d,
	0xf3, 0xbd, 0xf0, 0x55, 0x3e, 0x92, 0x37, 0x6f, 0xa0, 0x55, 0xeb, 0x3d, 0xc2, 0xf6, 0x65, 0xb9,
	0x5d, 0xaa, 0x62, 0x65, 0x52, 0x12, 0x15, 0x19, 0xcb, 0x5a, 0xc6, 0x2d, 0xb7, 0x33, 0x2e, 0x43,
	0xea, 0x99, 0x91, 0x0e, 0x86, 0x67, 0xcb, 0x59, 0x59, 0xed, 0x11, 0xa2, 0xe6, 0x3d, 0x38, 0x9d,
	0xfa, 0x62, 0xc1, 0x5c, 0xd2, 0xcc, 0xae, 0xbb, 0x30, 0xce, 0xe4, 0xa6, 0x3f, 0x07, 0x26, 0xb8,
	0x55, 0xca, 0xcf, 0x72, 0x46, 0x47, 0x8e, 0x87, 0xea, 0x74, 0xaa, 0xcf, 0x65, 0x8f, 0x0e, 0x79,
	0x02, 0x17, 0xb8, 0x45, 0x8d, 0xbb, 0xe1, 0xda, 0xe3, 0x38, 0xa1, 0xcf, 0xda, 0x40, 0xab, 0x9b,
	0x0f, 0x3f, 0x9f, 0x77, 0xd1, 0x97, 0xf3, 0x2e, 0xfa, 0x76, 0xde, 0x45, 0x2f, 0xef, 0x0c, 0xa8,
	0x3a, 0xc8, 0x42, 0x2f, 0x62, 0x43, 0x3f, 0x60, 0x12, 0x94, 0x22, 0x4f, 0x12, 0x76, 0xe2, 0x6f,
	0x99, 0x03, 0xd6, 0xb6, 0x99, 0x5f, 0x7c, 0x71, 0xc3, 0x19, 0x8d, 0xbd, 0xff, 0x33, 0x00, 0x00,
	0xff, 0xff, 0xa0, 0x0d, 0xf2, 0x54, 0xf4, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PowerServiceClient is the client API for PowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PowerServiceClient interface {
	// 查看各个节点的总算力详情列表
	GetPowerTotalDetailList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPowerTotalDetailListResponse, error)
	// 查看某个节点各个单算力详情列表
	GetPowerSingleDetailList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPowerSingleDetailListResponse, error)
	// 启用算力 (发布算力)
	PublishPower(ctx context.Context, in *PublishPowerRequest, opts ...grpc.CallOption) (*PublishPowerResponse, error)
	// 停用算力 (撤销算力)
	RevokePower(ctx context.Context, in *RevokePowerRequest, opts ...grpc.CallOption) (*common.SimpleResponse, error)
}

type powerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPowerServiceClient(cc *grpc.ClientConn) PowerServiceClient {
	return &powerServiceClient{cc}
}

func (c *powerServiceClient) GetPowerTotalDetailList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPowerTotalDetailListResponse, error) {
	out := new(GetPowerTotalDetailListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.PowerService/GetPowerTotalDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) GetPowerSingleDetailList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPowerSingleDetailListResponse, error) {
	out := new(GetPowerSingleDetailListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.PowerService/GetPowerSingleDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) PublishPower(ctx context.Context, in *PublishPowerRequest, opts ...grpc.CallOption) (*PublishPowerResponse, error) {
	out := new(PublishPowerResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.PowerService/PublishPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) RevokePower(ctx context.Context, in *RevokePowerRequest, opts ...grpc.CallOption) (*common.SimpleResponse, error) {
	out := new(common.SimpleResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.PowerService/RevokePower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerServiceServer is the server API for PowerService service.
type PowerServiceServer interface {
	// 查看各个节点的总算力详情列表
	GetPowerTotalDetailList(context.Context, *empty.Empty) (*GetPowerTotalDetailListResponse, error)
	// 查看某个节点各个单算力详情列表
	GetPowerSingleDetailList(context.Context, *empty.Empty) (*GetPowerSingleDetailListResponse, error)
	// 启用算力 (发布算力)
	PublishPower(context.Context, *PublishPowerRequest) (*PublishPowerResponse, error)
	// 停用算力 (撤销算力)
	RevokePower(context.Context, *RevokePowerRequest) (*common.SimpleResponse, error)
}

// UnimplementedPowerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPowerServiceServer struct {
}

func (*UnimplementedPowerServiceServer) GetPowerTotalDetailList(ctx context.Context, req *empty.Empty) (*GetPowerTotalDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPowerTotalDetailList not implemented")
}
func (*UnimplementedPowerServiceServer) GetPowerSingleDetailList(ctx context.Context, req *empty.Empty) (*GetPowerSingleDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPowerSingleDetailList not implemented")
}
func (*UnimplementedPowerServiceServer) PublishPower(ctx context.Context, req *PublishPowerRequest) (*PublishPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPower not implemented")
}
func (*UnimplementedPowerServiceServer) RevokePower(ctx context.Context, req *RevokePowerRequest) (*common.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePower not implemented")
}

func RegisterPowerServiceServer(s *grpc.Server, srv PowerServiceServer) {
	s.RegisterService(&_PowerService_serviceDesc, srv)
}

func _PowerService_GetPowerTotalDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).GetPowerTotalDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.PowerService/GetPowerTotalDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).GetPowerTotalDetailList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_GetPowerSingleDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).GetPowerSingleDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.PowerService/GetPowerSingleDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).GetPowerSingleDetailList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_PublishPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).PublishPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.PowerService/PublishPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).PublishPower(ctx, req.(*PublishPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_RevokePower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).RevokePower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.PowerService/RevokePower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).RevokePower(ctx, req.(*RevokePowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PowerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcapi.PowerService",
	HandlerType: (*PowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPowerTotalDetailList",
			Handler:    _PowerService_GetPowerTotalDetailList_Handler,
		},
		{
			MethodName: "GetPowerSingleDetailList",
			Handler:    _PowerService_GetPowerSingleDetailList_Handler,
		},
		{
			MethodName: "PublishPower",
			Handler:    _PowerService_PublishPower_Handler,
		},
		{
			MethodName: "RevokePower",
			Handler:    _PowerService_RevokePower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/api/power_rpc_api.proto",
}

func (m *GetPowerTotalDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPowerTotalDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPowerTotalDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Power != nil {
		{
			size, err := m.Power.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPowerTotalDetailListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPowerTotalDetailListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPowerTotalDetailListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerList) > 0 {
		for iNdEx := len(m.PowerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PowerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishPowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishPowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishPowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JobNodeId) > 0 {
		i -= len(m.JobNodeId)
		copy(dAtA[i:], m.JobNodeId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.JobNodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPowerSingleDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPowerSingleDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPowerSingleDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Power != nil {
		{
			size, err := m.Power.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPowerSingleDetailListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPowerSingleDetailListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPowerSingleDetailListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerList) > 0 {
		for iNdEx := len(m.PowerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PowerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RevokePowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokePowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokePowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPowerRpcApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPowerRpcApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetPowerTotalDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.Power != nil {
		l = m.Power.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPowerTotalDetailListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if len(m.PowerList) > 0 {
		for _, e := range m.PowerList {
			l = e.Size()
			n += 1 + l + sovPowerRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishPowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobNodeId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPowerSingleDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.Power != nil {
		l = m.Power.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPowerSingleDetailListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if len(m.PowerList) > 0 {
		for _, e := range m.PowerList {
			l = e.Size()
			n += 1 + l + sovPowerRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RevokePowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPowerRpcApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPowerRpcApi(x uint64) (n int) {
	return sovPowerRpcApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetPowerTotalDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPowerTotalDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPowerTotalDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &common.Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Power == nil {
				m.Power = &types.PowerTotalDetail{}
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPowerTotalDetailListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPowerTotalDetailListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPowerTotalDetailListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerList = append(m.PowerList, &GetPowerTotalDetailResponse{})
			if err := m.PowerList[len(m.PowerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishPowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishPowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishPowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPowerSingleDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPowerSingleDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPowerSingleDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &common.Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Power == nil {
				m.Power = &types.PowerSingleDetail{}
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPowerSingleDetailListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPowerSingleDetailListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPowerSingleDetailListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerList = append(m.PowerList, &GetPowerSingleDetailResponse{})
			if err := m.PowerList[len(m.PowerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokePowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokePowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokePowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPowerRpcApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPowerRpcApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPowerRpcApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPowerRpcApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPowerRpcApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPowerRpcApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPowerRpcApi = fmt.Errorf("proto: unexpected end of group")
)
