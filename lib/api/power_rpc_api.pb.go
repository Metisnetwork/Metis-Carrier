// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/api/power_rpc_api.proto

package api

import (
	context "context"
	fmt "fmt"
	common "github.com/RosettaFlow/Carrier-Go/lib/common"
	types "github.com/RosettaFlow/Carrier-Go/lib/types"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 单个组织的总算力信息
type GetTotalPowerDetailResponse struct {
	Owner                *common.Organization    `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Power                *types.PowerUsageDetail `protobuf:"bytes,2,opt,name=power,proto3" json:"power,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetTotalPowerDetailResponse) Reset()         { *m = GetTotalPowerDetailResponse{} }
func (m *GetTotalPowerDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalPowerDetailResponse) ProtoMessage()    {}
func (*GetTotalPowerDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{0}
}
func (m *GetTotalPowerDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalPowerDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalPowerDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalPowerDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalPowerDetailResponse.Merge(m, src)
}
func (m *GetTotalPowerDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalPowerDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalPowerDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalPowerDetailResponse proto.InternalMessageInfo

func (m *GetTotalPowerDetailResponse) GetOwner() *common.Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetTotalPowerDetailResponse) GetPower() *types.PowerUsageDetail {
	if m != nil {
		return m.Power
	}
	return nil
}

// 全网各个组织的总算力列表 resp
type GetTotalPowerDetailListResponse struct {
	Status               int32                          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PowerList            []*GetTotalPowerDetailResponse `protobuf:"bytes,3,rep,name=power_list,json=powerList,proto3" json:"power_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GetTotalPowerDetailListResponse) Reset()         { *m = GetTotalPowerDetailListResponse{} }
func (m *GetTotalPowerDetailListResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalPowerDetailListResponse) ProtoMessage()    {}
func (*GetTotalPowerDetailListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{1}
}
func (m *GetTotalPowerDetailListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalPowerDetailListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalPowerDetailListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalPowerDetailListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalPowerDetailListResponse.Merge(m, src)
}
func (m *GetTotalPowerDetailListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalPowerDetailListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalPowerDetailListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalPowerDetailListResponse proto.InternalMessageInfo

func (m *GetTotalPowerDetailListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetTotalPowerDetailListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetTotalPowerDetailListResponse) GetPowerList() []*GetTotalPowerDetailResponse {
	if m != nil {
		return m.PowerList
	}
	return nil
}

// 本组织的单个算力信息
type GetSelfPowerDetailResponse struct {
	Owner                *common.Organization    `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Power                *types.PowerUsageDetail `protobuf:"bytes,2,opt,name=power,proto3" json:"power,omitempty"`
	JobNodeId            string                  `protobuf:"bytes,3,opt,name=job_node_id,json=jobNodeId,proto3" json:"job_node_id,omitempty"`
	PowerId              string                  `protobuf:"bytes,4,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetSelfPowerDetailResponse) Reset()         { *m = GetSelfPowerDetailResponse{} }
func (m *GetSelfPowerDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetSelfPowerDetailResponse) ProtoMessage()    {}
func (*GetSelfPowerDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{2}
}
func (m *GetSelfPowerDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSelfPowerDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSelfPowerDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSelfPowerDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSelfPowerDetailResponse.Merge(m, src)
}
func (m *GetSelfPowerDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSelfPowerDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSelfPowerDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSelfPowerDetailResponse proto.InternalMessageInfo

func (m *GetSelfPowerDetailResponse) GetOwner() *common.Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetSelfPowerDetailResponse) GetPower() *types.PowerUsageDetail {
	if m != nil {
		return m.Power
	}
	return nil
}

func (m *GetSelfPowerDetailResponse) GetJobNodeId() string {
	if m != nil {
		return m.JobNodeId
	}
	return ""
}

func (m *GetSelfPowerDetailResponse) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

// 本组织的多个算力信息列表 resp
type GetSelfPowerDetailListResponse struct {
	Status               int32                         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PowerList            []*GetSelfPowerDetailResponse `protobuf:"bytes,3,rep,name=power_list,json=powerList,proto3" json:"power_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GetSelfPowerDetailListResponse) Reset()         { *m = GetSelfPowerDetailListResponse{} }
func (m *GetSelfPowerDetailListResponse) String() string { return proto.CompactTextString(m) }
func (*GetSelfPowerDetailListResponse) ProtoMessage()    {}
func (*GetSelfPowerDetailListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{3}
}
func (m *GetSelfPowerDetailListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSelfPowerDetailListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSelfPowerDetailListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSelfPowerDetailListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSelfPowerDetailListResponse.Merge(m, src)
}
func (m *GetSelfPowerDetailListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSelfPowerDetailListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSelfPowerDetailListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSelfPowerDetailListResponse proto.InternalMessageInfo

func (m *GetSelfPowerDetailListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetSelfPowerDetailListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetSelfPowerDetailListResponse) GetPowerList() []*GetSelfPowerDetailResponse {
	if m != nil {
		return m.PowerList
	}
	return nil
}

// 启用算力 req
type PublishPowerRequest struct {
	JobNodeId            string   `protobuf:"bytes,1,opt,name=job_node_id,json=jobNodeId,proto3" json:"job_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishPowerRequest) Reset()         { *m = PublishPowerRequest{} }
func (m *PublishPowerRequest) String() string { return proto.CompactTextString(m) }
func (*PublishPowerRequest) ProtoMessage()    {}
func (*PublishPowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{4}
}
func (m *PublishPowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishPowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishPowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishPowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishPowerRequest.Merge(m, src)
}
func (m *PublishPowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishPowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishPowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishPowerRequest proto.InternalMessageInfo

func (m *PublishPowerRequest) GetJobNodeId() string {
	if m != nil {
		return m.JobNodeId
	}
	return ""
}

// 启用算力 resp
type PublishPowerResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PowerId              string   `protobuf:"bytes,3,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishPowerResponse) Reset()         { *m = PublishPowerResponse{} }
func (m *PublishPowerResponse) String() string { return proto.CompactTextString(m) }
func (*PublishPowerResponse) ProtoMessage()    {}
func (*PublishPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{5}
}
func (m *PublishPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishPowerResponse.Merge(m, src)
}
func (m *PublishPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishPowerResponse proto.InternalMessageInfo

func (m *PublishPowerResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PublishPowerResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PublishPowerResponse) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

// 停用算力 req
type RevokePowerRequest struct {
	PowerId              string   `protobuf:"bytes,1,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokePowerRequest) Reset()         { *m = RevokePowerRequest{} }
func (m *RevokePowerRequest) String() string { return proto.CompactTextString(m) }
func (*RevokePowerRequest) ProtoMessage()    {}
func (*RevokePowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5594bc2f9a3f125, []int{6}
}
func (m *RevokePowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokePowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokePowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokePowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokePowerRequest.Merge(m, src)
}
func (m *RevokePowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RevokePowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokePowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevokePowerRequest proto.InternalMessageInfo

func (m *RevokePowerRequest) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetTotalPowerDetailResponse)(nil), "rpcapi.GetTotalPowerDetailResponse")
	proto.RegisterType((*GetTotalPowerDetailListResponse)(nil), "rpcapi.GetTotalPowerDetailListResponse")
	proto.RegisterType((*GetSelfPowerDetailResponse)(nil), "rpcapi.GetSelfPowerDetailResponse")
	proto.RegisterType((*GetSelfPowerDetailListResponse)(nil), "rpcapi.GetSelfPowerDetailListResponse")
	proto.RegisterType((*PublishPowerRequest)(nil), "rpcapi.PublishPowerRequest")
	proto.RegisterType((*PublishPowerResponse)(nil), "rpcapi.PublishPowerResponse")
	proto.RegisterType((*RevokePowerRequest)(nil), "rpcapi.RevokePowerRequest")
}

func init() { proto.RegisterFile("lib/api/power_rpc_api.proto", fileDescriptor_e5594bc2f9a3f125) }

var fileDescriptor_e5594bc2f9a3f125 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xcf, 0x4e, 0xd4, 0x40,
	0x1c, 0xce, 0xb0, 0x82, 0x32, 0xcb, 0xc1, 0x8c, 0x0a, 0x4b, 0x77, 0x5d, 0x48, 0x51, 0x44, 0x12,
	0x5a, 0xc5, 0x18, 0x13, 0x6e, 0xe2, 0x1f, 0x42, 0x62, 0x94, 0x14, 0xbd, 0xe8, 0x61, 0x33, 0x6d,
	0x7f, 0xbb, 0x0c, 0xb4, 0x9d, 0x71, 0x66, 0x0a, 0xc1, 0x83, 0x26, 0xdc, 0x8d, 0x07, 0x5f, 0xc6,
	0x47, 0xf0, 0x68, 0xe2, 0x0b, 0x18, 0xe2, 0x1b, 0xf8, 0x02, 0xa6, 0xd3, 0xee, 0xda, 0xb2, 0xbb,
	0x24, 0x7a, 0xf1, 0xd6, 0x99, 0xef, 0xf7, 0x9b, 0xef, 0xfb, 0x7d, 0xdf, 0x4c, 0x71, 0x33, 0x62,
	0xbe, 0x4b, 0x05, 0x73, 0x05, 0x3f, 0x02, 0xd9, 0x91, 0x22, 0xe8, 0x50, 0xc1, 0x1c, 0x21, 0xb9,
	0xe6, 0x64, 0x4a, 0x8a, 0x80, 0x0a, 0x66, 0x5d, 0xcb, 0x8a, 0x02, 0x1e, 0xc7, 0x3c, 0x71, 0x7d,
	0xaa, 0x20, 0x87, 0x2b, 0xdb, 0x21, 0xd5, 0xb4, 0xd8, 0x6e, 0x65, 0xdb, 0xfa, 0x58, 0x80, 0x72,
	0x25, 0x28, 0x9e, 0xca, 0x00, 0x4a, 0xa8, 0xd5, 0x27, 0xd4, 0x54, 0x1d, 0x54, 0xf9, 0xac, 0x56,
	0x8f, 0xf3, 0x5e, 0x04, 0x06, 0xa6, 0x49, 0xc2, 0x35, 0xd5, 0x8c, 0x27, 0xaa, 0x40, 0x9b, 0x05,
	0x6a, 0x56, 0x7e, 0xda, 0x75, 0x21, 0x16, 0xfa, 0x38, 0x07, 0xed, 0xf7, 0xb8, 0xb9, 0x05, 0xfa,
	0x25, 0xd7, 0x34, 0xda, 0xc9, 0x26, 0x79, 0x0c, 0x9a, 0xb2, 0xc8, 0x03, 0x25, 0x78, 0xa2, 0x80,
	0xdc, 0xc1, 0x93, 0xfc, 0x28, 0x01, 0xd9, 0x40, 0x8b, 0x68, 0xa5, 0xbe, 0x6e, 0x39, 0x03, 0x52,
	0x3f, 0xed, 0x3a, 0x2f, 0x64, 0x8f, 0x26, 0xec, 0x9d, 0x61, 0xf3, 0xf2, 0x42, 0xb2, 0x86, 0x27,
	0x8d, 0x25, 0x8d, 0x09, 0xd3, 0x31, 0xe7, 0x98, 0x89, 0x1c, 0x73, 0xf8, 0x2b, 0x45, 0x7b, 0x50,
	0x30, 0xe4, 0x55, 0xf6, 0x27, 0x84, 0x17, 0x46, 0x08, 0x78, 0xc6, 0x94, 0x1e, 0x88, 0x98, 0xc5,
	0x53, 0x4a, 0x53, 0x9d, 0x2a, 0xa3, 0x62, 0xd2, 0x2b, 0x56, 0xe4, 0x32, 0xae, 0xc5, 0xaa, 0x67,
	0x88, 0xa6, 0xbd, 0xec, 0x93, 0x6c, 0x62, 0x9c, 0xe7, 0x11, 0x31, 0xa5, 0x1b, 0xb5, 0xc5, 0xda,
	0x4a, 0x7d, 0x7d, 0xc9, 0xc9, 0xd3, 0x70, 0xce, 0x99, 0xd3, 0x9b, 0x36, 0x6d, 0x19, 0xab, 0xfd,
	0x05, 0x61, 0x6b, 0x0b, 0xf4, 0x2e, 0x44, 0xdd, 0xff, 0xe1, 0x08, 0x69, 0xe3, 0xfa, 0x3e, 0xf7,
	0x3b, 0x09, 0x0f, 0xa1, 0xc3, 0xc2, 0x46, 0xcd, 0x4c, 0x37, 0xbd, 0xcf, 0xfd, 0xe7, 0x3c, 0x84,
	0xed, 0x90, 0xcc, 0xe3, 0x4b, 0xf9, 0x8c, 0x2c, 0x6c, 0x5c, 0x30, 0xe0, 0x45, 0xb3, 0xde, 0x0e,
	0xed, 0x8f, 0x08, 0xb7, 0x87, 0xa5, 0xff, 0xa3, 0x97, 0x0f, 0x47, 0x78, 0x69, 0x97, 0xbc, 0x1c,
	0x63, 0x50, 0xd9, 0xca, 0xfb, 0xf8, 0xca, 0x4e, 0xea, 0x47, 0x4c, 0xed, 0x99, 0x42, 0x0f, 0xde,
	0xa6, 0xa0, 0xf4, 0xd9, 0x09, 0xd1, 0x99, 0x09, 0xed, 0x37, 0xf8, 0x6a, 0xb5, 0xed, 0xaf, 0xb5,
	0x97, 0x3d, 0xaa, 0x55, 0x3d, 0x72, 0x31, 0xf1, 0xe0, 0x90, 0x1f, 0x40, 0x45, 0x52, 0xb9, 0x01,
	0x55, 0x1a, 0xd6, 0x7f, 0xd5, 0xf0, 0x8c, 0xa9, 0xdd, 0x05, 0x79, 0xc8, 0x02, 0x20, 0x27, 0x08,
	0xcf, 0x8d, 0xb9, 0xb2, 0x64, 0xd6, 0xc9, 0x1f, 0xdb, 0x9f, 0x1b, 0xf1, 0x24, 0x7b, 0x6c, 0xd6,
	0xad, 0x73, 0x2e, 0x61, 0x39, 0x1f, 0x7b, 0xf9, 0xe4, 0xfb, 0xcf, 0xcf, 0x13, 0x8b, 0x76, 0xd3,
	0x0d, 0xa8, 0x94, 0x0c, 0xa4, 0x7b, 0x78, 0x37, 0xff, 0xc7, 0xb8, 0x3a, 0xeb, 0xcb, 0x8a, 0x37,
	0xd0, 0x2a, 0xf9, 0x80, 0x67, 0x47, 0x27, 0x3d, 0x56, 0xc2, 0xf2, 0xf8, 0xec, 0x2a, 0x0a, 0x6e,
	0x1a, 0x05, 0x0b, 0xb6, 0x35, 0xac, 0x40, 0x41, 0xd4, 0xed, 0x0b, 0xe0, 0x78, 0xa6, 0x1c, 0x12,
	0x69, 0xf6, 0x8f, 0x1f, 0x91, 0xb8, 0xd5, 0x1a, 0x0d, 0x16, 0x8c, 0x37, 0x0c, 0x63, 0xdb, 0x9e,
	0x1f, 0x66, 0x14, 0x79, 0x7d, 0x46, 0x18, 0xe1, 0x7a, 0x29, 0x38, 0x62, 0xf5, 0x8f, 0x1c, 0x4e,
	0xd3, 0x6a, 0x55, 0x1f, 0xe5, 0x2e, 0x8b, 0x45, 0x04, 0x03, 0xba, 0x25, 0x43, 0x77, 0xdd, 0x6e,
	0x0c, 0xd3, 0x49, 0x73, 0xd6, 0x06, 0x5a, 0xdd, 0x7c, 0xf0, 0xf5, 0xb4, 0x8d, 0xbe, 0x9d, 0xb6,
	0xd1, 0x8f, 0xd3, 0x36, 0x7a, 0x7d, 0xbb, 0xc7, 0xf4, 0x5e, 0xea, 0x3b, 0x01, 0x8f, 0x5d, 0x8f,
	0x2b, 0xd0, 0x9a, 0x3e, 0x8d, 0xf8, 0x91, 0xfb, 0x28, 0x3f, 0x60, 0x6d, 0x8b, 0xbb, 0xc5, 0xef,
	0xd9, 0x9f, 0x32, 0xb4, 0xf7, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x29, 0xfc, 0xd7, 0x97, 0x21,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PowerServiceClient is the client API for PowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PowerServiceClient interface {
	// 查看全网各个组织的总算力详情列表
	GetTotalPowerDetailList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTotalPowerDetailListResponse, error)
	// 查看本组织的各个单算力详情列表
	GetSelfPowerDetailList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSelfPowerDetailListResponse, error)
	// 启用算力 (发布算力)
	PublishPower(ctx context.Context, in *PublishPowerRequest, opts ...grpc.CallOption) (*PublishPowerResponse, error)
	// 停用算力 (撤销算力)
	RevokePower(ctx context.Context, in *RevokePowerRequest, opts ...grpc.CallOption) (*common.SimpleResponse, error)
}

type powerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPowerServiceClient(cc *grpc.ClientConn) PowerServiceClient {
	return &powerServiceClient{cc}
}

func (c *powerServiceClient) GetTotalPowerDetailList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTotalPowerDetailListResponse, error) {
	out := new(GetTotalPowerDetailListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.PowerService/GetTotalPowerDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) GetSelfPowerDetailList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSelfPowerDetailListResponse, error) {
	out := new(GetSelfPowerDetailListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.PowerService/GetSelfPowerDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) PublishPower(ctx context.Context, in *PublishPowerRequest, opts ...grpc.CallOption) (*PublishPowerResponse, error) {
	out := new(PublishPowerResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.PowerService/PublishPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) RevokePower(ctx context.Context, in *RevokePowerRequest, opts ...grpc.CallOption) (*common.SimpleResponse, error) {
	out := new(common.SimpleResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.PowerService/RevokePower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerServiceServer is the server API for PowerService service.
type PowerServiceServer interface {
	// 查看全网各个组织的总算力详情列表
	GetTotalPowerDetailList(context.Context, *emptypb.Empty) (*GetTotalPowerDetailListResponse, error)
	// 查看本组织的各个单算力详情列表
	GetSelfPowerDetailList(context.Context, *emptypb.Empty) (*GetSelfPowerDetailListResponse, error)
	// 启用算力 (发布算力)
	PublishPower(context.Context, *PublishPowerRequest) (*PublishPowerResponse, error)
	// 停用算力 (撤销算力)
	RevokePower(context.Context, *RevokePowerRequest) (*common.SimpleResponse, error)
}

// UnimplementedPowerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPowerServiceServer struct {
}

func (*UnimplementedPowerServiceServer) GetTotalPowerDetailList(ctx context.Context, req *emptypb.Empty) (*GetTotalPowerDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalPowerDetailList not implemented")
}
func (*UnimplementedPowerServiceServer) GetSelfPowerDetailList(ctx context.Context, req *emptypb.Empty) (*GetSelfPowerDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfPowerDetailList not implemented")
}
func (*UnimplementedPowerServiceServer) PublishPower(ctx context.Context, req *PublishPowerRequest) (*PublishPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPower not implemented")
}
func (*UnimplementedPowerServiceServer) RevokePower(ctx context.Context, req *RevokePowerRequest) (*common.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePower not implemented")
}

func RegisterPowerServiceServer(s *grpc.Server, srv PowerServiceServer) {
	s.RegisterService(&_PowerService_serviceDesc, srv)
}

func _PowerService_GetTotalPowerDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).GetTotalPowerDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.PowerService/GetTotalPowerDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).GetTotalPowerDetailList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_GetSelfPowerDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).GetSelfPowerDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.PowerService/GetSelfPowerDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).GetSelfPowerDetailList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_PublishPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).PublishPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.PowerService/PublishPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).PublishPower(ctx, req.(*PublishPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_RevokePower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).RevokePower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.PowerService/RevokePower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).RevokePower(ctx, req.(*RevokePowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PowerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcapi.PowerService",
	HandlerType: (*PowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalPowerDetailList",
			Handler:    _PowerService_GetTotalPowerDetailList_Handler,
		},
		{
			MethodName: "GetSelfPowerDetailList",
			Handler:    _PowerService_GetSelfPowerDetailList_Handler,
		},
		{
			MethodName: "PublishPower",
			Handler:    _PowerService_PublishPower_Handler,
		},
		{
			MethodName: "RevokePower",
			Handler:    _PowerService_RevokePower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/api/power_rpc_api.proto",
}

func (m *GetTotalPowerDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalPowerDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalPowerDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Power != nil {
		{
			size, err := m.Power.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTotalPowerDetailListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalPowerDetailListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalPowerDetailListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerList) > 0 {
		for iNdEx := len(m.PowerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PowerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSelfPowerDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSelfPowerDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSelfPowerDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.JobNodeId) > 0 {
		i -= len(m.JobNodeId)
		copy(dAtA[i:], m.JobNodeId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.JobNodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Power != nil {
		{
			size, err := m.Power.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSelfPowerDetailListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSelfPowerDetailListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSelfPowerDetailListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerList) > 0 {
		for iNdEx := len(m.PowerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PowerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishPowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishPowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishPowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JobNodeId) > 0 {
		i -= len(m.JobNodeId)
		copy(dAtA[i:], m.JobNodeId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.JobNodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RevokePowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokePowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokePowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPowerRpcApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPowerRpcApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetTotalPowerDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.Power != nil {
		l = m.Power.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTotalPowerDetailListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if len(m.PowerList) > 0 {
		for _, e := range m.PowerList {
			l = e.Size()
			n += 1 + l + sovPowerRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSelfPowerDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.Power != nil {
		l = m.Power.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	l = len(m.JobNodeId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSelfPowerDetailListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if len(m.PowerList) > 0 {
		for _, e := range m.PowerList {
			l = e.Size()
			n += 1 + l + sovPowerRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishPowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobNodeId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RevokePowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPowerRpcApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPowerRpcApi(x uint64) (n int) {
	return sovPowerRpcApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTotalPowerDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalPowerDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalPowerDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &common.Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Power == nil {
				m.Power = &types.PowerUsageDetail{}
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalPowerDetailListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalPowerDetailListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalPowerDetailListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerList = append(m.PowerList, &GetTotalPowerDetailResponse{})
			if err := m.PowerList[len(m.PowerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSelfPowerDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSelfPowerDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSelfPowerDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &common.Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Power == nil {
				m.Power = &types.PowerUsageDetail{}
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSelfPowerDetailListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSelfPowerDetailListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSelfPowerDetailListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerList = append(m.PowerList, &GetSelfPowerDetailResponse{})
			if err := m.PowerList[len(m.PowerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishPowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishPowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishPowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokePowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokePowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokePowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPowerRpcApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPowerRpcApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPowerRpcApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPowerRpcApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPowerRpcApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPowerRpcApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPowerRpcApi = fmt.Errorf("proto: unexpected end of group")
)
