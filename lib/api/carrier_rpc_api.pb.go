// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/api/carrier_rpc_api.proto

package rpcapi

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 调度服务的信息
type YarnNodeInfo struct {
	NodeType     string               `protobuf:"bytes,1,opt,name=node_type,json=nodeType,proto3" json:"nodeType" xml:"nodeType"`
	NodeId       string               `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"nodeId" xml:"nodeId"`
	InternalIp   string               `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internalIp" xml:"internalIp"`
	ExternalIp   string               `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"externalIp" xml:"externalIp"`
	InternalPort string               `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internalPort" xml:"internalPort"`
	ExternalPort string               `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"externalPort" xml:"externalPort"`
	IdentityType string               `protobuf:"bytes,7,opt,name=identity_type,json=identityType,proto3" json:"identityType" xml:"identityType"`
	IdentityId   string               `protobuf:"bytes,8,opt,name=identity_id,json=identityId,proto3" json:"identityId" xml:"identityId"`
	Info         YarnNodeSysInfo      `protobuf:"bytes,9,opt,name=info,proto3" json:"info" xml:"info"`
	Peers        []YarnRegisteredPeer `protobuf:"bytes,10,rep,name=peers,proto3" json:"peers" xml:"peer"`
	State        string               `protobuf:"bytes,11,opt,name=state,proto3" json:"state" xml:"state"`
}

func (m *YarnNodeInfo) Reset()         { *m = YarnNodeInfo{} }
func (m *YarnNodeInfo) String() string { return proto.CompactTextString(m) }
func (*YarnNodeInfo) ProtoMessage()    {}
func (*YarnNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{0}
}
func (m *YarnNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnNodeInfo.Merge(m, src)
}
func (m *YarnNodeInfo) XXX_Size() int {
	return m.ProtoSize()
}
func (m *YarnNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_YarnNodeInfo proto.InternalMessageInfo

// 调度服务的系统资源信息
type YarnNodeSysInfo struct {
	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" xml:"name"`
	TotalMem       string `protobuf:"bytes,2,opt,name=total_mem,json=totalMem,proto3" json:"totalMem" xml:"totalMem"`
	UsedMem        string `protobuf:"bytes,3,opt,name=used_mem,json=usedMem,proto3" json:"usedMem" xml:"usedMem"`
	TotalProcessor string `protobuf:"bytes,4,opt,name=total_processor,json=totalProcessor,proto3" json:"totalProcessor" xml:"totalProcessor"`
	UsedProcessor  string `protobuf:"bytes,5,opt,name=used_processor,json=usedProcessor,proto3" json:"usedProcessor" xml:"usedProcessor"`
	TotalBandwidth string `protobuf:"bytes,6,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"totalBandwidth" xml:"totalBandwidth"`
	UsedBandwidth  string `protobuf:"bytes,7,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"usedBandwidth" xml:"usedBandwidth"`
}

func (m *YarnNodeSysInfo) Reset()         { *m = YarnNodeSysInfo{} }
func (m *YarnNodeSysInfo) String() string { return proto.CompactTextString(m) }
func (*YarnNodeSysInfo) ProtoMessage()    {}
func (*YarnNodeSysInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{1}
}
func (m *YarnNodeSysInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnNodeSysInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnNodeSysInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnNodeSysInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnNodeSysInfo.Merge(m, src)
}
func (m *YarnNodeSysInfo) XXX_Size() int {
	return m.ProtoSize()
}
func (m *YarnNodeSysInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnNodeSysInfo.DiscardUnknown(m)
}

var xxx_messageInfo_YarnNodeSysInfo proto.InternalMessageInfo

// 调度服务上被注册的资源节点信息
type YarnRegisteredPeer struct {
	NodeType     string `protobuf:"bytes,1,opt,name=node_type,json=nodeType,proto3" json:"nodeType" xml:"nodeType"`
	Id           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id" xml:"id"`
	InternalIp   string `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internalIp" xml:"internalIp"`
	ExternalIp   string `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"externalIp" xml:"externalIp"`
	InternalPort string `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internalPort" xml:"internalPort"`
	ExternalPort string `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"externalPort" xml:"externalPort"`
}

func (m *YarnRegisteredPeer) Reset()         { *m = YarnRegisteredPeer{} }
func (m *YarnRegisteredPeer) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredPeer) ProtoMessage()    {}
func (*YarnRegisteredPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{2}
}
func (m *YarnRegisteredPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredPeer.Merge(m, src)
}
func (m *YarnRegisteredPeer) XXX_Size() int {
	return m.ProtoSize()
}
func (m *YarnRegisteredPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredPeer.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredPeer proto.InternalMessageInfo

// 调度服务上的 计算服务详情信息
type YarnRegisteredJobNode struct {
	Id           string                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id" xml:"id"`
	InternalIp   string                       `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internalIp" xml:"internalIp"`
	ExternalIp   string                       `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"externalIp" xml:"externalIp"`
	InternalPort string                       `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internalPort" xml:"internalPort"`
	ExternalPort string                       `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"externalPort" xml:"externalPort"`
	Info         ResourceUsedDetail           `protobuf:"bytes,7,opt,name=info,proto3" json:"info" xml:"info"`
	Duration     uint64                       `protobuf:"varint,8,opt,name=duration,proto3" json:"duration" xml:"duration"`
	Task         YarnRegisteredJobNodeTaskIds `protobuf:"bytes,9,opt,name=task,proto3" json:"task" xml:"task"`
}

func (m *YarnRegisteredJobNode) Reset()         { *m = YarnRegisteredJobNode{} }
func (m *YarnRegisteredJobNode) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredJobNode) ProtoMessage()    {}
func (*YarnRegisteredJobNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{3}
}
func (m *YarnRegisteredJobNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredJobNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredJobNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredJobNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredJobNode.Merge(m, src)
}
func (m *YarnRegisteredJobNode) XXX_Size() int {
	return m.ProtoSize()
}
func (m *YarnRegisteredJobNode) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredJobNode.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredJobNode proto.InternalMessageInfo

type YarnRegisteredJobNodeTaskIds struct {
	Count   uint32   `protobuf:"varint,1,opt,name=count,proto3" json:"count" xml:"count"`
	TaskIds []string `protobuf:"bytes,2,rep,name=task_ids,json=taskIds,proto3" json:"taskIds" xml:"taskId"`
}

func (m *YarnRegisteredJobNodeTaskIds) Reset()         { *m = YarnRegisteredJobNodeTaskIds{} }
func (m *YarnRegisteredJobNodeTaskIds) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredJobNodeTaskIds) ProtoMessage()    {}
func (*YarnRegisteredJobNodeTaskIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{4}
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredJobNodeTaskIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredJobNodeTaskIds.Merge(m, src)
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_Size() int {
	return m.ProtoSize()
}
func (m *YarnRegisteredJobNodeTaskIds) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredJobNodeTaskIds.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredJobNodeTaskIds proto.InternalMessageInfo

type YarnRegisteredDataNode struct {
	Id           string                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id" xml:"id"`
	InternalIp   string                      `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internalIp" xml:"internalIp"`
	ExternalIp   string                      `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"externalIp" xml:"externalIp"`
	InternalPort string                      `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internalPort" xml:"internalPort"`
	ExternalPort string                      `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"externalPort" xml:"externalPort"`
	Info         ResourceUsedDetail          `protobuf:"bytes,7,opt,name=info,proto3" json:"info" xml:"info"`
	Duration     uint64                      `protobuf:"varint,8,opt,name=duration,proto3" json:"duration" xml:"duration"`
	Delta        YarnRegisteredDataNodeDelta `protobuf:"bytes,9,opt,name=delta,proto3" json:"delta" xml:"delta"`
}

func (m *YarnRegisteredDataNode) Reset()         { *m = YarnRegisteredDataNode{} }
func (m *YarnRegisteredDataNode) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredDataNode) ProtoMessage()    {}
func (*YarnRegisteredDataNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{5}
}
func (m *YarnRegisteredDataNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredDataNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredDataNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredDataNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredDataNode.Merge(m, src)
}
func (m *YarnRegisteredDataNode) XXX_Size() int {
	return m.ProtoSize()
}
func (m *YarnRegisteredDataNode) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredDataNode.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredDataNode proto.InternalMessageInfo

type YarnRegisteredDataNodeDelta struct {
	FileCount     uint64 `protobuf:"varint,1,opt,name=fileCount,proto3" json:"filecount" xml:"filecount"`
	FileTotalSize string `protobuf:"bytes,2,opt,name=fileTotalSize,proto3" json:"filetotalsize" xml:"filetotalsize"`
}

func (m *YarnRegisteredDataNodeDelta) Reset()         { *m = YarnRegisteredDataNodeDelta{} }
func (m *YarnRegisteredDataNodeDelta) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredDataNodeDelta) ProtoMessage()    {}
func (*YarnRegisteredDataNodeDelta) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{6}
}
func (m *YarnRegisteredDataNodeDelta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredDataNodeDelta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredDataNodeDelta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredDataNodeDelta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredDataNodeDelta.Merge(m, src)
}
func (m *YarnRegisteredDataNodeDelta) XXX_Size() int {
	return m.ProtoSize()
}
func (m *YarnRegisteredDataNodeDelta) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredDataNodeDelta.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredDataNodeDelta proto.InternalMessageInfo

type GetNodeInfoRequest struct {
}

func (m *GetNodeInfoRequest) Reset()         { *m = GetNodeInfoRequest{} }
func (m *GetNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoRequest) ProtoMessage()    {}
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{7}
}
func (m *GetNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoRequest.Merge(m, src)
}
func (m *GetNodeInfoRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoRequest proto.InternalMessageInfo

type GetRegisteredPeersRequest struct {
}

func (m *GetRegisteredPeersRequest) Reset()         { *m = GetRegisteredPeersRequest{} }
func (m *GetRegisteredPeersRequest) String() string { return proto.CompactTextString(m) }
func (*GetRegisteredPeersRequest) ProtoMessage()    {}
func (*GetRegisteredPeersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{8}
}
func (m *GetRegisteredPeersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegisteredPeersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegisteredPeersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegisteredPeersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegisteredPeersRequest.Merge(m, src)
}
func (m *GetRegisteredPeersRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetRegisteredPeersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegisteredPeersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegisteredPeersRequest proto.InternalMessageInfo

type GetNodeInfoResponse struct {
	Status int          `protobuf:"varint,1,opt,name=status,proto3,casttype=int" json:"status" xml:"status"`
	Msg    string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg" xml:"msg"`
	Info   YarnNodeInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info" xml:"info"`
}

func (m *GetNodeInfoResponse) Reset()         { *m = GetNodeInfoResponse{} }
func (m *GetNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoResponse) ProtoMessage()    {}
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{9}
}
func (m *GetNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoResponse.Merge(m, src)
}
func (m *GetNodeInfoResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoResponse proto.InternalMessageInfo

type GetRegisteredPeersResponse struct {
	Status    int                      `protobuf:"varint,1,opt,name=status,proto3,casttype=int" json:"status" xml:"status"`
	Msg       string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg" xml:"msg"`
	JobNodes  []YarnRegisteredJobNode  `protobuf:"bytes,3,rep,name=job_nodes,json=jobNodes,proto3" json:"jobNodes" xml:"jobNode"`
	DataNodes []YarnRegisteredDataNode `protobuf:"bytes,4,rep,name=data_nodes,json=dataNodes,proto3" json:"dataNodes" xml:"dataNode"`
}

func (m *GetRegisteredPeersResponse) Reset()         { *m = GetRegisteredPeersResponse{} }
func (m *GetRegisteredPeersResponse) String() string { return proto.CompactTextString(m) }
func (*GetRegisteredPeersResponse) ProtoMessage()    {}
func (*GetRegisteredPeersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{10}
}
func (m *GetRegisteredPeersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegisteredPeersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegisteredPeersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegisteredPeersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegisteredPeersResponse.Merge(m, src)
}
func (m *GetRegisteredPeersResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetRegisteredPeersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegisteredPeersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegisteredPeersResponse proto.InternalMessageInfo

type ResourceUsedDetail struct {
	TotalMem       string `protobuf:"bytes,2,opt,name=total_mem,json=totalMem,proto3" json:"totalMem" xml:"totalMem"`
	UsedMem        string `protobuf:"bytes,3,opt,name=used_mem,json=usedMem,proto3" json:"usedMem" xml:"usedMem"`
	TotalProcessor string `protobuf:"bytes,4,opt,name=total_processor,json=totalProcessor,proto3" json:"totalProcessor" xml:"totalProcessor"`
	UsedProcessor  string `protobuf:"bytes,5,opt,name=used_processor,json=usedProcessor,proto3" json:"usedProcessor" xml:"usedProcessor"`
	TotalBandwidth string `protobuf:"bytes,6,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"totalBandwidth" xml:"totalBandwidth"`
	UsedBandwidth  string `protobuf:"bytes,7,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"usedBandwidth" xml:"usedBandwidth"`
}

func (m *ResourceUsedDetail) Reset()         { *m = ResourceUsedDetail{} }
func (m *ResourceUsedDetail) String() string { return proto.CompactTextString(m) }
func (*ResourceUsedDetail) ProtoMessage()    {}
func (*ResourceUsedDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_650bcbee121628aa, []int{11}
}
func (m *ResourceUsedDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceUsedDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceUsedDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceUsedDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceUsedDetail.Merge(m, src)
}
func (m *ResourceUsedDetail) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ResourceUsedDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceUsedDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceUsedDetail proto.InternalMessageInfo

func init() {
	proto.RegisterType((*YarnNodeInfo)(nil), "rpcapi.YarnNodeInfo")
	proto.RegisterType((*YarnNodeSysInfo)(nil), "rpcapi.YarnNodeSysInfo")
	proto.RegisterType((*YarnRegisteredPeer)(nil), "rpcapi.YarnRegisteredPeer")
	proto.RegisterType((*YarnRegisteredJobNode)(nil), "rpcapi.YarnRegisteredJobNode")
	proto.RegisterType((*YarnRegisteredJobNodeTaskIds)(nil), "rpcapi.YarnRegisteredJobNodeTaskIds")
	proto.RegisterType((*YarnRegisteredDataNode)(nil), "rpcapi.YarnRegisteredDataNode")
	proto.RegisterType((*YarnRegisteredDataNodeDelta)(nil), "rpcapi.YarnRegisteredDataNodeDelta")
	proto.RegisterType((*GetNodeInfoRequest)(nil), "rpcapi.GetNodeInfoRequest")
	proto.RegisterType((*GetRegisteredPeersRequest)(nil), "rpcapi.GetRegisteredPeersRequest")
	proto.RegisterType((*GetNodeInfoResponse)(nil), "rpcapi.GetNodeInfoResponse")
	proto.RegisterType((*GetRegisteredPeersResponse)(nil), "rpcapi.GetRegisteredPeersResponse")
	proto.RegisterType((*ResourceUsedDetail)(nil), "rpcapi.ResourceUsedDetail")
}

func init() { proto.RegisterFile("lib/api/carrier_rpc_api.proto", fileDescriptor_650bcbee121628aa) }

var fileDescriptor_650bcbee121628aa = []byte{
	// 1238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x67, 0x62, 0x8f, 0xf3, 0x51, 0x4d, 0x43, 0x31, 0x4e, 0xea, 0x4d, 0x26, 0xa8, 0x8a,
	0x2a, 0x88, 0xa5, 0x54, 0x02, 0x51, 0x24, 0x0e, 0x4e, 0xd4, 0x28, 0x45, 0x0d, 0xd1, 0x24, 0x08,
	0x01, 0x42, 0xd6, 0xda, 0x3b, 0x71, 0xa7, 0xb5, 0x77, 0x96, 0x9d, 0x31, 0x6d, 0xfa, 0x07, 0x70,
	0xe6, 0xca, 0x8d, 0x7f, 0x80, 0x0b, 0x77, 0x90, 0xe0, 0x94, 0x63, 0x4e, 0x88, 0xd3, 0x4a, 0x6d,
	0x6e, 0x3e, 0xfa, 0xc8, 0x01, 0xd0, 0x7c, 0xec, 0xec, 0x6e, 0x12, 0x45, 0x91, 0x40, 0x48, 0xa0,
	0xdc, 0xf2, 0x7e, 0xef, 0xbd, 0xdf, 0xfe, 0x76, 0xe7, 0x7d, 0x4c, 0x0c, 0x6e, 0x0f, 0x68, 0xb7,
	0xe5, 0x06, 0xb4, 0xd5, 0x73, 0xc3, 0x90, 0x92, 0xb0, 0x13, 0x06, 0xbd, 0x8e, 0x1b, 0xd0, 0xf5,
	0x20, 0x64, 0x82, 0xc1, 0xa9, 0x30, 0xe8, 0xb9, 0x01, 0x6d, 0xac, 0x86, 0x24, 0x60, 0xbc, 0xa5,
	0xc0, 0xee, 0xe8, 0xb0, 0xd5, 0x67, 0x7d, 0xa6, 0x0c, 0xf5, 0x97, 0x0e, 0x46, 0x7f, 0x94, 0xc1,
	0xcc, 0xa7, 0x6e, 0xe8, 0xef, 0x32, 0x8f, 0xec, 0xf8, 0x87, 0x0c, 0xbe, 0x0f, 0xaa, 0x3e, 0xf3,
	0x48, 0x47, 0x1c, 0x05, 0xa4, 0x9e, 0x5f, 0xce, 0xaf, 0x55, 0xdb, 0xcd, 0x71, 0xe4, 0x54, 0x24,
	0x78, 0x70, 0x14, 0x90, 0x49, 0xe4, 0xcc, 0x3d, 0x1f, 0x0e, 0xee, 0xa3, 0x18, 0x40, 0xd8, 0xfa,
	0xe0, 0x3d, 0x30, 0xad, 0x92, 0xa9, 0x57, 0x2f, 0xa8, 0xd4, 0xc6, 0x38, 0x72, 0xa6, 0x24, 0xb4,
	0xe3, 0x4d, 0x22, 0x67, 0xc6, 0x26, 0xee, 0x78, 0x08, 0x1b, 0x1c, 0x6e, 0x82, 0x1a, 0xf5, 0x05,
	0x09, 0x7d, 0x77, 0xd0, 0xa1, 0x41, 0xbd, 0xa8, 0x12, 0xd1, 0x38, 0x72, 0x40, 0x0c, 0xef, 0x04,
	0x93, 0xc8, 0xb9, 0xa1, 0x92, 0x13, 0x08, 0xe1, 0x94, 0x5f, 0x92, 0x90, 0xe7, 0x09, 0x49, 0x29,
	0x21, 0x89, 0xe1, 0x14, 0x49, 0x02, 0x21, 0x9c, 0xf2, 0xc3, 0x0f, 0xc1, 0xac, 0x55, 0x12, 0xb0,
	0x50, 0xd4, 0xcb, 0x8a, 0xe6, 0xce, 0x38, 0x72, 0x66, 0x62, 0xc7, 0x1e, 0x0b, 0xc5, 0x24, 0x72,
	0x60, 0x46, 0x8d, 0x04, 0x11, 0xce, 0xc4, 0x48, 0x32, 0xab, 0x48, 0x91, 0x4d, 0x25, 0x64, 0xb1,
	0x23, 0x43, 0x96, 0x06, 0x11, 0xce, 0xc4, 0x28, 0x65, 0x1e, 0xf1, 0x05, 0x15, 0x47, 0xfa, 0x64,
	0xa6, 0x53, 0xca, 0x8c, 0xc3, 0x9c, 0x8e, 0x51, 0x96, 0x02, 0xa5, 0xb2, 0x94, 0xa9, 0x3e, 0x78,
	0x4c, 0x46, 0xbd, 0x7a, 0x25, 0xf5, 0xc1, 0x0d, 0xac, 0x4e, 0xeb, 0x46, 0x86, 0x48, 0x9e, 0x58,
	0xca, 0x0f, 0xb7, 0x41, 0x89, 0xfa, 0x87, 0xac, 0x5e, 0x5d, 0xce, 0xaf, 0xd5, 0x36, 0x5e, 0x5f,
	0xd7, 0x45, 0xb7, 0x1e, 0xd7, 0xd2, 0xfe, 0x11, 0x97, 0xe5, 0xd4, 0x6e, 0x1c, 0x47, 0x4e, 0x6e,
	0x1c, 0x39, 0x2a, 0x78, 0x12, 0x39, 0xc0, 0x7c, 0xb7, 0x43, 0x86, 0xb0, 0xc2, 0xe0, 0x23, 0x50,
	0x0e, 0x08, 0x09, 0x79, 0x1d, 0x2c, 0x17, 0xd7, 0x6a, 0x1b, 0x8d, 0x34, 0x13, 0x26, 0x7d, 0xca,
	0x05, 0x09, 0x89, 0xb7, 0x47, 0x48, 0xd8, 0x5e, 0x34, 0x64, 0x3a, 0xc1, 0xb2, 0x49, 0x0b, 0x61,
	0x0d, 0xc2, 0x75, 0x50, 0xe6, 0xc2, 0x15, 0xa4, 0x5e, 0x53, 0xaf, 0x55, 0x97, 0xe1, 0x0a, 0x98,
	0x44, 0x4e, 0x4d, 0x85, 0x2b, 0x0b, 0x61, 0x8d, 0xa2, 0x3f, 0x8b, 0x60, 0xfe, 0x8c, 0x68, 0x78,
	0x17, 0x94, 0x7c, 0x77, 0x18, 0x97, 0xff, 0x2d, 0x29, 0x5f, 0xda, 0xf6, 0x81, 0xd2, 0x40, 0x58,
	0x61, 0xb2, 0x5f, 0x04, 0x13, 0xee, 0xa0, 0x33, 0x24, 0x43, 0x53, 0xf4, 0xaa, 0x5f, 0x14, 0xf8,
	0x88, 0x0c, 0x6d, 0xbf, 0xc4, 0x00, 0xc2, 0xd6, 0x07, 0xdf, 0x05, 0x95, 0x11, 0x27, 0x9e, 0xca,
	0xd5, 0x75, 0xbf, 0x34, 0x8e, 0x9c, 0x69, 0x89, 0xe9, 0xd4, 0x59, 0x95, 0x6a, 0x6c, 0x84, 0x63,
	0x0f, 0xdc, 0x07, 0xf3, 0xfa, 0xa9, 0x41, 0xc8, 0x7a, 0x84, 0x73, 0x16, 0x9a, 0x92, 0xbf, 0x3b,
	0x8e, 0x9c, 0x39, 0xe5, 0xda, 0x8b, 0x3d, 0x93, 0xc8, 0x59, 0x48, 0x14, 0x58, 0x18, 0xe1, 0x33,
	0x71, 0xf0, 0x23, 0x30, 0xa7, 0xd4, 0x24, 0x9c, 0xba, 0xfe, 0xd7, 0xc6, 0x91, 0x33, 0x2b, 0x3d,
	0x69, 0xca, 0x9b, 0x56, 0x59, 0x8a, 0x31, 0x1b, 0x95, 0xa8, 0xec, 0xba, 0xbe, 0xf7, 0x8c, 0x7a,
	0xe2, 0xb1, 0x69, 0x82, 0x44, 0x65, 0x3b, 0xf6, 0x64, 0x55, 0x5a, 0x38, 0x56, 0x69, 0x01, 0xab,
	0x32, 0xe1, 0x9c, 0xce, 0xaa, 0x4c, 0x53, 0x26, 0x2a, 0x53, 0x8c, 0xd9, 0x28, 0xf4, 0x6d, 0x11,
	0xc0, 0xf3, 0xc5, 0xf6, 0xf7, 0x06, 0x21, 0x02, 0x05, 0x3b, 0x03, 0xe1, 0x38, 0x72, 0x0a, 0x54,
	0x76, 0x54, 0xc5, 0x74, 0x14, 0xc2, 0x05, 0x7a, 0x3d, 0xf7, 0xae, 0x30, 0xf7, 0xd0, 0x8f, 0x25,
	0xf0, 0x5a, 0xf6, 0x6c, 0x1e, 0xb2, 0xae, 0x6c, 0xd5, 0xeb, 0x2f, 0xfc, 0x0f, 0x6d, 0x96, 0x87,
	0x66, 0x8e, 0x4f, 0xab, 0x39, 0x6e, 0xa7, 0x2f, 0x26, 0x9c, 0x8d, 0xc2, 0x1e, 0xf9, 0x98, 0x13,
	0x6f, 0x8b, 0x08, 0x97, 0x0e, 0xae, 0x30, 0xca, 0xef, 0x83, 0x8a, 0x37, 0x0a, 0x5d, 0x41, 0x99,
	0xaf, 0xb6, 0x4a, 0x49, 0x77, 0x4c, 0x8c, 0xd9, 0x8e, 0x89, 0x01, 0x84, 0xad, 0x0f, 0x1e, 0x80,
	0x92, 0x70, 0xf9, 0x53, 0xb3, 0x4f, 0xde, 0xbc, 0x78, 0x0b, 0x98, 0xc3, 0x3f, 0x70, 0xf9, 0xd3,
	0x1d, 0x8f, 0x27, 0x8a, 0x64, 0xa6, 0x55, 0x24, 0x0d, 0x84, 0x15, 0x86, 0xbe, 0xce, 0x83, 0xa5,
	0xcb, 0x28, 0xe4, 0xba, 0xe8, 0xb1, 0x91, 0x2f, 0x54, 0x87, 0xcf, 0xea, 0x75, 0xa1, 0x00, 0xbb,
	0x2e, 0x94, 0x85, 0xb0, 0x46, 0xe1, 0x3b, 0xa0, 0x22, 0x89, 0x3b, 0xd4, 0xe3, 0xf5, 0xc2, 0x72,
	0x71, 0xad, 0xda, 0x5e, 0x94, 0x13, 0x5b, 0x68, 0x3a, 0x7b, 0xc7, 0xd1, 0x36, 0xc2, 0xb1, 0x03,
	0xfd, 0x5c, 0x02, 0xb7, 0xb2, 0x42, 0xb6, 0x5c, 0xe1, 0x5e, 0x57, 0xf2, 0xff, 0xb0, 0x92, 0x3f,
	0x01, 0x65, 0x8f, 0x0c, 0x84, 0x6b, 0x4a, 0x79, 0xf5, 0xe2, 0x52, 0x8e, 0x8f, 0x7f, 0x4b, 0x86,
	0xb6, 0x97, 0xe2, 0x9b, 0x8d, 0xca, 0xb4, 0xb5, 0xa7, 0x2c, 0x84, 0x35, 0x8a, 0xbe, 0xcf, 0x83,
	0xc5, 0x4b, 0x48, 0xe0, 0x07, 0xa0, 0x7a, 0x48, 0x07, 0x64, 0xd3, 0xd6, 0x73, 0xa9, 0xbd, 0x3c,
	0x8e, 0x1c, 0x05, 0xc6, 0x35, 0x3d, 0xaf, 0x78, 0x2d, 0x82, 0x70, 0x92, 0x02, 0x77, 0xc1, 0xac,
	0x34, 0x0e, 0xe4, 0xbe, 0xdd, 0xa7, 0x2f, 0x88, 0xa9, 0x49, 0xb5, 0x58, 0xa5, 0x43, 0x2d, 0x62,
	0x4e, 0x5f, 0x10, 0xbb, 0x58, 0x33, 0x28, 0xc2, 0xd9, 0x74, 0xb4, 0x00, 0xe0, 0x36, 0x11, 0xf1,
	0x7f, 0x16, 0x98, 0x7c, 0x39, 0x22, 0x5c, 0xa0, 0x45, 0xf0, 0xc6, 0x36, 0x11, 0xd9, 0x65, 0xcb,
	0x63, 0xe7, 0x4f, 0x79, 0x70, 0x33, 0x93, 0xc3, 0x03, 0xe6, 0x73, 0x02, 0xdf, 0x03, 0x53, 0xf2,
	0xba, 0x36, 0xe2, 0xea, 0xbd, 0xca, 0xed, 0x15, 0xf9, 0x7f, 0x85, 0x46, 0x6c, 0xcf, 0x69, 0x13,
	0xfd, 0x1e, 0x39, 0x45, 0xea, 0x0b, 0x6c, 0xdc, 0xf0, 0x0e, 0x28, 0x0e, 0x79, 0xdf, 0xbc, 0xcb,
	0xc2, 0x38, 0x72, 0xa4, 0x39, 0x89, 0x9c, 0xaa, 0x4a, 0x1a, 0xf2, 0x3e, 0xc2, 0x12, 0x81, 0x5b,
	0xa6, 0x7c, 0x8a, 0xea, 0xd4, 0x16, 0xce, 0x5e, 0x68, 0xaf, 0x76, 0x9b, 0x45, 0xbf, 0x14, 0x40,
	0xe3, 0xa2, 0xd7, 0xfb, 0xf7, 0xde, 0xe3, 0x0b, 0x50, 0x7d, 0xc2, 0xba, 0x1d, 0x79, 0x15, 0xe1,
	0xf5, 0xa2, 0xba, 0x53, 0xdf, 0xbe, 0x74, 0x9a, 0xb6, 0x57, 0xcc, 0x5b, 0x55, 0x9e, 0x68, 0x80,
	0xdb, 0x8b, 0xa7, 0x01, 0x10, 0xb6, 0x2e, 0xd8, 0x05, 0xc0, 0x73, 0x85, 0x6b, 0xf8, 0x4b, 0x8a,
	0xbf, 0x79, 0x79, 0x89, 0xb7, 0x57, 0xcd, 0x03, 0xaa, 0x9e, 0x41, 0x78, 0xd2, 0x40, 0x06, 0x41,
	0x38, 0x71, 0xa2, 0x5f, 0x8b, 0x00, 0x9e, 0x6f, 0xdb, 0xeb, 0xab, 0xf6, 0x7f, 0xfd, 0xaa, 0xbd,
	0xf1, 0x43, 0x1e, 0xd4, 0x64, 0x8d, 0xec, 0x93, 0xf0, 0x2b, 0xda, 0x23, 0xf0, 0x01, 0xa8, 0xa5,
	0xba, 0x1d, 0xda, 0x99, 0x7d, 0x7e, 0x6c, 0x34, 0x16, 0x2f, 0xf4, 0x99, 0xb6, 0xfa, 0x5c, 0x4d,
	0x9a, 0x33, 0x4d, 0x07, 0x57, 0x52, 0x29, 0x17, 0xcf, 0x9b, 0x06, 0xba, 0x2c, 0x44, 0x93, 0xb7,
	0x77, 0x8f, 0x5f, 0x36, 0x73, 0x27, 0x2f, 0x9b, 0xb9, 0xe3, 0x57, 0xcd, 0xfc, 0xc9, 0xab, 0x66,
	0xfe, 0x9b, 0xd3, 0x66, 0xee, 0xbb, 0xd3, 0x66, 0xfe, 0xe4, 0xb4, 0x99, 0xfb, 0xed, 0xb4, 0x99,
	0xfb, 0xec, 0xad, 0x3e, 0x15, 0x8f, 0x47, 0xdd, 0xf5, 0x1e, 0x1b, 0xb6, 0x30, 0xe3, 0x44, 0x08,
	0xf7, 0xc1, 0x80, 0x3d, 0x6b, 0x6d, 0xea, 0xdf, 0x67, 0xde, 0xde, 0x66, 0xad, 0x01, 0xed, 0xb6,
	0xf4, 0xa3, 0xba, 0x53, 0xea, 0x97, 0x97, 0x7b, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x36, 0xca,
	0xcb, 0xd4, 0xc7, 0x11, 0x00, 0x00,
}

func (m *YarnNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnNodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCarrierRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IdentityType) > 0 {
		i -= len(m.IdentityType)
		copy(dAtA[i:], m.IdentityType)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.IdentityType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *YarnNodeSysInfo) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnNodeSysInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnNodeSysInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsedBandwidth) > 0 {
		i -= len(m.UsedBandwidth)
		copy(dAtA[i:], m.UsedBandwidth)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.UsedBandwidth)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TotalBandwidth) > 0 {
		i -= len(m.TotalBandwidth)
		copy(dAtA[i:], m.TotalBandwidth)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.TotalBandwidth)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UsedProcessor) > 0 {
		i -= len(m.UsedProcessor)
		copy(dAtA[i:], m.UsedProcessor)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.UsedProcessor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalProcessor) > 0 {
		i -= len(m.TotalProcessor)
		copy(dAtA[i:], m.TotalProcessor)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.TotalProcessor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UsedMem) > 0 {
		i -= len(m.UsedMem)
		copy(dAtA[i:], m.UsedMem)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.UsedMem)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalMem) > 0 {
		i -= len(m.TotalMem)
		copy(dAtA[i:], m.TotalMem)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.TotalMem)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredPeer) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredJobNode) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredJobNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredJobNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Duration != 0 {
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredJobNodeTaskIds) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredJobNodeTaskIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredJobNodeTaskIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskIds) > 0 {
		for iNdEx := len(m.TaskIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskIds[iNdEx])
			copy(dAtA[i:], m.TaskIds[iNdEx])
			i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.TaskIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredDataNode) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredDataNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredDataNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Delta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Duration != 0 {
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredDataNodeDelta) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredDataNodeDelta) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredDataNodeDelta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FileTotalSize) > 0 {
		i -= len(m.FileTotalSize)
		copy(dAtA[i:], m.FileTotalSize)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.FileTotalSize)))
		i--
		dAtA[i] = 0x12
	}
	if m.FileCount != 0 {
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(m.FileCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRegisteredPeersRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegisteredPeersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegisteredPeersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRegisteredPeersResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegisteredPeersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegisteredPeersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataNodes) > 0 {
		for iNdEx := len(m.DataNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCarrierRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.JobNodes) > 0 {
		for iNdEx := len(m.JobNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JobNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCarrierRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResourceUsedDetail) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUsedDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceUsedDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsedBandwidth) > 0 {
		i -= len(m.UsedBandwidth)
		copy(dAtA[i:], m.UsedBandwidth)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.UsedBandwidth)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TotalBandwidth) > 0 {
		i -= len(m.TotalBandwidth)
		copy(dAtA[i:], m.TotalBandwidth)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.TotalBandwidth)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UsedProcessor) > 0 {
		i -= len(m.UsedProcessor)
		copy(dAtA[i:], m.UsedProcessor)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.UsedProcessor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalProcessor) > 0 {
		i -= len(m.TotalProcessor)
		copy(dAtA[i:], m.TotalProcessor)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.TotalProcessor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UsedMem) > 0 {
		i -= len(m.UsedMem)
		copy(dAtA[i:], m.UsedMem)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.UsedMem)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalMem) > 0 {
		i -= len(m.TotalMem)
		copy(dAtA[i:], m.TotalMem)
		i = encodeVarintCarrierRpcApi(dAtA, i, uint64(len(m.TotalMem)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintCarrierRpcApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovCarrierRpcApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *YarnNodeInfo) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.IdentityType)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = m.Info.ProtoSize()
	n += 1 + l + sovCarrierRpcApi(uint64(l))
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.ProtoSize()
			n += 1 + l + sovCarrierRpcApi(uint64(l))
		}
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	return n
}

func (m *YarnNodeSysInfo) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.TotalMem)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.UsedMem)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.TotalProcessor)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.UsedProcessor)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.TotalBandwidth)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.UsedBandwidth)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	return n
}

func (m *YarnRegisteredPeer) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	return n
}

func (m *YarnRegisteredJobNode) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = m.Info.ProtoSize()
	n += 1 + l + sovCarrierRpcApi(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovCarrierRpcApi(uint64(m.Duration))
	}
	l = m.Task.ProtoSize()
	n += 1 + l + sovCarrierRpcApi(uint64(l))
	return n
}

func (m *YarnRegisteredJobNodeTaskIds) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovCarrierRpcApi(uint64(m.Count))
	}
	if len(m.TaskIds) > 0 {
		for _, s := range m.TaskIds {
			l = len(s)
			n += 1 + l + sovCarrierRpcApi(uint64(l))
		}
	}
	return n
}

func (m *YarnRegisteredDataNode) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = m.Info.ProtoSize()
	n += 1 + l + sovCarrierRpcApi(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovCarrierRpcApi(uint64(m.Duration))
	}
	l = m.Delta.ProtoSize()
	n += 1 + l + sovCarrierRpcApi(uint64(l))
	return n
}

func (m *YarnRegisteredDataNodeDelta) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileCount != 0 {
		n += 1 + sovCarrierRpcApi(uint64(m.FileCount))
	}
	l = len(m.FileTotalSize)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	return n
}

func (m *GetNodeInfoRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRegisteredPeersRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetNodeInfoResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCarrierRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = m.Info.ProtoSize()
	n += 1 + l + sovCarrierRpcApi(uint64(l))
	return n
}

func (m *GetRegisteredPeersResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCarrierRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	if len(m.JobNodes) > 0 {
		for _, e := range m.JobNodes {
			l = e.ProtoSize()
			n += 1 + l + sovCarrierRpcApi(uint64(l))
		}
	}
	if len(m.DataNodes) > 0 {
		for _, e := range m.DataNodes {
			l = e.ProtoSize()
			n += 1 + l + sovCarrierRpcApi(uint64(l))
		}
	}
	return n
}

func (m *ResourceUsedDetail) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalMem)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.UsedMem)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.TotalProcessor)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.UsedProcessor)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.TotalBandwidth)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	l = len(m.UsedBandwidth)
	if l > 0 {
		n += 1 + l + sovCarrierRpcApi(uint64(l))
	}
	return n
}

func sovCarrierRpcApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCarrierRpcApi(x uint64) (n int) {
	return sovCarrierRpcApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *YarnNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, YarnRegisteredPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnNodeSysInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnNodeSysInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnNodeSysInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalMem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedMem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcessor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalProcessor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedProcessor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedProcessor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBandwidth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedBandwidth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredJobNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredJobNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredJobNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredJobNodeTaskIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredJobNodeTaskIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredJobNodeTaskIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskIds = append(m.TaskIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredDataNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredDataNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredDataNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredDataNodeDelta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredDataNodeDelta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredDataNodeDelta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileCount", wireType)
			}
			m.FileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileTotalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileTotalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegisteredPeersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegisteredPeersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegisteredPeersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegisteredPeersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegisteredPeersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegisteredPeersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobNodes = append(m.JobNodes, YarnRegisteredJobNode{})
			if err := m.JobNodes[len(m.JobNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataNodes = append(m.DataNodes, YarnRegisteredDataNode{})
			if err := m.DataNodes[len(m.DataNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceUsedDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsedDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsedDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalMem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedMem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcessor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalProcessor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedProcessor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedProcessor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBandwidth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedBandwidth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarrierRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCarrierRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCarrierRpcApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCarrierRpcApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarrierRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCarrierRpcApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCarrierRpcApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCarrierRpcApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCarrierRpcApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCarrierRpcApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCarrierRpcApi = fmt.Errorf("proto: unexpected end of group")
)
