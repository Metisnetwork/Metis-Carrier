// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/api/common_message.proto

package api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 系统本身资源抽象
type ResourceUsedDetailShow struct {
	TotalMem             uint64   `protobuf:"varint,2,opt,name=total_mem,json=totalMem,proto3" json:"total_mem,omitempty"`
	UsedMem              uint64   `protobuf:"varint,3,opt,name=used_mem,json=usedMem,proto3" json:"used_mem,omitempty"`
	TotalProcessor       uint64   `protobuf:"varint,4,opt,name=total_processor,json=totalProcessor,proto3" json:"total_processor,omitempty"`
	UsedProcessor        uint64   `protobuf:"varint,5,opt,name=used_processor,json=usedProcessor,proto3" json:"used_processor,omitempty"`
	TotalBandwidth       uint64   `protobuf:"varint,6,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	UsedBandwidth        uint64   `protobuf:"varint,7,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"used_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceUsedDetailShow) Reset()         { *m = ResourceUsedDetailShow{} }
func (m *ResourceUsedDetailShow) String() string { return proto.CompactTextString(m) }
func (*ResourceUsedDetailShow) ProtoMessage()    {}
func (*ResourceUsedDetailShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_21deb2530497727f, []int{0}
}
func (m *ResourceUsedDetailShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceUsedDetailShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceUsedDetailShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceUsedDetailShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceUsedDetailShow.Merge(m, src)
}
func (m *ResourceUsedDetailShow) XXX_Size() int {
	return m.Size()
}
func (m *ResourceUsedDetailShow) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceUsedDetailShow.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceUsedDetailShow proto.InternalMessageInfo

func (m *ResourceUsedDetailShow) GetTotalMem() uint64 {
	if m != nil {
		return m.TotalMem
	}
	return 0
}

func (m *ResourceUsedDetailShow) GetUsedMem() uint64 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *ResourceUsedDetailShow) GetTotalProcessor() uint64 {
	if m != nil {
		return m.TotalProcessor
	}
	return 0
}

func (m *ResourceUsedDetailShow) GetUsedProcessor() uint64 {
	if m != nil {
		return m.UsedProcessor
	}
	return 0
}

func (m *ResourceUsedDetailShow) GetTotalBandwidth() uint64 {
	if m != nil {
		return m.TotalBandwidth
	}
	return 0
}

func (m *ResourceUsedDetailShow) GetUsedBandwidth() uint64 {
	if m != nil {
		return m.UsedBandwidth
	}
	return 0
}

// 算力的基本仨元素
type PurePower struct {
	Mem                  uint64   `protobuf:"varint,1,opt,name=mem,proto3" json:"mem,omitempty"`
	Processor            uint64   `protobuf:"varint,2,opt,name=processor,proto3" json:"processor,omitempty"`
	Bandwidth            uint64   `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PurePower) Reset()         { *m = PurePower{} }
func (m *PurePower) String() string { return proto.CompactTextString(m) }
func (*PurePower) ProtoMessage()    {}
func (*PurePower) Descriptor() ([]byte, []int) {
	return fileDescriptor_21deb2530497727f, []int{1}
}
func (m *PurePower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurePower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PurePower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PurePower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurePower.Merge(m, src)
}
func (m *PurePower) XXX_Size() int {
	return m.Size()
}
func (m *PurePower) XXX_DiscardUnknown() {
	xxx_messageInfo_PurePower.DiscardUnknown(m)
}

var xxx_messageInfo_PurePower proto.InternalMessageInfo

func (m *PurePower) GetMem() uint64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func (m *PurePower) GetProcessor() uint64 {
	if m != nil {
		return m.Processor
	}
	return 0
}

func (m *PurePower) GetBandwidth() uint64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

// 组织(节点)唯一标识抽象
type OrganizationIdentityInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeId               string   `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	IdentityId           string   `protobuf:"bytes,3,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrganizationIdentityInfo) Reset()         { *m = OrganizationIdentityInfo{} }
func (m *OrganizationIdentityInfo) String() string { return proto.CompactTextString(m) }
func (*OrganizationIdentityInfo) ProtoMessage()    {}
func (*OrganizationIdentityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_21deb2530497727f, []int{2}
}
func (m *OrganizationIdentityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationIdentityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationIdentityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationIdentityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationIdentityInfo.Merge(m, src)
}
func (m *OrganizationIdentityInfo) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationIdentityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationIdentityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationIdentityInfo proto.InternalMessageInfo

func (m *OrganizationIdentityInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OrganizationIdentityInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *OrganizationIdentityInfo) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

type DeleteRegisteredNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRegisteredNodeRequest) Reset()         { *m = DeleteRegisteredNodeRequest{} }
func (m *DeleteRegisteredNodeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRegisteredNodeRequest) ProtoMessage()    {}
func (*DeleteRegisteredNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21deb2530497727f, []int{3}
}
func (m *DeleteRegisteredNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRegisteredNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRegisteredNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRegisteredNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRegisteredNodeRequest.Merge(m, src)
}
func (m *DeleteRegisteredNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRegisteredNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRegisteredNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRegisteredNodeRequest proto.InternalMessageInfo

func (m *DeleteRegisteredNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EmptyGetParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyGetParams) Reset()         { *m = EmptyGetParams{} }
func (m *EmptyGetParams) String() string { return proto.CompactTextString(m) }
func (*EmptyGetParams) ProtoMessage()    {}
func (*EmptyGetParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_21deb2530497727f, []int{4}
}
func (m *EmptyGetParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyGetParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyGetParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyGetParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyGetParams.Merge(m, src)
}
func (m *EmptyGetParams) XXX_Size() int {
	return m.Size()
}
func (m *EmptyGetParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyGetParams.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyGetParams proto.InternalMessageInfo

type SimpleResponseCode struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleResponseCode) Reset()         { *m = SimpleResponseCode{} }
func (m *SimpleResponseCode) String() string { return proto.CompactTextString(m) }
func (*SimpleResponseCode) ProtoMessage()    {}
func (*SimpleResponseCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_21deb2530497727f, []int{5}
}
func (m *SimpleResponseCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleResponseCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleResponseCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleResponseCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResponseCode.Merge(m, src)
}
func (m *SimpleResponseCode) XXX_Size() int {
	return m.Size()
}
func (m *SimpleResponseCode) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResponseCode.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResponseCode proto.InternalMessageInfo

func (m *SimpleResponseCode) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SimpleResponseCode) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*ResourceUsedDetailShow)(nil), "rpcapi.ResourceUsedDetailShow")
	proto.RegisterType((*PurePower)(nil), "rpcapi.PurePower")
	proto.RegisterType((*OrganizationIdentityInfo)(nil), "rpcapi.OrganizationIdentityInfo")
	proto.RegisterType((*DeleteRegisteredNodeRequest)(nil), "rpcapi.DeleteRegisteredNodeRequest")
	proto.RegisterType((*EmptyGetParams)(nil), "rpcapi.EmptyGetParams")
	proto.RegisterType((*SimpleResponseCode)(nil), "rpcapi.SimpleResponseCode")
}

func init() { proto.RegisterFile("lib/api/common_message.proto", fileDescriptor_21deb2530497727f) }

var fileDescriptor_21deb2530497727f = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe5, 0x24, 0x75, 0xea, 0x41, 0x84, 0x6a, 0x0f, 0x25, 0xa8, 0x55, 0x40, 0x96, 0x10,
	0x70, 0x68, 0x7d, 0xe0, 0xc0, 0x8d, 0x43, 0x5b, 0xa8, 0x72, 0x00, 0x22, 0x57, 0x1c, 0xe0, 0x12,
	0x6d, 0xbc, 0x83, 0xb3, 0x92, 0xd7, 0x63, 0x76, 0xc7, 0x8a, 0xca, 0x13, 0x72, 0xe4, 0x11, 0x50,
	0x9e, 0x80, 0x47, 0x40, 0xbb, 0x71, 0xe2, 0xde, 0x66, 0xbe, 0xff, 0x9f, 0x7f, 0x3c, 0xd6, 0xc2,
	0x79, 0xa5, 0x57, 0x99, 0x6c, 0x74, 0x56, 0x90, 0x31, 0x54, 0x2f, 0x0d, 0x3a, 0x27, 0x4b, 0xbc,
	0x6c, 0x2c, 0x31, 0x89, 0xd8, 0x36, 0x85, 0x6c, 0x74, 0xfa, 0x2f, 0x82, 0xd3, 0x1c, 0x1d, 0xb5,
	0xb6, 0xc0, 0xaf, 0x0e, 0xd5, 0x0d, 0xb2, 0xd4, 0xd5, 0xdd, 0x9a, 0x36, 0xe2, 0x0c, 0x12, 0x26,
	0x96, 0xd5, 0xd2, 0xa0, 0x99, 0x0e, 0x5e, 0x44, 0xaf, 0x47, 0xf9, 0x71, 0x00, 0x9f, 0xd0, 0x88,
	0x67, 0x70, 0xdc, 0x3a, 0x54, 0x41, 0x1b, 0x06, 0x6d, 0xec, 0x7b, 0x2f, 0xbd, 0x82, 0x27, 0xbb,
	0xb9, 0xc6, 0x52, 0x81, 0xce, 0x91, 0x9d, 0x8e, 0x82, 0x63, 0x12, 0xf0, 0x62, 0x4f, 0xc5, 0x4b,
	0x98, 0x84, 0x8c, 0xde, 0x77, 0x14, 0x7c, 0x8f, 0x3d, 0xed, 0x6d, 0x87, 0xbc, 0x95, 0xac, 0xd5,
	0x46, 0x2b, 0x5e, 0x4f, 0xe3, 0x07, 0x79, 0x57, 0x7b, 0x7a, 0xc8, 0xeb, 0x7d, 0xe3, 0x3e, 0xef,
	0x60, 0x4b, 0xbf, 0x41, 0xb2, 0x68, 0x2d, 0x2e, 0x68, 0x83, 0x56, 0x9c, 0xc0, 0xd0, 0x9f, 0x10,
	0x05, 0xa3, 0x2f, 0xc5, 0x39, 0x24, 0xfd, 0x07, 0xed, 0xce, 0xee, 0x81, 0x57, 0xfb, 0xf8, 0xdd,
	0xe1, 0x3d, 0x48, 0xd7, 0x30, 0xfd, 0x62, 0x4b, 0x59, 0xeb, 0x5f, 0x92, 0x35, 0xd5, 0x73, 0x85,
	0x35, 0x6b, 0xbe, 0x9f, 0xd7, 0x3f, 0x48, 0x08, 0x18, 0xd5, 0xd2, 0x60, 0x58, 0x95, 0xe4, 0xa1,
	0x16, 0x4f, 0x61, 0x5c, 0x93, 0xc2, 0xa5, 0x56, 0x61, 0x53, 0x92, 0xc7, 0xbe, 0x9d, 0x2b, 0xf1,
	0x1c, 0x1e, 0xe9, 0x6e, 0xd8, 0x8b, 0xc3, 0x20, 0xc2, 0x1e, 0xcd, 0x55, 0x7a, 0x01, 0x67, 0x37,
	0x58, 0x21, 0x63, 0x8e, 0xa5, 0x76, 0x8c, 0x16, 0xd5, 0x67, 0x52, 0x98, 0xe3, 0xcf, 0x16, 0x1d,
	0x8b, 0x09, 0x0c, 0xb4, 0xea, 0x56, 0x0d, 0xb4, 0x4a, 0x4f, 0x60, 0xf2, 0xc1, 0x34, 0x7c, 0x7f,
	0x8b, 0xbc, 0x90, 0x56, 0x1a, 0x97, 0xbe, 0x07, 0x71, 0xa7, 0x4d, 0x53, 0x61, 0x8e, 0xae, 0xa1,
	0xda, 0xe1, 0x35, 0x29, 0x14, 0xa7, 0x10, 0x3b, 0x96, 0xdc, 0xba, 0x30, 0x7b, 0x94, 0x77, 0x5d,
	0xf8, 0x4d, 0xae, 0xec, 0x3e, 0xd2, 0x97, 0x57, 0xef, 0x7e, 0x6f, 0x67, 0xd1, 0x9f, 0xed, 0x2c,
	0xfa, 0xbb, 0x9d, 0x45, 0xdf, 0xdf, 0x94, 0x9a, 0xd7, 0xed, 0xea, 0xb2, 0x20, 0x93, 0xe5, 0xe4,
	0x90, 0x59, 0x7e, 0xac, 0x68, 0x93, 0x5d, 0x4b, 0x6b, 0x35, 0xda, 0x8b, 0x5b, 0xca, 0xba, 0xe7,
	0xb8, 0x8a, 0xc3, 0x03, 0x7c, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x35, 0xcc, 0x35, 0x13, 0xa0,
	0x02, 0x00, 0x00,
}

func (m *ResourceUsedDetailShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUsedDetailShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceUsedDetailShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsedBandwidth != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.UsedBandwidth))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalBandwidth != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.TotalBandwidth))
		i--
		dAtA[i] = 0x30
	}
	if m.UsedProcessor != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.UsedProcessor))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalProcessor != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.TotalProcessor))
		i--
		dAtA[i] = 0x20
	}
	if m.UsedMem != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.UsedMem))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalMem != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.TotalMem))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *PurePower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurePower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurePower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bandwidth != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x18
	}
	if m.Processor != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.Processor))
		i--
		dAtA[i] = 0x10
	}
	if m.Mem != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.Mem))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrganizationIdentityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationIdentityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationIdentityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintCommonMessage(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintCommonMessage(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommonMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRegisteredNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRegisteredNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRegisteredNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommonMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmptyGetParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyGetParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyGetParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SimpleResponseCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleResponseCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleResponseCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintCommonMessage(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintCommonMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommonMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommonMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourceUsedDetailShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalMem != 0 {
		n += 1 + sovCommonMessage(uint64(m.TotalMem))
	}
	if m.UsedMem != 0 {
		n += 1 + sovCommonMessage(uint64(m.UsedMem))
	}
	if m.TotalProcessor != 0 {
		n += 1 + sovCommonMessage(uint64(m.TotalProcessor))
	}
	if m.UsedProcessor != 0 {
		n += 1 + sovCommonMessage(uint64(m.UsedProcessor))
	}
	if m.TotalBandwidth != 0 {
		n += 1 + sovCommonMessage(uint64(m.TotalBandwidth))
	}
	if m.UsedBandwidth != 0 {
		n += 1 + sovCommonMessage(uint64(m.UsedBandwidth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PurePower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mem != 0 {
		n += 1 + sovCommonMessage(uint64(m.Mem))
	}
	if m.Processor != 0 {
		n += 1 + sovCommonMessage(uint64(m.Processor))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovCommonMessage(uint64(m.Bandwidth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrganizationIdentityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommonMessage(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovCommonMessage(uint64(l))
	}
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovCommonMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRegisteredNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommonMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmptyGetParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleResponseCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCommonMessage(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovCommonMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommonMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommonMessage(x uint64) (n int) {
	return sovCommonMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceUsedDetailShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsedDetailShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsedDetailShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMem", wireType)
			}
			m.TotalMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMem", wireType)
			}
			m.UsedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcessor", wireType)
			}
			m.TotalProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProcessor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedProcessor", wireType)
			}
			m.UsedProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedProcessor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			m.TotalBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			m.UsedBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommonMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurePower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurePower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurePower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			m.Mem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processor", wireType)
			}
			m.Processor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Processor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommonMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationIdentityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationIdentityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationIdentityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRegisteredNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRegisteredNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRegisteredNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyGetParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyGetParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyGetParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommonMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleResponseCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleResponseCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleResponseCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommonMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommonMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommonMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommonMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommonMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommonMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommonMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommonMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommonMessage = fmt.Errorf("proto: unexpected end of group")
)
