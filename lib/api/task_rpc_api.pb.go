// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/api/task_rpc_api.proto

package api

import (
	context "context"
	fmt "fmt"
	types "github.com/RosettaFlow/Carrier-Go/lib/types"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 定义：任务详情（仅用户与前端交互展示使用）
type TaskDetailShow struct {
	TaskId               string                         `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName             string                         `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	User                 string                         `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	UserType             types.UserType                 `protobuf:"varint,4,opt,name=user_type,json=userType,proto3,enum=types.UserType" json:"user_type,omitempty"`
	Sender               *types.TaskOrganization        `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
	AlgoSupplier         *TaskAlgoSupplier              `protobuf:"bytes,6,opt,name=algo_supplier,json=algoSupplier,proto3" json:"algo_supplier,omitempty"`
	DataSuppliers        []*TaskDataSupplierShow        `protobuf:"bytes,7,rep,name=data_suppliers,json=dataSuppliers,proto3" json:"data_suppliers,omitempty"`
	PowerSuppliers       []*TaskPowerSupplierShow       `protobuf:"bytes,8,rep,name=power_suppliers,json=powerSuppliers,proto3" json:"power_suppliers,omitempty"`
	Receivers            []*types.TaskOrganization      `protobuf:"bytes,9,rep,name=receivers,proto3" json:"receivers,omitempty"`
	CreateAt             uint64                         `protobuf:"varint,10,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	StartAt              uint64                         `protobuf:"varint,11,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt                uint64                         `protobuf:"varint,12,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	State                types.TaskState                `protobuf:"varint,13,opt,name=state,proto3,enum=types.TaskState" json:"state,omitempty"`
	OperationCost        *types.TaskResourceCostDeclare `protobuf:"bytes,14,opt,name=operation_cost,json=operationCost,proto3" json:"operation_cost,omitempty"`
	Desc                 string                         `protobuf:"bytes,15,opt,name=desc,proto3" json:"desc,omitempty"`
	UpdateAt             uint64                         `protobuf:"varint,16,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Nonce                uint64                         `protobuf:"varint,17,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TaskDetailShow) Reset()         { *m = TaskDetailShow{} }
func (m *TaskDetailShow) String() string { return proto.CompactTextString(m) }
func (*TaskDetailShow) ProtoMessage()    {}
func (*TaskDetailShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{0}
}
func (m *TaskDetailShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskDetailShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskDetailShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskDetailShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDetailShow.Merge(m, src)
}
func (m *TaskDetailShow) XXX_Size() int {
	return m.Size()
}
func (m *TaskDetailShow) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDetailShow.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDetailShow proto.InternalMessageInfo

func (m *TaskDetailShow) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskDetailShow) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *TaskDetailShow) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TaskDetailShow) GetUserType() types.UserType {
	if m != nil {
		return m.UserType
	}
	return types.UserType_User_Unknown
}

func (m *TaskDetailShow) GetSender() *types.TaskOrganization {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *TaskDetailShow) GetAlgoSupplier() *TaskAlgoSupplier {
	if m != nil {
		return m.AlgoSupplier
	}
	return nil
}

func (m *TaskDetailShow) GetDataSuppliers() []*TaskDataSupplierShow {
	if m != nil {
		return m.DataSuppliers
	}
	return nil
}

func (m *TaskDetailShow) GetPowerSuppliers() []*TaskPowerSupplierShow {
	if m != nil {
		return m.PowerSuppliers
	}
	return nil
}

func (m *TaskDetailShow) GetReceivers() []*types.TaskOrganization {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *TaskDetailShow) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *TaskDetailShow) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *TaskDetailShow) GetEndAt() uint64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *TaskDetailShow) GetState() types.TaskState {
	if m != nil {
		return m.State
	}
	return types.TaskState_TaskState_Unknown
}

func (m *TaskDetailShow) GetOperationCost() *types.TaskResourceCostDeclare {
	if m != nil {
		return m.OperationCost
	}
	return nil
}

func (m *TaskDetailShow) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *TaskDetailShow) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *TaskDetailShow) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type TaskAlgoSupplier struct {
	Organization         *types.TaskOrganization `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	MetaAlgorithmId      string                  `protobuf:"bytes,2,opt,name=meta_algorithm_id,json=metaAlgorithmId,proto3" json:"meta_algorithm_id,omitempty"`
	MetaAlgorithmName    string                  `protobuf:"bytes,3,opt,name=meta_algorithm_name,json=metaAlgorithmName,proto3" json:"meta_algorithm_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TaskAlgoSupplier) Reset()         { *m = TaskAlgoSupplier{} }
func (m *TaskAlgoSupplier) String() string { return proto.CompactTextString(m) }
func (*TaskAlgoSupplier) ProtoMessage()    {}
func (*TaskAlgoSupplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{1}
}
func (m *TaskAlgoSupplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskAlgoSupplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskAlgoSupplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskAlgoSupplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskAlgoSupplier.Merge(m, src)
}
func (m *TaskAlgoSupplier) XXX_Size() int {
	return m.Size()
}
func (m *TaskAlgoSupplier) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskAlgoSupplier.DiscardUnknown(m)
}

var xxx_messageInfo_TaskAlgoSupplier proto.InternalMessageInfo

func (m *TaskAlgoSupplier) GetOrganization() *types.TaskOrganization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *TaskAlgoSupplier) GetMetaAlgorithmId() string {
	if m != nil {
		return m.MetaAlgorithmId
	}
	return ""
}

func (m *TaskAlgoSupplier) GetMetaAlgorithmName() string {
	if m != nil {
		return m.MetaAlgorithmName
	}
	return ""
}

// 定义：任务数据提供方（仅用于web页面交互使用）
type TaskDataSupplierShow struct {
	Organization         *types.TaskOrganization `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	MetadataId           string                  `protobuf:"bytes,2,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	MetadataName         string                  `protobuf:"bytes,3,opt,name=metadata_name,json=metadataName,proto3" json:"metadata_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TaskDataSupplierShow) Reset()         { *m = TaskDataSupplierShow{} }
func (m *TaskDataSupplierShow) String() string { return proto.CompactTextString(m) }
func (*TaskDataSupplierShow) ProtoMessage()    {}
func (*TaskDataSupplierShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{2}
}
func (m *TaskDataSupplierShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskDataSupplierShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskDataSupplierShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskDataSupplierShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDataSupplierShow.Merge(m, src)
}
func (m *TaskDataSupplierShow) XXX_Size() int {
	return m.Size()
}
func (m *TaskDataSupplierShow) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDataSupplierShow.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDataSupplierShow proto.InternalMessageInfo

func (m *TaskDataSupplierShow) GetOrganization() *types.TaskOrganization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *TaskDataSupplierShow) GetMetadataId() string {
	if m != nil {
		return m.MetadataId
	}
	return ""
}

func (m *TaskDataSupplierShow) GetMetadataName() string {
	if m != nil {
		return m.MetadataName
	}
	return ""
}

// 定义：算力提供方（仅用于web页面交互使用）
type TaskPowerSupplierShow struct {
	Organization         *types.TaskOrganization      `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	PowerInfo            *types.ResourceUsageOverview `protobuf:"bytes,2,opt,name=power_info,json=powerInfo,proto3" json:"power_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TaskPowerSupplierShow) Reset()         { *m = TaskPowerSupplierShow{} }
func (m *TaskPowerSupplierShow) String() string { return proto.CompactTextString(m) }
func (*TaskPowerSupplierShow) ProtoMessage()    {}
func (*TaskPowerSupplierShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{3}
}
func (m *TaskPowerSupplierShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskPowerSupplierShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskPowerSupplierShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskPowerSupplierShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPowerSupplierShow.Merge(m, src)
}
func (m *TaskPowerSupplierShow) XXX_Size() int {
	return m.Size()
}
func (m *TaskPowerSupplierShow) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPowerSupplierShow.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPowerSupplierShow proto.InternalMessageInfo

func (m *TaskPowerSupplierShow) GetOrganization() *types.TaskOrganization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *TaskPowerSupplierShow) GetPowerInfo() *types.ResourceUsageOverview {
	if m != nil {
		return m.PowerInfo
	}
	return nil
}

// 定义：任务事件（仅用于web页面交互使用）
type TaskEventShow struct {
	Type                 string              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TaskId               string              `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Owner                *types.Organization `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	PartyId              string              `protobuf:"bytes,4,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Content              string              `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	CreateAt             uint64              `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TaskEventShow) Reset()         { *m = TaskEventShow{} }
func (m *TaskEventShow) String() string { return proto.CompactTextString(m) }
func (*TaskEventShow) ProtoMessage()    {}
func (*TaskEventShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{4}
}
func (m *TaskEventShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskEventShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskEventShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskEventShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEventShow.Merge(m, src)
}
func (m *TaskEventShow) XXX_Size() int {
	return m.Size()
}
func (m *TaskEventShow) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEventShow.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEventShow proto.InternalMessageInfo

func (m *TaskEventShow) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TaskEventShow) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskEventShow) GetOwner() *types.Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TaskEventShow) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *TaskEventShow) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TaskEventShow) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

// 查看本组织参与过的全部任务详情列表
type GetTaskDetail struct {
	Information          *TaskDetailShow `protobuf:"bytes,1,opt,name=information,proto3" json:"information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetTaskDetail) Reset()         { *m = GetTaskDetail{} }
func (m *GetTaskDetail) String() string { return proto.CompactTextString(m) }
func (*GetTaskDetail) ProtoMessage()    {}
func (*GetTaskDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{5}
}
func (m *GetTaskDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskDetail.Merge(m, src)
}
func (m *GetTaskDetail) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskDetail.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskDetail proto.InternalMessageInfo

func (m *GetTaskDetail) GetInformation() *TaskDetailShow {
	if m != nil {
		return m.Information
	}
	return nil
}

type GetTaskDetailListRequest struct {
	LastUpdated          uint64   `protobuf:"varint,1,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	PageSize             uint64   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskDetailListRequest) Reset()         { *m = GetTaskDetailListRequest{} }
func (m *GetTaskDetailListRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskDetailListRequest) ProtoMessage()    {}
func (*GetTaskDetailListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{6}
}
func (m *GetTaskDetailListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskDetailListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskDetailListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskDetailListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskDetailListRequest.Merge(m, src)
}
func (m *GetTaskDetailListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskDetailListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskDetailListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskDetailListRequest proto.InternalMessageInfo

func (m *GetTaskDetailListRequest) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *GetTaskDetailListRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GetTaskDetailListByTaskIdsRequest struct {
	TaskIds              []string `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskDetailListByTaskIdsRequest) Reset()         { *m = GetTaskDetailListByTaskIdsRequest{} }
func (m *GetTaskDetailListByTaskIdsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskDetailListByTaskIdsRequest) ProtoMessage()    {}
func (*GetTaskDetailListByTaskIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{7}
}
func (m *GetTaskDetailListByTaskIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskDetailListByTaskIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskDetailListByTaskIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskDetailListByTaskIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskDetailListByTaskIdsRequest.Merge(m, src)
}
func (m *GetTaskDetailListByTaskIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskDetailListByTaskIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskDetailListByTaskIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskDetailListByTaskIdsRequest proto.InternalMessageInfo

func (m *GetTaskDetailListByTaskIdsRequest) GetTaskIds() []string {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

// 查看本组织参与过的全部任务详情列表 resp
type GetTaskDetailListResponse struct {
	Status               int32            `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Tasks                []*GetTaskDetail `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetTaskDetailListResponse) Reset()         { *m = GetTaskDetailListResponse{} }
func (m *GetTaskDetailListResponse) String() string { return proto.CompactTextString(m) }
func (*GetTaskDetailListResponse) ProtoMessage()    {}
func (*GetTaskDetailListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{8}
}
func (m *GetTaskDetailListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskDetailListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskDetailListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskDetailListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskDetailListResponse.Merge(m, src)
}
func (m *GetTaskDetailListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskDetailListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskDetailListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskDetailListResponse proto.InternalMessageInfo

func (m *GetTaskDetailListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetTaskDetailListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetTaskDetailListResponse) GetTasks() []*GetTaskDetail {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// 查看某个任务的全部事件列表 req
type GetTaskEventListRequest struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskEventListRequest) Reset()         { *m = GetTaskEventListRequest{} }
func (m *GetTaskEventListRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskEventListRequest) ProtoMessage()    {}
func (*GetTaskEventListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{9}
}
func (m *GetTaskEventListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskEventListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskEventListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskEventListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskEventListRequest.Merge(m, src)
}
func (m *GetTaskEventListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskEventListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskEventListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskEventListRequest proto.InternalMessageInfo

func (m *GetTaskEventListRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// 查看多个任务的全部事件列表 req
type GetTaskEventListByTaskIdsRequest struct {
	TaskIds              []string `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskEventListByTaskIdsRequest) Reset()         { *m = GetTaskEventListByTaskIdsRequest{} }
func (m *GetTaskEventListByTaskIdsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskEventListByTaskIdsRequest) ProtoMessage()    {}
func (*GetTaskEventListByTaskIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{10}
}
func (m *GetTaskEventListByTaskIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskEventListByTaskIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskEventListByTaskIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskEventListByTaskIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskEventListByTaskIdsRequest.Merge(m, src)
}
func (m *GetTaskEventListByTaskIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskEventListByTaskIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskEventListByTaskIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskEventListByTaskIdsRequest proto.InternalMessageInfo

func (m *GetTaskEventListByTaskIdsRequest) GetTaskIds() []string {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

// 查看某个or多个任务的全部事件列表 resp
type GetTaskEventListResponse struct {
	Status               int32            `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskEvents           []*TaskEventShow `protobuf:"bytes,3,rep,name=task_events,json=taskEvents,proto3" json:"task_events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetTaskEventListResponse) Reset()         { *m = GetTaskEventListResponse{} }
func (m *GetTaskEventListResponse) String() string { return proto.CompactTextString(m) }
func (*GetTaskEventListResponse) ProtoMessage()    {}
func (*GetTaskEventListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{11}
}
func (m *GetTaskEventListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskEventListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskEventListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskEventListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskEventListResponse.Merge(m, src)
}
func (m *GetTaskEventListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskEventListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskEventListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskEventListResponse proto.InternalMessageInfo

func (m *GetTaskEventListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetTaskEventListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetTaskEventListResponse) GetTaskEvents() []*TaskEventShow {
	if m != nil {
		return m.TaskEvents
	}
	return nil
}

// 发布任务 req
type PublishTaskDeclareRequest struct {
	TaskName                 string                         `protobuf:"bytes,1,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	User                     string                         `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	UserType                 types.UserType                 `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=types.UserType" json:"user_type,omitempty"`
	Sender                   *types.TaskOrganization        `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	AlgoSupplier             *types.TaskOrganization        `protobuf:"bytes,5,opt,name=algo_supplier,json=algoSupplier,proto3" json:"algo_supplier,omitempty"`
	DataSuppliers            []*types.TaskOrganization      `protobuf:"bytes,6,rep,name=data_suppliers,json=dataSuppliers,proto3" json:"data_suppliers,omitempty"`
	Receivers                []*types.TaskOrganization      `protobuf:"bytes,7,rep,name=receivers,proto3" json:"receivers,omitempty"`
	DataPolicyType           uint32                         `protobuf:"varint,8,opt,name=data_policy_type,json=dataPolicyType,proto3" json:"data_policy_type,omitempty"`
	DataPolicyOption         string                         `protobuf:"bytes,9,opt,name=data_policy_option,json=dataPolicyOption,proto3" json:"data_policy_option,omitempty"`
	PowerPolicyType          uint32                         `protobuf:"varint,10,opt,name=power_policy_type,json=powerPolicyType,proto3" json:"power_policy_type,omitempty"`
	PowerPolicyOption        string                         `protobuf:"bytes,11,opt,name=power_policy_option,json=powerPolicyOption,proto3" json:"power_policy_option,omitempty"`
	DataFlowPolicyType       uint32                         `protobuf:"varint,12,opt,name=data_flow_policy_type,json=dataFlowPolicyType,proto3" json:"data_flow_policy_type,omitempty"`
	DataFlowPolicyOption     string                         `protobuf:"bytes,13,opt,name=data_flow_policy_option,json=dataFlowPolicyOption,proto3" json:"data_flow_policy_option,omitempty"`
	OperationCost            *types.TaskResourceCostDeclare `protobuf:"bytes,14,opt,name=operation_cost,json=operationCost,proto3" json:"operation_cost,omitempty"`
	AlgorithmCode            string                         `protobuf:"bytes,15,opt,name=algorithm_code,json=algorithmCode,proto3" json:"algorithm_code,omitempty"`
	MetaAlgorithmId          string                         `protobuf:"bytes,16,opt,name=meta_algorithm_id,json=metaAlgorithmId,proto3" json:"meta_algorithm_id,omitempty"`
	AlgorithmCodeExtraParams string                         `protobuf:"bytes,17,opt,name=algorithm_code_extra_params,json=algorithmCodeExtraParams,proto3" json:"algorithm_code_extra_params,omitempty"`
	Sign                     []byte                         `protobuf:"bytes,18,opt,name=sign,proto3" json:"sign,omitempty"`
	Desc                     string                         `protobuf:"bytes,19,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                       `json:"-"`
	XXX_unrecognized         []byte                         `json:"-"`
	XXX_sizecache            int32                          `json:"-"`
}

func (m *PublishTaskDeclareRequest) Reset()         { *m = PublishTaskDeclareRequest{} }
func (m *PublishTaskDeclareRequest) String() string { return proto.CompactTextString(m) }
func (*PublishTaskDeclareRequest) ProtoMessage()    {}
func (*PublishTaskDeclareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{12}
}
func (m *PublishTaskDeclareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishTaskDeclareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishTaskDeclareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishTaskDeclareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishTaskDeclareRequest.Merge(m, src)
}
func (m *PublishTaskDeclareRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishTaskDeclareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishTaskDeclareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishTaskDeclareRequest proto.InternalMessageInfo

func (m *PublishTaskDeclareRequest) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *PublishTaskDeclareRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *PublishTaskDeclareRequest) GetUserType() types.UserType {
	if m != nil {
		return m.UserType
	}
	return types.UserType_User_Unknown
}

func (m *PublishTaskDeclareRequest) GetSender() *types.TaskOrganization {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *PublishTaskDeclareRequest) GetAlgoSupplier() *types.TaskOrganization {
	if m != nil {
		return m.AlgoSupplier
	}
	return nil
}

func (m *PublishTaskDeclareRequest) GetDataSuppliers() []*types.TaskOrganization {
	if m != nil {
		return m.DataSuppliers
	}
	return nil
}

func (m *PublishTaskDeclareRequest) GetReceivers() []*types.TaskOrganization {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *PublishTaskDeclareRequest) GetDataPolicyType() uint32 {
	if m != nil {
		return m.DataPolicyType
	}
	return 0
}

func (m *PublishTaskDeclareRequest) GetDataPolicyOption() string {
	if m != nil {
		return m.DataPolicyOption
	}
	return ""
}

func (m *PublishTaskDeclareRequest) GetPowerPolicyType() uint32 {
	if m != nil {
		return m.PowerPolicyType
	}
	return 0
}

func (m *PublishTaskDeclareRequest) GetPowerPolicyOption() string {
	if m != nil {
		return m.PowerPolicyOption
	}
	return ""
}

func (m *PublishTaskDeclareRequest) GetDataFlowPolicyType() uint32 {
	if m != nil {
		return m.DataFlowPolicyType
	}
	return 0
}

func (m *PublishTaskDeclareRequest) GetDataFlowPolicyOption() string {
	if m != nil {
		return m.DataFlowPolicyOption
	}
	return ""
}

func (m *PublishTaskDeclareRequest) GetOperationCost() *types.TaskResourceCostDeclare {
	if m != nil {
		return m.OperationCost
	}
	return nil
}

func (m *PublishTaskDeclareRequest) GetAlgorithmCode() string {
	if m != nil {
		return m.AlgorithmCode
	}
	return ""
}

func (m *PublishTaskDeclareRequest) GetMetaAlgorithmId() string {
	if m != nil {
		return m.MetaAlgorithmId
	}
	return ""
}

func (m *PublishTaskDeclareRequest) GetAlgorithmCodeExtraParams() string {
	if m != nil {
		return m.AlgorithmCodeExtraParams
	}
	return ""
}

func (m *PublishTaskDeclareRequest) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *PublishTaskDeclareRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// 发布任务 resp
type PublishTaskDeclareResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskId               string   `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishTaskDeclareResponse) Reset()         { *m = PublishTaskDeclareResponse{} }
func (m *PublishTaskDeclareResponse) String() string { return proto.CompactTextString(m) }
func (*PublishTaskDeclareResponse) ProtoMessage()    {}
func (*PublishTaskDeclareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{13}
}
func (m *PublishTaskDeclareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishTaskDeclareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishTaskDeclareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishTaskDeclareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishTaskDeclareResponse.Merge(m, src)
}
func (m *PublishTaskDeclareResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishTaskDeclareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishTaskDeclareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishTaskDeclareResponse proto.InternalMessageInfo

func (m *PublishTaskDeclareResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PublishTaskDeclareResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PublishTaskDeclareResponse) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// 终止任务 req
type TerminateTaskRequest struct {
	User                 string         `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	UserType             types.UserType `protobuf:"varint,2,opt,name=user_type,json=userType,proto3,enum=types.UserType" json:"user_type,omitempty"`
	TaskId               string         `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Sign                 []byte         `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TerminateTaskRequest) Reset()         { *m = TerminateTaskRequest{} }
func (m *TerminateTaskRequest) String() string { return proto.CompactTextString(m) }
func (*TerminateTaskRequest) ProtoMessage()    {}
func (*TerminateTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a744901dce4e8cd, []int{14}
}
func (m *TerminateTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminateTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminateTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminateTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminateTaskRequest.Merge(m, src)
}
func (m *TerminateTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *TerminateTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminateTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TerminateTaskRequest proto.InternalMessageInfo

func (m *TerminateTaskRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TerminateTaskRequest) GetUserType() types.UserType {
	if m != nil {
		return m.UserType
	}
	return types.UserType_User_Unknown
}

func (m *TerminateTaskRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TerminateTaskRequest) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskDetailShow)(nil), "rpcapi.TaskDetailShow")
	proto.RegisterType((*TaskAlgoSupplier)(nil), "rpcapi.TaskAlgoSupplier")
	proto.RegisterType((*TaskDataSupplierShow)(nil), "rpcapi.TaskDataSupplierShow")
	proto.RegisterType((*TaskPowerSupplierShow)(nil), "rpcapi.TaskPowerSupplierShow")
	proto.RegisterType((*TaskEventShow)(nil), "rpcapi.TaskEventShow")
	proto.RegisterType((*GetTaskDetail)(nil), "rpcapi.GetTaskDetail")
	proto.RegisterType((*GetTaskDetailListRequest)(nil), "rpcapi.GetTaskDetailListRequest")
	proto.RegisterType((*GetTaskDetailListByTaskIdsRequest)(nil), "rpcapi.GetTaskDetailListByTaskIdsRequest")
	proto.RegisterType((*GetTaskDetailListResponse)(nil), "rpcapi.GetTaskDetailListResponse")
	proto.RegisterType((*GetTaskEventListRequest)(nil), "rpcapi.GetTaskEventListRequest")
	proto.RegisterType((*GetTaskEventListByTaskIdsRequest)(nil), "rpcapi.GetTaskEventListByTaskIdsRequest")
	proto.RegisterType((*GetTaskEventListResponse)(nil), "rpcapi.GetTaskEventListResponse")
	proto.RegisterType((*PublishTaskDeclareRequest)(nil), "rpcapi.PublishTaskDeclareRequest")
	proto.RegisterType((*PublishTaskDeclareResponse)(nil), "rpcapi.PublishTaskDeclareResponse")
	proto.RegisterType((*TerminateTaskRequest)(nil), "rpcapi.TerminateTaskRequest")
}

func init() { proto.RegisterFile("lib/api/task_rpc_api.proto", fileDescriptor_7a744901dce4e8cd) }

var fileDescriptor_7a744901dce4e8cd = []byte{
	// 1470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x06, 0x6d, 0x49, 0x96, 0x46, 0x1f, 0x56, 0xd6, 0x76, 0x4c, 0x2b, 0x89, 0xa3, 0x30, 0x48,
	0xa0, 0xe4, 0xcd, 0x2b, 0x21, 0x2e, 0xd2, 0x16, 0x49, 0x13, 0xc0, 0x71, 0x12, 0xc3, 0x40, 0xd0,
	0x18, 0x74, 0x72, 0xc9, 0x45, 0x58, 0x93, 0x1b, 0x99, 0x08, 0xc5, 0x65, 0xb9, 0x2b, 0xbb, 0x0e,
	0x72, 0xe8, 0x07, 0xfa, 0x03, 0xda, 0x1e, 0x8a, 0xfe, 0x86, 0x5e, 0x7b, 0xe9, 0xb1, 0xb7, 0x1e,
	0x0b, 0xf4, 0x0f, 0x14, 0x41, 0xff, 0x47, 0x8b, 0x9d, 0x25, 0x25, 0x52, 0x1f, 0x8e, 0x83, 0xb4,
	0x27, 0x73, 0x67, 0x67, 0x9f, 0x79, 0x76, 0x38, 0x33, 0x0f, 0x2d, 0x68, 0xf8, 0xde, 0x7e, 0x87,
	0x86, 0x5e, 0x47, 0x52, 0xf1, 0xb2, 0x1b, 0x85, 0x4e, 0x97, 0x86, 0x5e, 0x3b, 0x8c, 0xb8, 0xe4,
	0xa4, 0x10, 0x85, 0x0e, 0x0d, 0xbd, 0xc6, 0xb2, 0xf2, 0x91, 0xc7, 0x21, 0x13, 0x9d, 0x7d, 0x2a,
	0x98, 0xde, 0x6d, 0x9c, 0x1f, 0x59, 0x23, 0x26, 0xf8, 0x20, 0x72, 0x98, 0x4b, 0x25, 0x4d, 0x76,
	0x7b, 0x9c, 0xf7, 0x7c, 0x86, 0xd0, 0x34, 0x08, 0xb8, 0xa4, 0xd2, 0xe3, 0x81, 0xd0, 0xbb, 0xd6,
	0xaf, 0x79, 0xa8, 0x3d, 0xa5, 0xe2, 0xe5, 0x03, 0x26, 0xa9, 0xe7, 0xef, 0x1d, 0xf0, 0x23, 0xb2,
	0x0a, 0x0b, 0x48, 0xc1, 0x73, 0x4d, 0xa3, 0x69, 0xb4, 0x4a, 0x76, 0x41, 0x2d, 0x77, 0x5c, 0x72,
	0x0e, 0x4a, 0xb8, 0x11, 0xd0, 0x3e, 0x33, 0xe7, 0x70, 0xab, 0xa8, 0x0c, 0x9f, 0xd2, 0x3e, 0x23,
	0x04, 0x72, 0x03, 0xc1, 0x22, 0x73, 0x1e, 0xed, 0xf8, 0x4c, 0x6e, 0x40, 0x49, 0xfd, 0xed, 0x2a,
	0x6e, 0x66, 0xae, 0x69, 0xb4, 0x6a, 0x1b, 0x8b, 0x6d, 0x24, 0xda, 0x7e, 0x26, 0x58, 0xf4, 0xf4,
	0x38, 0x64, 0x76, 0x71, 0x10, 0x3f, 0x91, 0x0e, 0x14, 0x04, 0x0b, 0x5c, 0x16, 0x99, 0xf9, 0xa6,
	0xd1, 0x2a, 0x6f, 0xac, 0xc6, 0xae, 0x8a, 0xde, 0x93, 0xa8, 0x47, 0x03, 0xef, 0x15, 0x52, 0xb7,
	0x63, 0x37, 0x72, 0x17, 0xaa, 0xd4, 0xef, 0xf1, 0xae, 0x18, 0x84, 0xa1, 0xef, 0xb1, 0xc8, 0x2c,
	0xe0, 0x39, 0xb3, 0xad, 0xb3, 0x85, 0x07, 0x37, 0xfd, 0x1e, 0xdf, 0x8b, 0xf7, 0xed, 0x0a, 0x4d,
	0xad, 0xc8, 0x16, 0xd4, 0x54, 0x9a, 0x86, 0xc7, 0x85, 0xb9, 0xd0, 0x9c, 0x6f, 0x95, 0x37, 0xce,
	0xa7, 0xcf, 0x3f, 0xa0, 0x92, 0x26, 0x27, 0x54, 0x76, 0xec, 0xaa, 0x9b, 0xb2, 0x08, 0xf2, 0x08,
	0x16, 0x43, 0x7e, 0xc4, 0xa2, 0x14, 0x4a, 0x11, 0x51, 0x2e, 0xa4, 0x51, 0x76, 0x95, 0x4b, 0x06,
	0xa6, 0x16, 0xa6, 0x4d, 0x82, 0xdc, 0x82, 0x52, 0xc4, 0x1c, 0xe6, 0x1d, 0x2a, 0x84, 0x12, 0x22,
	0xcc, 0xbc, 0xff, 0xc8, 0x53, 0xbd, 0x12, 0x27, 0x62, 0x54, 0xb2, 0x2e, 0x95, 0x26, 0x34, 0x8d,
	0x56, 0xce, 0x2e, 0x6a, 0xc3, 0xa6, 0x24, 0x6b, 0x50, 0x14, 0x92, 0x46, 0x52, 0xed, 0x95, 0x71,
	0x6f, 0x01, 0xd7, 0x9b, 0x92, 0xac, 0x40, 0x81, 0x05, 0xae, 0xda, 0xa8, 0xe0, 0x46, 0x9e, 0x05,
	0xee, 0xa6, 0x24, 0x57, 0x21, 0x2f, 0x24, 0x95, 0xcc, 0xac, 0xe2, 0xcb, 0xaa, 0xa7, 0x18, 0xec,
	0x29, 0xbb, 0xad, 0xb7, 0xc9, 0x43, 0xa8, 0xf1, 0x90, 0x45, 0x48, 0xa7, 0xeb, 0x70, 0x21, 0xcd,
	0x1a, 0xa6, 0x7e, 0x3d, 0x75, 0xc0, 0x8e, 0x4b, 0x71, 0x8b, 0x0b, 0xf9, 0x80, 0x39, 0x3e, 0x8d,
	0x98, 0x5d, 0x1d, 0x9e, 0x52, 0x56, 0x55, 0x33, 0x2e, 0x13, 0x8e, 0xb9, 0xa8, 0x6b, 0x46, 0x3d,
	0xab, 0x1b, 0x0d, 0x42, 0x37, 0xbe, 0x51, 0x5d, 0xdf, 0x48, 0x1b, 0x36, 0x25, 0x59, 0x86, 0x7c,
	0xc0, 0x03, 0x87, 0x99, 0x67, 0x34, 0x6b, 0x5c, 0x58, 0x3f, 0x19, 0x50, 0x1f, 0x7f, 0xd7, 0xe4,
	0x0e, 0x54, 0x78, 0x2a, 0x69, 0x58, 0xca, 0x27, 0xe4, 0x34, 0xe3, 0x4c, 0xae, 0xc3, 0x99, 0x3e,
	0x93, 0xb4, 0xab, 0xea, 0x25, 0xf2, 0xe4, 0x41, 0x5f, 0x35, 0x83, 0xae, 0xf8, 0x45, 0xb5, 0xb1,
	0x99, 0xd8, 0x77, 0x5c, 0xd2, 0x86, 0xa5, 0x31, 0x5f, 0xec, 0x0f, 0xdd, 0x07, 0x67, 0x32, 0xde,
	0xaa, 0x51, 0xac, 0x1f, 0x0d, 0x58, 0x9e, 0x56, 0x59, 0xef, 0xc7, 0xf8, 0x22, 0x94, 0x55, 0x28,
	0x2c, 0xe8, 0x21, 0x57, 0x48, 0x4c, 0x3b, 0x2e, 0xb9, 0x0c, 0xd5, 0xa1, 0x43, 0x8a, 0x60, 0x25,
	0x31, 0x22, 0xb7, 0x6f, 0x0d, 0x58, 0x99, 0x5a, 0xaf, 0xef, 0x47, 0xee, 0x0e, 0x80, 0x6e, 0x12,
	0x2f, 0x78, 0xc1, 0x91, 0x9b, 0xea, 0x32, 0x7d, 0x34, 0x29, 0x93, 0x67, 0x82, 0xf6, 0xd8, 0x93,
	0x43, 0x16, 0x1d, 0x7a, 0xec, 0xc8, 0x2e, 0xa1, 0xff, 0x4e, 0xf0, 0x82, 0x5b, 0xbf, 0x18, 0x50,
	0x55, 0xf8, 0x0f, 0x0f, 0x59, 0x20, 0x91, 0x0b, 0x81, 0x1c, 0x4e, 0x14, 0x3d, 0x9d, 0xf0, 0x39,
	0x3d, 0xb4, 0xe6, 0x32, 0x43, 0xeb, 0x1a, 0xe4, 0xf9, 0x51, 0x10, 0x0f, 0xa6, 0xf2, 0xc6, 0x52,
	0x1c, 0x36, 0xc3, 0x56, 0x7b, 0xa8, 0x7e, 0x09, 0x69, 0x24, 0x8f, 0x15, 0x48, 0x0e, 0x41, 0x16,
	0x70, 0xbd, 0xe3, 0x12, 0x13, 0x16, 0x1c, 0x1e, 0x48, 0x16, 0x48, 0x1c, 0x4e, 0x25, 0x3b, 0x59,
	0x66, 0x3b, 0xb0, 0x90, 0xed, 0x40, 0x6b, 0x07, 0xaa, 0xdb, 0x4c, 0x8e, 0xe6, 0x2b, 0xf9, 0x18,
	0xca, 0x2a, 0x07, 0x51, 0x3f, 0x9d, 0xc5, 0xb3, 0x99, 0x81, 0x33, 0x1c, 0xc4, 0x76, 0xda, 0xd5,
	0x7a, 0x0e, 0x66, 0x06, 0xea, 0xb1, 0x27, 0xa4, 0xcd, 0x3e, 0x1b, 0x30, 0x21, 0xc9, 0x25, 0xa8,
	0xf8, 0x54, 0xc8, 0xae, 0xee, 0x13, 0x3d, 0xb6, 0x73, 0x76, 0x59, 0xd9, 0x9e, 0x69, 0x93, 0xa2,
	0x19, 0xd2, 0x1e, 0xeb, 0x0a, 0xef, 0x95, 0x9e, 0xdd, 0x39, 0xbb, 0xa8, 0x0c, 0x7b, 0xde, 0x2b,
	0x66, 0xdd, 0x83, 0x4b, 0x13, 0xd8, 0xf7, 0x8f, 0x9f, 0x62, 0x02, 0x45, 0x12, 0x64, 0x0d, 0x8a,
	0x71, 0x86, 0x85, 0x69, 0x34, 0xe7, 0x55, 0x0e, 0x74, 0x8a, 0x85, 0x15, 0xc1, 0xda, 0x14, 0x6e,
	0x22, 0xe4, 0x81, 0x60, 0xe4, 0x2c, 0x14, 0xd4, 0xd0, 0x18, 0x08, 0xa4, 0x95, 0xb7, 0xe3, 0x15,
	0xa9, 0xc3, 0x7c, 0x5f, 0xf4, 0xe2, 0xb7, 0xa5, 0x1e, 0xc9, 0xff, 0x20, 0xaf, 0x10, 0x85, 0x39,
	0x8f, 0xf3, 0x6f, 0x25, 0x49, 0x4b, 0x06, 0xdb, 0xd6, 0x3e, 0xd6, 0x06, 0xac, 0xc6, 0x76, 0x2c,
	0x8c, 0x74, 0x3a, 0x66, 0x09, 0x98, 0x75, 0x17, 0x9a, 0xe3, 0x67, 0xde, 0xe5, 0x9a, 0xaf, 0x87,
	0xaf, 0x20, 0x15, 0xf2, 0x9d, 0x6f, 0xf9, 0x21, 0x94, 0x31, 0x00, 0x53, 0x18, 0x13, 0x77, 0xcd,
	0x54, 0xba, 0x0d, 0x32, 0x59, 0x0a, 0xeb, 0xef, 0x02, 0xac, 0xed, 0x0e, 0xf6, 0x7d, 0x4f, 0x1c,
	0xe8, 0x6c, 0xe8, 0x91, 0x1a, 0xd3, 0xce, 0x68, 0xb3, 0x31, 0x43, 0x9b, 0xe7, 0x66, 0x69, 0xf3,
	0xfc, 0xe9, 0xb5, 0x39, 0x77, 0x3a, 0x6d, 0xfe, 0x64, 0x5c, 0x9b, 0xdf, 0xa2, 0xe9, 0x59, 0x69,
	0xbe, 0x37, 0x21, 0xcd, 0x85, 0x93, 0x25, 0x71, 0x4c, 0x95, 0x33, 0x6a, 0xba, 0x70, 0x6a, 0x35,
	0x6d, 0x41, 0x1d, 0xc3, 0x86, 0xdc, 0xf7, 0x9c, 0x63, 0x9d, 0x9a, 0x62, 0xd3, 0x68, 0x55, 0x6d,
	0xa4, 0xb3, 0x8b, 0x66, 0xcc, 0xc7, 0x0d, 0x20, 0x69, 0x4f, 0x1e, 0x62, 0x3b, 0x97, 0x30, 0xbf,
	0xf5, 0x91, 0xef, 0x93, 0x30, 0x91, 0x13, 0x3d, 0xff, 0xd2, 0xc0, 0x80, 0xc0, 0xfa, 0xeb, 0x21,
	0x85, 0xdc, 0x86, 0xa5, 0x8c, 0x6f, 0x0c, 0x5d, 0xd6, 0x72, 0x92, 0xf2, 0x8e, 0xb1, 0x6f, 0xc2,
	0x0a, 0x32, 0x79, 0xe1, 0xf3, 0xa3, 0x0c, 0x7e, 0x05, 0xf1, 0x91, 0xe6, 0x23, 0x9f, 0x1f, 0xa5,
	0x42, 0xdc, 0x82, 0xd5, 0x89, 0x23, 0x71, 0x98, 0x2a, 0x86, 0x59, 0xce, 0x1e, 0x8a, 0x23, 0xfd,
	0x4b, 0xa2, 0x7f, 0x05, 0x6a, 0x23, 0xa9, 0x74, 0xb8, 0xcb, 0x62, 0xf9, 0xaf, 0x0e, 0xad, 0x5b,
	0xdc, 0x65, 0xd3, 0x25, 0xb8, 0x3e, 0x5d, 0x82, 0xef, 0xc2, 0xb9, 0x2c, 0x64, 0x97, 0x7d, 0x2e,
	0x23, 0xda, 0x0d, 0x69, 0x44, 0xfb, 0x02, 0x3f, 0x16, 0x4a, 0xb6, 0x99, 0xc1, 0x7f, 0xa8, 0x1c,
	0x76, 0x71, 0x5f, 0xb5, 0x87, 0xf0, 0x7a, 0x81, 0x49, 0x9a, 0x46, 0xab, 0x62, 0xe3, 0xf3, 0xf0,
	0xd3, 0x64, 0x69, 0xf4, 0x69, 0x62, 0x75, 0xa1, 0x31, 0xad, 0x01, 0xdf, 0x79, 0x02, 0xa4, 0xe6,
	0xd3, 0x7c, 0x66, 0x3e, 0x7d, 0xa3, 0x3e, 0x0d, 0x58, 0xd4, 0xf7, 0x02, 0x2a, 0x99, 0x4e, 0xa7,
	0xee, 0xee, 0xa4, 0x81, 0x8d, 0x59, 0x0d, 0x3c, 0xf7, 0xb6, 0x06, 0x9e, 0x15, 0x73, 0x78, 0xf9,
	0xca, 0xe8, 0xf2, 0x1b, 0x3f, 0x2f, 0x40, 0x19, 0xbf, 0xf9, 0x94, 0x1a, 0x3b, 0x8c, 0x7c, 0x69,
	0xc0, 0xd9, 0x6d, 0x26, 0x1f, 0x73, 0x87, 0xfa, 0xd9, 0x29, 0x4f, 0x9a, 0x53, 0x87, 0x74, 0x6a,
	0x1a, 0x37, 0x2e, 0x9d, 0xe0, 0xa1, 0x53, 0x67, 0x59, 0x5f, 0xfd, 0xf1, 0xd7, 0xf7, 0x73, 0xe7,
	0x49, 0xa3, 0xe3, 0xd0, 0x28, 0xf2, 0x58, 0xd4, 0x39, 0xbc, 0x89, 0xff, 0x06, 0x75, 0x7c, 0x15,
	0x12, 0x03, 0x7d, 0x6d, 0xe0, 0xc0, 0xdf, 0xf6, 0xf9, 0xfe, 0x7f, 0x43, 0xe2, 0x32, 0x92, 0xb8,
	0x40, 0xce, 0x4d, 0x90, 0xe8, 0x61, 0x4c, 0x8c, 0xf4, 0x9d, 0x01, 0x8d, 0xd9, 0x52, 0x49, 0xae,
	0xcd, 0x0c, 0x33, 0xae, 0x33, 0xa7, 0x61, 0x74, 0x15, 0x19, 0x35, 0xc9, 0xfa, 0x64, 0x5a, 0x32,
	0x51, 0x5f, 0x43, 0x7d, 0x5c, 0x97, 0xc8, 0xc5, 0x31, 0xf8, 0x71, 0x91, 0x6c, 0x34, 0x67, 0x3b,
	0xc4, 0xe1, 0xaf, 0x60, 0xf8, 0x8b, 0xd6, 0xe4, 0x5b, 0x61, 0x89, 0xef, 0x6d, 0xe3, 0x3a, 0xf9,
	0xc1, 0x18, 0xaa, 0xff, 0xa4, 0xaa, 0x92, 0xd6, 0xac, 0x30, 0x13, 0x09, 0x79, 0x3b, 0xa1, 0x36,
	0x12, 0x6a, 0x59, 0x97, 0x67, 0x13, 0x1a, 0xa2, 0x2a, 0x66, 0x5f, 0x18, 0x40, 0x26, 0x1b, 0x96,
	0x0c, 0x33, 0x3f, 0x53, 0x4d, 0x1b, 0xd6, 0x49, 0x2e, 0xd9, 0x7a, 0xb1, 0xcc, 0x09, 0x36, 0xa1,
	0x3e, 0xa4, 0x28, 0xbc, 0x84, 0x6a, 0xa6, 0xa1, 0xc9, 0xe8, 0x9f, 0xcb, 0x29, 0x7d, 0xde, 0x58,
	0x89, 0x1b, 0x78, 0xcf, 0xeb, 0x87, 0x3e, 0x3b, 0xc5, 0x9b, 0x90, 0x09, 0xca, 0x6d, 0xe3, 0xfa,
	0xfd, 0x8f, 0x7e, 0x7b, 0xb3, 0x6e, 0xfc, 0xfe, 0x66, 0xdd, 0xf8, 0xf3, 0xcd, 0xba, 0xf1, 0xfc,
	0x5a, 0xcf, 0x93, 0x07, 0x83, 0xfd, 0xb6, 0xc3, 0xfb, 0x1d, 0x9b, 0x0b, 0x26, 0xf5, 0x48, 0xef,
	0x6c, 0x69, 0x88, 0xff, 0x6f, 0xf3, 0x4e, 0xfc, 0x8b, 0xc3, 0x7e, 0x01, 0x7f, 0x0b, 0xf8, 0xe0,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x5a, 0xf2, 0x04, 0x83, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	// 查看本组织参与过的全部任务详情列表 (支持分页)
	GetLocalTaskDetailList(ctx context.Context, in *GetTaskDetailListRequest, opts ...grpc.CallOption) (*GetTaskDetailListResponse, error)
	// 查看全网全部任务详情列表 (支持分页)
	GetGlobalTaskDetailList(ctx context.Context, in *GetTaskDetailListRequest, opts ...grpc.CallOption) (*GetTaskDetailListResponse, error)
	// 查看本组织参与过的全部任务详情列表 (v3.0)
	GetTaskDetailListByTaskIds(ctx context.Context, in *GetTaskDetailListByTaskIdsRequest, opts ...grpc.CallOption) (*GetTaskDetailListResponse, error)
	// 查看某个任务的全部事件列表
	GetTaskEventList(ctx context.Context, in *GetTaskEventListRequest, opts ...grpc.CallOption) (*GetTaskEventListResponse, error)
	// 查看多个任务的全部事件列表
	GetTaskEventListByTaskIds(ctx context.Context, in *GetTaskEventListByTaskIdsRequest, opts ...grpc.CallOption) (*GetTaskEventListResponse, error)
	// 发布任务
	PublishTaskDeclare(ctx context.Context, in *PublishTaskDeclareRequest, opts ...grpc.CallOption) (*PublishTaskDeclareResponse, error)
	// 终止任务
	TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetLocalTaskDetailList(ctx context.Context, in *GetTaskDetailListRequest, opts ...grpc.CallOption) (*GetTaskDetailListResponse, error) {
	out := new(GetTaskDetailListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.TaskService/GetLocalTaskDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetGlobalTaskDetailList(ctx context.Context, in *GetTaskDetailListRequest, opts ...grpc.CallOption) (*GetTaskDetailListResponse, error) {
	out := new(GetTaskDetailListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.TaskService/GetGlobalTaskDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskDetailListByTaskIds(ctx context.Context, in *GetTaskDetailListByTaskIdsRequest, opts ...grpc.CallOption) (*GetTaskDetailListResponse, error) {
	out := new(GetTaskDetailListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.TaskService/GetTaskDetailListByTaskIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskEventList(ctx context.Context, in *GetTaskEventListRequest, opts ...grpc.CallOption) (*GetTaskEventListResponse, error) {
	out := new(GetTaskEventListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.TaskService/GetTaskEventList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskEventListByTaskIds(ctx context.Context, in *GetTaskEventListByTaskIdsRequest, opts ...grpc.CallOption) (*GetTaskEventListResponse, error) {
	out := new(GetTaskEventListResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.TaskService/GetTaskEventListByTaskIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PublishTaskDeclare(ctx context.Context, in *PublishTaskDeclareRequest, opts ...grpc.CallOption) (*PublishTaskDeclareResponse, error) {
	out := new(PublishTaskDeclareResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.TaskService/PublishTaskDeclare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/rpcapi.TaskService/TerminateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	// 查看本组织参与过的全部任务详情列表 (支持分页)
	GetLocalTaskDetailList(context.Context, *GetTaskDetailListRequest) (*GetTaskDetailListResponse, error)
	// 查看全网全部任务详情列表 (支持分页)
	GetGlobalTaskDetailList(context.Context, *GetTaskDetailListRequest) (*GetTaskDetailListResponse, error)
	// 查看本组织参与过的全部任务详情列表 (v3.0)
	GetTaskDetailListByTaskIds(context.Context, *GetTaskDetailListByTaskIdsRequest) (*GetTaskDetailListResponse, error)
	// 查看某个任务的全部事件列表
	GetTaskEventList(context.Context, *GetTaskEventListRequest) (*GetTaskEventListResponse, error)
	// 查看多个任务的全部事件列表
	GetTaskEventListByTaskIds(context.Context, *GetTaskEventListByTaskIdsRequest) (*GetTaskEventListResponse, error)
	// 发布任务
	PublishTaskDeclare(context.Context, *PublishTaskDeclareRequest) (*PublishTaskDeclareResponse, error)
	// 终止任务
	TerminateTask(context.Context, *TerminateTaskRequest) (*types.SimpleResponse, error)
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) GetLocalTaskDetailList(ctx context.Context, req *GetTaskDetailListRequest) (*GetTaskDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalTaskDetailList not implemented")
}
func (*UnimplementedTaskServiceServer) GetGlobalTaskDetailList(ctx context.Context, req *GetTaskDetailListRequest) (*GetTaskDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalTaskDetailList not implemented")
}
func (*UnimplementedTaskServiceServer) GetTaskDetailListByTaskIds(ctx context.Context, req *GetTaskDetailListByTaskIdsRequest) (*GetTaskDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskDetailListByTaskIds not implemented")
}
func (*UnimplementedTaskServiceServer) GetTaskEventList(ctx context.Context, req *GetTaskEventListRequest) (*GetTaskEventListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskEventList not implemented")
}
func (*UnimplementedTaskServiceServer) GetTaskEventListByTaskIds(ctx context.Context, req *GetTaskEventListByTaskIdsRequest) (*GetTaskEventListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskEventListByTaskIds not implemented")
}
func (*UnimplementedTaskServiceServer) PublishTaskDeclare(ctx context.Context, req *PublishTaskDeclareRequest) (*PublishTaskDeclareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTaskDeclare not implemented")
}
func (*UnimplementedTaskServiceServer) TerminateTask(ctx context.Context, req *TerminateTaskRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateTask not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_GetLocalTaskDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskDetailListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetLocalTaskDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TaskService/GetLocalTaskDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetLocalTaskDetailList(ctx, req.(*GetTaskDetailListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetGlobalTaskDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskDetailListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetGlobalTaskDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TaskService/GetGlobalTaskDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetGlobalTaskDetailList(ctx, req.(*GetTaskDetailListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskDetailListByTaskIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskDetailListByTaskIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskDetailListByTaskIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TaskService/GetTaskDetailListByTaskIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskDetailListByTaskIds(ctx, req.(*GetTaskDetailListByTaskIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskEventList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskEventListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskEventList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TaskService/GetTaskEventList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskEventList(ctx, req.(*GetTaskEventListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskEventListByTaskIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskEventListByTaskIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskEventListByTaskIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TaskService/GetTaskEventListByTaskIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskEventListByTaskIds(ctx, req.(*GetTaskEventListByTaskIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PublishTaskDeclare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTaskDeclareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PublishTaskDeclare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TaskService/PublishTaskDeclare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PublishTaskDeclare(ctx, req.(*PublishTaskDeclareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_TerminateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TerminateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TaskService/TerminateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TerminateTask(ctx, req.(*TerminateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcapi.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocalTaskDetailList",
			Handler:    _TaskService_GetLocalTaskDetailList_Handler,
		},
		{
			MethodName: "GetGlobalTaskDetailList",
			Handler:    _TaskService_GetGlobalTaskDetailList_Handler,
		},
		{
			MethodName: "GetTaskDetailListByTaskIds",
			Handler:    _TaskService_GetTaskDetailListByTaskIds_Handler,
		},
		{
			MethodName: "GetTaskEventList",
			Handler:    _TaskService_GetTaskEventList_Handler,
		},
		{
			MethodName: "GetTaskEventListByTaskIds",
			Handler:    _TaskService_GetTaskEventListByTaskIds_Handler,
		},
		{
			MethodName: "PublishTaskDeclare",
			Handler:    _TaskService_PublishTaskDeclare_Handler,
		},
		{
			MethodName: "TerminateTask",
			Handler:    _TaskService_TerminateTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/api/task_rpc_api.proto",
}

func (m *TaskDetailShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDetailShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskDetailShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nonce != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.UpdateAt != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x7a
	}
	if m.OperationCost != nil {
		{
			size, err := m.OperationCost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.State != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x68
	}
	if m.EndAt != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x60
	}
	if m.StartAt != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateAt != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.PowerSuppliers) > 0 {
		for iNdEx := len(m.PowerSuppliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PowerSuppliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DataSuppliers) > 0 {
		for iNdEx := len(m.DataSuppliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSuppliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.AlgoSupplier != nil {
		{
			size, err := m.AlgoSupplier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UserType != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskName) > 0 {
		i -= len(m.TaskName)
		copy(dAtA[i:], m.TaskName)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.TaskName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskAlgoSupplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskAlgoSupplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskAlgoSupplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MetaAlgorithmName) > 0 {
		i -= len(m.MetaAlgorithmName)
		copy(dAtA[i:], m.MetaAlgorithmName)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.MetaAlgorithmName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetaAlgorithmId) > 0 {
		i -= len(m.MetaAlgorithmId)
		copy(dAtA[i:], m.MetaAlgorithmId)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.MetaAlgorithmId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskDataSupplierShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDataSupplierShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskDataSupplierShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MetadataName) > 0 {
		i -= len(m.MetadataName)
		copy(dAtA[i:], m.MetadataName)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.MetadataName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetadataId) > 0 {
		i -= len(m.MetadataId)
		copy(dAtA[i:], m.MetadataId)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.MetadataId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskPowerSupplierShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskPowerSupplierShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskPowerSupplierShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PowerInfo != nil {
		{
			size, err := m.PowerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskEventShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskEventShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskEventShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PartyId) > 0 {
		i -= len(m.PartyId)
		copy(dAtA[i:], m.PartyId)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.PartyId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskDetailListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskDetailListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskDetailListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.LastUpdated != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.LastUpdated))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskDetailListByTaskIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskDetailListByTaskIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskDetailListByTaskIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskIds) > 0 {
		for iNdEx := len(m.TaskIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskIds[iNdEx])
			copy(dAtA[i:], m.TaskIds[iNdEx])
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.TaskIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskDetailListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskDetailListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskDetailListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskEventListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskEventListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskEventListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskEventListByTaskIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskEventListByTaskIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskEventListByTaskIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskIds) > 0 {
		for iNdEx := len(m.TaskIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskIds[iNdEx])
			copy(dAtA[i:], m.TaskIds[iNdEx])
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.TaskIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskEventListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskEventListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskEventListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskEvents) > 0 {
		for iNdEx := len(m.TaskEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishTaskDeclareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishTaskDeclareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishTaskDeclareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.AlgorithmCodeExtraParams) > 0 {
		i -= len(m.AlgorithmCodeExtraParams)
		copy(dAtA[i:], m.AlgorithmCodeExtraParams)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.AlgorithmCodeExtraParams)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.MetaAlgorithmId) > 0 {
		i -= len(m.MetaAlgorithmId)
		copy(dAtA[i:], m.MetaAlgorithmId)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.MetaAlgorithmId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.AlgorithmCode) > 0 {
		i -= len(m.AlgorithmCode)
		copy(dAtA[i:], m.AlgorithmCode)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.AlgorithmCode)))
		i--
		dAtA[i] = 0x7a
	}
	if m.OperationCost != nil {
		{
			size, err := m.OperationCost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.DataFlowPolicyOption) > 0 {
		i -= len(m.DataFlowPolicyOption)
		copy(dAtA[i:], m.DataFlowPolicyOption)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.DataFlowPolicyOption)))
		i--
		dAtA[i] = 0x6a
	}
	if m.DataFlowPolicyType != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.DataFlowPolicyType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.PowerPolicyOption) > 0 {
		i -= len(m.PowerPolicyOption)
		copy(dAtA[i:], m.PowerPolicyOption)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.PowerPolicyOption)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PowerPolicyType != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.PowerPolicyType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DataPolicyOption) > 0 {
		i -= len(m.DataPolicyOption)
		copy(dAtA[i:], m.DataPolicyOption)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.DataPolicyOption)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DataPolicyType != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.DataPolicyType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DataSuppliers) > 0 {
		for iNdEx := len(m.DataSuppliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSuppliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.AlgoSupplier != nil {
		{
			size, err := m.AlgoSupplier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserType != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskName) > 0 {
		i -= len(m.TaskName)
		copy(dAtA[i:], m.TaskName)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.TaskName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishTaskDeclareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishTaskDeclareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishTaskDeclareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TerminateTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminateTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminateTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserType != 0 {
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintTaskRpcApi(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTaskRpcApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovTaskRpcApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskDetailShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.UserType))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.AlgoSupplier != nil {
		l = m.AlgoSupplier.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if len(m.DataSuppliers) > 0 {
		for _, e := range m.DataSuppliers {
			l = e.Size()
			n += 1 + l + sovTaskRpcApi(uint64(l))
		}
	}
	if len(m.PowerSuppliers) > 0 {
		for _, e := range m.PowerSuppliers {
			l = e.Size()
			n += 1 + l + sovTaskRpcApi(uint64(l))
		}
	}
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovTaskRpcApi(uint64(l))
		}
	}
	if m.CreateAt != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.CreateAt))
	}
	if m.StartAt != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.EndAt))
	}
	if m.State != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.State))
	}
	if m.OperationCost != nil {
		l = m.OperationCost.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.UpdateAt != 0 {
		n += 2 + sovTaskRpcApi(uint64(m.UpdateAt))
	}
	if m.Nonce != 0 {
		n += 2 + sovTaskRpcApi(uint64(m.Nonce))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskAlgoSupplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.MetaAlgorithmId)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.MetaAlgorithmName)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskDataSupplierShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.MetadataId)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.MetadataName)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskPowerSupplierShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.PowerInfo != nil {
		l = m.PowerInfo.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskEventShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.PartyId)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskDetailListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastUpdated != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.LastUpdated))
	}
	if m.PageSize != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskDetailListByTaskIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskIds) > 0 {
		for _, s := range m.TaskIds {
			l = len(s)
			n += 1 + l + sovTaskRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskDetailListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovTaskRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskEventListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskEventListByTaskIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskIds) > 0 {
		for _, s := range m.TaskIds {
			l = len(s)
			n += 1 + l + sovTaskRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskEventListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if len(m.TaskEvents) > 0 {
		for _, e := range m.TaskEvents {
			l = e.Size()
			n += 1 + l + sovTaskRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishTaskDeclareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.UserType))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.AlgoSupplier != nil {
		l = m.AlgoSupplier.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if len(m.DataSuppliers) > 0 {
		for _, e := range m.DataSuppliers {
			l = e.Size()
			n += 1 + l + sovTaskRpcApi(uint64(l))
		}
	}
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovTaskRpcApi(uint64(l))
		}
	}
	if m.DataPolicyType != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.DataPolicyType))
	}
	l = len(m.DataPolicyOption)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.PowerPolicyType != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.PowerPolicyType))
	}
	l = len(m.PowerPolicyOption)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.DataFlowPolicyType != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.DataFlowPolicyType))
	}
	l = len(m.DataFlowPolicyOption)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.OperationCost != nil {
		l = m.OperationCost.Size()
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.AlgorithmCode)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.MetaAlgorithmId)
	if l > 0 {
		n += 2 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.AlgorithmCodeExtraParams)
	if l > 0 {
		n += 2 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 2 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 2 + l + sovTaskRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishTaskDeclareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TerminateTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovTaskRpcApi(uint64(m.UserType))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovTaskRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTaskRpcApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTaskRpcApi(x uint64) (n int) {
	return sovTaskRpcApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskDetailShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDetailShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDetailShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= types.UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &types.TaskOrganization{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgoSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AlgoSupplier == nil {
				m.AlgoSupplier = &TaskAlgoSupplier{}
			}
			if err := m.AlgoSupplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSuppliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSuppliers = append(m.DataSuppliers, &TaskDataSupplierShow{})
			if err := m.DataSuppliers[len(m.DataSuppliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerSuppliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerSuppliers = append(m.PowerSuppliers, &TaskPowerSupplierShow{})
			if err := m.PowerSuppliers[len(m.PowerSuppliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &types.TaskOrganization{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= types.TaskState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationCost == nil {
				m.OperationCost = &types.TaskResourceCostDeclare{}
			}
			if err := m.OperationCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskAlgoSupplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskAlgoSupplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskAlgoSupplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &types.TaskOrganization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaAlgorithmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaAlgorithmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaAlgorithmName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaAlgorithmName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskDataSupplierShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDataSupplierShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDataSupplierShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &types.TaskOrganization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskPowerSupplierShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskPowerSupplierShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskPowerSupplierShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &types.TaskOrganization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PowerInfo == nil {
				m.PowerInfo = &types.ResourceUsageOverview{}
			}
			if err := m.PowerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskEventShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskEventShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskEventShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &types.Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &TaskDetailShow{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskDetailListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskDetailListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskDetailListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskDetailListByTaskIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskDetailListByTaskIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskDetailListByTaskIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskIds = append(m.TaskIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskDetailListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskDetailListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskDetailListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &GetTaskDetail{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskEventListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskEventListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskEventListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskEventListByTaskIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskEventListByTaskIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskEventListByTaskIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskIds = append(m.TaskIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskEventListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskEventListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskEventListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskEvents = append(m.TaskEvents, &TaskEventShow{})
			if err := m.TaskEvents[len(m.TaskEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishTaskDeclareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishTaskDeclareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishTaskDeclareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= types.UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &types.TaskOrganization{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgoSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AlgoSupplier == nil {
				m.AlgoSupplier = &types.TaskOrganization{}
			}
			if err := m.AlgoSupplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSuppliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSuppliers = append(m.DataSuppliers, &types.TaskOrganization{})
			if err := m.DataSuppliers[len(m.DataSuppliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &types.TaskOrganization{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPolicyType", wireType)
			}
			m.DataPolicyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataPolicyType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPolicyOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPolicyOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPolicyType", wireType)
			}
			m.PowerPolicyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerPolicyType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPolicyOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPolicyOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFlowPolicyType", wireType)
			}
			m.DataFlowPolicyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataFlowPolicyType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFlowPolicyOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataFlowPolicyOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationCost == nil {
				m.OperationCost = &types.TaskResourceCostDeclare{}
			}
			if err := m.OperationCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgorithmCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlgorithmCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaAlgorithmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaAlgorithmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgorithmCodeExtraParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlgorithmCodeExtraParams = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishTaskDeclareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishTaskDeclareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishTaskDeclareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminateTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminateTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminateTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= types.UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTaskRpcApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTaskRpcApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTaskRpcApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTaskRpcApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTaskRpcApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTaskRpcApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTaskRpcApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTaskRpcApi = fmt.Errorf("proto: unexpected end of group")
)
