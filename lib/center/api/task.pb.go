// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/center/api/task.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 任务摘要信息
type TaskSummaryResponse struct {
	TaskId   string              `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName string              `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	Owner    *TaskOrganization   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Partners []*TaskOrganization `protobuf:"bytes,4,rep,name=partners,proto3" json:"partners,omitempty"`
	// 任务结果方（有多个）
	Receivers []*TaskOrganization `protobuf:"bytes,5,rep,name=receivers,proto3" json:"receivers,omitempty"`
	// 任务开始时间，单位：秒级时间戳
	CreateAt uint64 `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// 任务结束时间，单位：秒级时间戳
	EndAt uint64 `protobuf:"varint,7,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	// 任务状态：
	State                string   `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskSummaryResponse) Reset()         { *m = TaskSummaryResponse{} }
func (m *TaskSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*TaskSummaryResponse) ProtoMessage()    {}
func (*TaskSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{0}
}
func (m *TaskSummaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskSummaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskSummaryResponse.Merge(m, src)
}
func (m *TaskSummaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *TaskSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskSummaryResponse proto.InternalMessageInfo

func (m *TaskSummaryResponse) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskSummaryResponse) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *TaskSummaryResponse) GetOwner() *TaskOrganization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TaskSummaryResponse) GetPartners() []*TaskOrganization {
	if m != nil {
		return m.Partners
	}
	return nil
}

func (m *TaskSummaryResponse) GetReceivers() []*TaskOrganization {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *TaskSummaryResponse) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *TaskSummaryResponse) GetEndAt() uint64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *TaskSummaryResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type TaskListByIdentityRequest struct {
	IdentityId           string   `protobuf:"bytes,1,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	LastUpdateTime       uint64   `protobuf:"varint,2,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskListByIdentityRequest) Reset()         { *m = TaskListByIdentityRequest{} }
func (m *TaskListByIdentityRequest) String() string { return proto.CompactTextString(m) }
func (*TaskListByIdentityRequest) ProtoMessage()    {}
func (*TaskListByIdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{1}
}
func (m *TaskListByIdentityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListByIdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListByIdentityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListByIdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListByIdentityRequest.Merge(m, src)
}
func (m *TaskListByIdentityRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskListByIdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListByIdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListByIdentityRequest proto.InternalMessageInfo

func (m *TaskListByIdentityRequest) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *TaskListByIdentityRequest) GetLastUpdateTime() uint64 {
	if m != nil {
		return m.LastUpdateTime
	}
	return 0
}

type TaskListRequest struct {
	LastUpdateTime       uint64   `protobuf:"varint,1,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskListRequest) Reset()         { *m = TaskListRequest{} }
func (m *TaskListRequest) String() string { return proto.CompactTextString(m) }
func (*TaskListRequest) ProtoMessage()    {}
func (*TaskListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{2}
}
func (m *TaskListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListRequest.Merge(m, src)
}
func (m *TaskListRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListRequest proto.InternalMessageInfo

func (m *TaskListRequest) GetLastUpdateTime() uint64 {
	if m != nil {
		return m.LastUpdateTime
	}
	return 0
}

type TaskListResponse struct {
	// 任务摘要列表
	TaskList             []*TaskDetail `protobuf:"bytes,1,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TaskListResponse) Reset()         { *m = TaskListResponse{} }
func (m *TaskListResponse) String() string { return proto.CompactTextString(m) }
func (*TaskListResponse) ProtoMessage()    {}
func (*TaskListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{3}
}
func (m *TaskListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskListResponse.Merge(m, src)
}
func (m *TaskListResponse) XXX_Size() int {
	return m.Size()
}
func (m *TaskListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskListResponse proto.InternalMessageInfo

func (m *TaskListResponse) GetTaskList() []*TaskDetail {
	if m != nil {
		return m.TaskList
	}
	return nil
}

// 任务详情请求参数
type DetailTaskRequest struct {
	// 任务ID，必选参数
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetailTaskRequest) Reset()         { *m = DetailTaskRequest{} }
func (m *DetailTaskRequest) String() string { return proto.CompactTextString(m) }
func (*DetailTaskRequest) ProtoMessage()    {}
func (*DetailTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{4}
}
func (m *DetailTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetailTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetailTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetailTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetailTaskRequest.Merge(m, src)
}
func (m *DetailTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *DetailTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DetailTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DetailTaskRequest proto.InternalMessageInfo

func (m *DetailTaskRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// 任务详情
type TaskDetail struct {
	TaskId   string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// 任务发起方组织
	Owner *TaskOrganization `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// 算法提供方组织
	AlgoSupplier *TaskOrganization `protobuf:"bytes,4,opt,name=algo_supplier,json=algoSupplier,proto3" json:"algo_supplier,omitempty"`
	// 数据提供方组信息
	DataSupplier []*TaskDataSupplier `protobuf:"bytes,5,rep,name=data_supplier,json=dataSupplier,proto3" json:"data_supplier,omitempty"`
	// 算力提供方组织
	PowerSupplier []*TaskPowerSupplier `protobuf:"bytes,6,rep,name=power_supplier,json=powerSupplier,proto3" json:"power_supplier,omitempty"`
	// 结果接收方组织
	Receivers []*TaskResultReceiver `protobuf:"bytes,7,rep,name=receivers,proto3" json:"receivers,omitempty"`
	// 任务开始时间
	CreateAt uint64 `protobuf:"varint,8,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// 任务结束时间
	EndAt   uint64 `protobuf:"varint,9,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	StartAt uint64 `protobuf:"varint,10,opt,name=startAt,proto3" json:"startAt,omitempty"`
	// 任务状态
	State string `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	// 任务所需资源声明
	OperationCost *TaskOperationCostDeclare `protobuf:"bytes,20,opt,name=operation_cost,json=operationCost,proto3" json:"operation_cost,omitempty"`
	// 任务描述
	Desc                 string   `protobuf:"bytes,21,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskDetail) Reset()         { *m = TaskDetail{} }
func (m *TaskDetail) String() string { return proto.CompactTextString(m) }
func (*TaskDetail) ProtoMessage()    {}
func (*TaskDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{5}
}
func (m *TaskDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDetail.Merge(m, src)
}
func (m *TaskDetail) XXX_Size() int {
	return m.Size()
}
func (m *TaskDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDetail.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDetail proto.InternalMessageInfo

func (m *TaskDetail) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskDetail) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *TaskDetail) GetOwner() *TaskOrganization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TaskDetail) GetAlgoSupplier() *TaskOrganization {
	if m != nil {
		return m.AlgoSupplier
	}
	return nil
}

func (m *TaskDetail) GetDataSupplier() []*TaskDataSupplier {
	if m != nil {
		return m.DataSupplier
	}
	return nil
}

func (m *TaskDetail) GetPowerSupplier() []*TaskPowerSupplier {
	if m != nil {
		return m.PowerSupplier
	}
	return nil
}

func (m *TaskDetail) GetReceivers() []*TaskResultReceiver {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *TaskDetail) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *TaskDetail) GetEndAt() uint64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *TaskDetail) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *TaskDetail) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *TaskDetail) GetOperationCost() *TaskOperationCostDeclare {
	if m != nil {
		return m.OperationCost
	}
	return nil
}

func (m *TaskDetail) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type TaskResultReceiver struct {
	// // 结果接收方身份信息
	MemberInfo *TaskOrganization `protobuf:"bytes,1,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
	// 被接收结果的生成方身份信息
	Provider             []*TaskOrganization `protobuf:"bytes,2,rep,name=provider,proto3" json:"provider,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TaskResultReceiver) Reset()         { *m = TaskResultReceiver{} }
func (m *TaskResultReceiver) String() string { return proto.CompactTextString(m) }
func (*TaskResultReceiver) ProtoMessage()    {}
func (*TaskResultReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{6}
}
func (m *TaskResultReceiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskResultReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskResultReceiver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskResultReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResultReceiver.Merge(m, src)
}
func (m *TaskResultReceiver) XXX_Size() int {
	return m.Size()
}
func (m *TaskResultReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResultReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResultReceiver proto.InternalMessageInfo

func (m *TaskResultReceiver) GetMemberInfo() *TaskOrganization {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

func (m *TaskResultReceiver) GetProvider() []*TaskOrganization {
	if m != nil {
		return m.Provider
	}
	return nil
}

// 任务数据提供方基本信息
type TaskDataSupplier struct {
	// 组织身份信息
	MemberInfo *TaskOrganization `protobuf:"bytes,1,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
	// 组织提供的元数据ID
	MetaId string `protobuf:"bytes,2,opt,name=meta_id,json=metaId,proto3" json:"meta_id,omitempty"`
	// 组织提供的元数据名称
	MetaName             string                  `protobuf:"bytes,3,opt,name=meta_name,json=metaName,proto3" json:"meta_name,omitempty"`
	ColumnMeta           []*MetaDataColumnDetail `protobuf:"bytes,4,rep,name=column_meta,json=columnMeta,proto3" json:"column_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TaskDataSupplier) Reset()         { *m = TaskDataSupplier{} }
func (m *TaskDataSupplier) String() string { return proto.CompactTextString(m) }
func (*TaskDataSupplier) ProtoMessage()    {}
func (*TaskDataSupplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{7}
}
func (m *TaskDataSupplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskDataSupplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskDataSupplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskDataSupplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDataSupplier.Merge(m, src)
}
func (m *TaskDataSupplier) XXX_Size() int {
	return m.Size()
}
func (m *TaskDataSupplier) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDataSupplier.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDataSupplier proto.InternalMessageInfo

func (m *TaskDataSupplier) GetMemberInfo() *TaskOrganization {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

func (m *TaskDataSupplier) GetMetaId() string {
	if m != nil {
		return m.MetaId
	}
	return ""
}

func (m *TaskDataSupplier) GetMetaName() string {
	if m != nil {
		return m.MetaName
	}
	return ""
}

func (m *TaskDataSupplier) GetColumnMeta() []*MetaDataColumnDetail {
	if m != nil {
		return m.ColumnMeta
	}
	return nil
}

// 任务算力提供方基础信息
type TaskPowerSupplier struct {
	// 身份信息
	MemberInfo *TaskOrganization `protobuf:"bytes,1,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
	// 算力使用情况
	PowerInfo            *ResourceUsedDetail `protobuf:"bytes,2,opt,name=power_info,json=powerInfo,proto3" json:"power_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TaskPowerSupplier) Reset()         { *m = TaskPowerSupplier{} }
func (m *TaskPowerSupplier) String() string { return proto.CompactTextString(m) }
func (*TaskPowerSupplier) ProtoMessage()    {}
func (*TaskPowerSupplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{8}
}
func (m *TaskPowerSupplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskPowerSupplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskPowerSupplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskPowerSupplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPowerSupplier.Merge(m, src)
}
func (m *TaskPowerSupplier) XXX_Size() int {
	return m.Size()
}
func (m *TaskPowerSupplier) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPowerSupplier.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPowerSupplier proto.InternalMessageInfo

func (m *TaskPowerSupplier) GetMemberInfo() *TaskOrganization {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

func (m *TaskPowerSupplier) GetPowerInfo() *ResourceUsedDetail {
	if m != nil {
		return m.PowerInfo
	}
	return nil
}

// 系统本身资源使用信息
type ResourceUsedDetail struct {
	// 服务系统的总内存
	TotalMem uint64 `protobuf:"varint,2,opt,name=total_mem,json=totalMem,proto3" json:"total_mem,omitempty"`
	// 服务系统的已用内存
	UsedMem uint64 `protobuf:"varint,3,opt,name=used_mem,json=usedMem,proto3" json:"used_mem,omitempty"`
	// 服务的总内核数
	TotalProcessor uint32 `protobuf:"varint,4,opt,name=total_processor,json=totalProcessor,proto3" json:"total_processor,omitempty"`
	// 服务的已用内核数
	UsedProcessor uint32 `protobuf:"varint,5,opt,name=used_processor,json=usedProcessor,proto3" json:"used_processor,omitempty"`
	// 服务的总带宽数
	TotalBandwidth uint64 `protobuf:"varint,6,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	// 服务的已用带宽数
	UsedBandwidth        uint64   `protobuf:"varint,7,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"used_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceUsedDetail) Reset()         { *m = ResourceUsedDetail{} }
func (m *ResourceUsedDetail) String() string { return proto.CompactTextString(m) }
func (*ResourceUsedDetail) ProtoMessage()    {}
func (*ResourceUsedDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{9}
}
func (m *ResourceUsedDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceUsedDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceUsedDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceUsedDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceUsedDetail.Merge(m, src)
}
func (m *ResourceUsedDetail) XXX_Size() int {
	return m.Size()
}
func (m *ResourceUsedDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceUsedDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceUsedDetail proto.InternalMessageInfo

func (m *ResourceUsedDetail) GetTotalMem() uint64 {
	if m != nil {
		return m.TotalMem
	}
	return 0
}

func (m *ResourceUsedDetail) GetUsedMem() uint64 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *ResourceUsedDetail) GetTotalProcessor() uint32 {
	if m != nil {
		return m.TotalProcessor
	}
	return 0
}

func (m *ResourceUsedDetail) GetUsedProcessor() uint32 {
	if m != nil {
		return m.UsedProcessor
	}
	return 0
}

func (m *ResourceUsedDetail) GetTotalBandwidth() uint64 {
	if m != nil {
		return m.TotalBandwidth
	}
	return 0
}

func (m *ResourceUsedDetail) GetUsedBandwidth() uint64 {
	if m != nil {
		return m.UsedBandwidth
	}
	return 0
}

// 定义任务所需资源的大小
type TaskOperationCostDeclare struct {
	// 任务所需的内存 (单位: byte)
	CostMem uint64 `protobuf:"varint,1,opt,name=cost_mem,json=costMem,proto3" json:"cost_mem,omitempty"`
	// 任务所需的核数 (单位: 个)
	CostProcessor uint32 `protobuf:"varint,2,opt,name=cost_processor,json=costProcessor,proto3" json:"cost_processor,omitempty"`
	// 任务所需的带宽 (单位: bps)
	CostBandwidth uint64 `protobuf:"varint,3,opt,name=cost_bandwidth,json=costBandwidth,proto3" json:"cost_bandwidth,omitempty"`
	// 任务所需的运行时长 (单位: ms)
	Duration             uint64   `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskOperationCostDeclare) Reset()         { *m = TaskOperationCostDeclare{} }
func (m *TaskOperationCostDeclare) String() string { return proto.CompactTextString(m) }
func (*TaskOperationCostDeclare) ProtoMessage()    {}
func (*TaskOperationCostDeclare) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{10}
}
func (m *TaskOperationCostDeclare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskOperationCostDeclare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskOperationCostDeclare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskOperationCostDeclare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskOperationCostDeclare.Merge(m, src)
}
func (m *TaskOperationCostDeclare) XXX_Size() int {
	return m.Size()
}
func (m *TaskOperationCostDeclare) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskOperationCostDeclare.DiscardUnknown(m)
}

var xxx_messageInfo_TaskOperationCostDeclare proto.InternalMessageInfo

func (m *TaskOperationCostDeclare) GetCostMem() uint64 {
	if m != nil {
		return m.CostMem
	}
	return 0
}

func (m *TaskOperationCostDeclare) GetCostProcessor() uint32 {
	if m != nil {
		return m.CostProcessor
	}
	return 0
}

func (m *TaskOperationCostDeclare) GetCostBandwidth() uint64 {
	if m != nil {
		return m.CostBandwidth
	}
	return 0
}

func (m *TaskOperationCostDeclare) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// 任务事件
type TaskEvent struct {
	// 事件类型码
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 事件对应的任务id
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 产生事件的节点身份
	Owner *Organization `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// 事件内容
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// 事件产生时间
	CreateAt             uint64   `protobuf:"varint,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskEvent) Reset()         { *m = TaskEvent{} }
func (m *TaskEvent) String() string { return proto.CompactTextString(m) }
func (*TaskEvent) ProtoMessage()    {}
func (*TaskEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{11}
}
func (m *TaskEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEvent.Merge(m, src)
}
func (m *TaskEvent) XXX_Size() int {
	return m.Size()
}
func (m *TaskEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEvent proto.InternalMessageInfo

func (m *TaskEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TaskEvent) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskEvent) GetOwner() *Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TaskEvent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TaskEvent) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

type TaskEventRequest struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskEventRequest) Reset()         { *m = TaskEventRequest{} }
func (m *TaskEventRequest) String() string { return proto.CompactTextString(m) }
func (*TaskEventRequest) ProtoMessage()    {}
func (*TaskEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{12}
}
func (m *TaskEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEventRequest.Merge(m, src)
}
func (m *TaskEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEventRequest proto.InternalMessageInfo

func (m *TaskEventRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type TaskEventResponse struct {
	// 错误码，0 成功，1 异常
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 错误信息
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 事件列表
	TaskEventList        []*TaskEvent `protobuf:"bytes,3,rep,name=task_event_list,json=taskEventList,proto3" json:"task_event_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TaskEventResponse) Reset()         { *m = TaskEventResponse{} }
func (m *TaskEventResponse) String() string { return proto.CompactTextString(m) }
func (*TaskEventResponse) ProtoMessage()    {}
func (*TaskEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43eadcedb47189c4, []int{13}
}
func (m *TaskEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEventResponse.Merge(m, src)
}
func (m *TaskEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *TaskEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEventResponse proto.InternalMessageInfo

func (m *TaskEventResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TaskEventResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *TaskEventResponse) GetTaskEventList() []*TaskEvent {
	if m != nil {
		return m.TaskEventList
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskSummaryResponse)(nil), "api.TaskSummaryResponse")
	proto.RegisterType((*TaskListByIdentityRequest)(nil), "api.TaskListByIdentityRequest")
	proto.RegisterType((*TaskListRequest)(nil), "api.TaskListRequest")
	proto.RegisterType((*TaskListResponse)(nil), "api.TaskListResponse")
	proto.RegisterType((*DetailTaskRequest)(nil), "api.DetailTaskRequest")
	proto.RegisterType((*TaskDetail)(nil), "api.TaskDetail")
	proto.RegisterType((*TaskResultReceiver)(nil), "api.TaskResultReceiver")
	proto.RegisterType((*TaskDataSupplier)(nil), "api.TaskDataSupplier")
	proto.RegisterType((*TaskPowerSupplier)(nil), "api.TaskPowerSupplier")
	proto.RegisterType((*ResourceUsedDetail)(nil), "api.ResourceUsedDetail")
	proto.RegisterType((*TaskOperationCostDeclare)(nil), "api.TaskOperationCostDeclare")
	proto.RegisterType((*TaskEvent)(nil), "api.TaskEvent")
	proto.RegisterType((*TaskEventRequest)(nil), "api.TaskEventRequest")
	proto.RegisterType((*TaskEventResponse)(nil), "api.TaskEventResponse")
}

func init() { proto.RegisterFile("lib/center/api/task.proto", fileDescriptor_43eadcedb47189c4) }

var fileDescriptor_43eadcedb47189c4 = []byte{
	// 1117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4d, 0x6f, 0x1c, 0x45,
	0x13, 0xd6, 0xec, 0xf7, 0xd6, 0x66, 0xd7, 0x49, 0x27, 0xb6, 0xc7, 0x1b, 0xc5, 0xaf, 0x35, 0x52,
	0x14, 0x4b, 0xc9, 0xeb, 0x0d, 0x89, 0x30, 0x28, 0x88, 0x08, 0x7f, 0x40, 0x64, 0x41, 0x20, 0x1a,
	0x27, 0x17, 0x2e, 0xab, 0xde, 0x99, 0xf2, 0x66, 0x94, 0x99, 0xe9, 0x61, 0xba, 0xc7, 0x96, 0xb9,
	0x70, 0xe0, 0x4f, 0x20, 0x71, 0xe0, 0xce, 0x6f, 0x40, 0xe2, 0xca, 0x91, 0x9f, 0x80, 0x7c, 0xe6,
	0x47, 0xa0, 0xae, 0x9e, 0x8f, 0xdd, 0xb5, 0xd7, 0x48, 0x39, 0x70, 0x9b, 0xaa, 0x7a, 0x9e, 0xea,
	0xea, 0xea, 0xa7, 0xab, 0x07, 0x36, 0xc2, 0x60, 0x32, 0xf2, 0x30, 0x56, 0x98, 0x8e, 0x78, 0x12,
	0x8c, 0x14, 0x97, 0xef, 0x76, 0x92, 0x54, 0x28, 0xc1, 0xea, 0x3c, 0x09, 0x86, 0x8b, 0xf1, 0x09,
	0x97, 0x68, 0xe2, 0xc3, 0xbb, 0x53, 0x21, 0xa6, 0x21, 0x8e, 0xc8, 0x9a, 0x64, 0x27, 0x23, 0x8c,
	0x12, 0x75, 0x9e, 0x07, 0xef, 0x2d, 0xf0, 0x22, 0x54, 0xdc, 0xe7, 0x8a, 0x9b, 0xb0, 0xf3, 0x6b,
	0x0d, 0x6e, 0xbf, 0xe6, 0xf2, 0xdd, 0x71, 0x16, 0x45, 0x3c, 0x3d, 0x77, 0x51, 0x26, 0x22, 0x96,
	0xc8, 0xd6, 0xa1, 0xad, 0x2b, 0x18, 0x07, 0xbe, 0x6d, 0x6d, 0x59, 0xdb, 0x5d, 0xb7, 0xa5, 0xcd,
	0x23, 0x9f, 0xdd, 0x85, 0x2e, 0x05, 0x62, 0x1e, 0xa1, 0x5d, 0xa3, 0x50, 0x47, 0x3b, 0xbe, 0xe6,
	0x11, 0xb2, 0x87, 0xd0, 0x14, 0x67, 0x31, 0xa6, 0x76, 0x7d, 0xcb, 0xda, 0xee, 0x3d, 0x59, 0xdd,
	0xe1, 0x49, 0xb0, 0xa3, 0xd3, 0x7f, 0x93, 0x4e, 0x79, 0x1c, 0x7c, 0xcf, 0x55, 0x20, 0x62, 0xd7,
	0x60, 0xd8, 0x07, 0xd0, 0x49, 0x78, 0xaa, 0x62, 0x4c, 0xa5, 0xdd, 0xd8, 0xaa, 0x2f, 0xc7, 0x97,
	0x30, 0xf6, 0x14, 0xba, 0x29, 0x7a, 0x18, 0x9c, 0x6a, 0x4e, 0xf3, 0x3a, 0x4e, 0x85, 0xd3, 0x15,
	0x7b, 0x29, 0x72, 0x85, 0x63, 0xae, 0xec, 0xd6, 0x96, 0xb5, 0xdd, 0x70, 0x3b, 0xc6, 0xb1, 0xa7,
	0xd8, 0x2a, 0xb4, 0x30, 0xf6, 0x75, 0xa4, 0x4d, 0x91, 0x26, 0xc6, 0xfe, 0x9e, 0x62, 0x77, 0xa0,
	0x29, 0x15, 0x57, 0x68, 0x77, 0x68, 0x87, 0xc6, 0x70, 0x4e, 0x60, 0x43, 0x2f, 0xf4, 0x55, 0x20,
	0xd5, 0xfe, 0xf9, 0x91, 0x8f, 0xb1, 0x0a, 0xd4, 0xb9, 0x8b, 0xdf, 0x65, 0x28, 0x15, 0xfb, 0x1f,
	0xf4, 0x82, 0xdc, 0x55, 0x75, 0x0d, 0x0a, 0xd7, 0x91, 0xcf, 0xb6, 0xe1, 0x66, 0xc8, 0xa5, 0x1a,
	0x67, 0x89, 0xaf, 0x8b, 0x51, 0x41, 0xde, 0xc0, 0x86, 0x3b, 0xd0, 0xfe, 0x37, 0xe4, 0x7e, 0x1d,
	0x44, 0xe8, 0x7c, 0x02, 0x2b, 0xc5, 0x3a, 0x45, 0xf6, 0xab, 0xc8, 0xd6, 0x95, 0xe4, 0xcf, 0xe0,
	0x66, 0x45, 0xce, 0x4f, 0xf3, 0x51, 0x7e, 0x68, 0x61, 0x20, 0x95, 0x6d, 0x51, 0xdf, 0x56, 0xca,
	0xbe, 0x1d, 0xa2, 0xe2, 0x41, 0x68, 0x4e, 0x51, 0xb3, 0x9c, 0x47, 0x70, 0xcb, 0xf8, 0x74, 0xb4,
	0x28, 0x60, 0x99, 0x20, 0x9c, 0x9f, 0x1b, 0x00, 0x55, 0x9a, 0xff, 0x42, 0x38, 0xcf, 0xa0, 0xcf,
	0xc3, 0xa9, 0x18, 0xcb, 0x2c, 0x49, 0xc2, 0x00, 0x53, 0xbb, 0x71, 0x1d, 0xe9, 0x86, 0xc6, 0x1e,
	0xe7, 0x50, 0xcd, 0xd5, 0xea, 0xaf, 0xb8, 0x8b, 0x2a, 0x3a, 0xe4, 0x8a, 0x17, 0x68, 0xf7, 0x86,
	0x3f, 0x63, 0xb1, 0x4f, 0x61, 0x90, 0x88, 0x33, 0x4c, 0x2b, 0x72, 0x8b, 0xc8, 0x6b, 0x25, 0xf9,
	0x95, 0x0e, 0x97, 0xec, 0x7e, 0x32, 0x6b, 0xb2, 0x0f, 0x67, 0xc5, 0xdb, 0x26, 0xe6, 0x7a, 0xc9,
	0x74, 0x51, 0x66, 0xa1, 0x72, 0xf3, 0xf8, 0x52, 0xf9, 0x76, 0x96, 0xca, 0xb7, 0x3b, 0x2b, 0x5f,
	0x1b, 0xda, 0x52, 0xf1, 0x54, 0xed, 0x29, 0x1b, 0xc8, 0x5f, 0x98, 0x95, 0xb0, 0x7b, 0x33, 0xc2,
	0x66, 0x87, 0x30, 0x10, 0x09, 0xa6, 0xd4, 0xb0, 0xb1, 0x27, 0xa4, 0xb2, 0xef, 0x50, 0x4b, 0xef,
	0x55, 0x2d, 0x2d, 0xc2, 0x07, 0x42, 0xaa, 0x43, 0xf4, 0x42, 0x9e, 0xa2, 0xdb, 0x17, 0xb3, 0x5e,
	0xc6, 0xa0, 0xe1, 0xa3, 0xf4, 0xec, 0x55, 0x4a, 0x4d, 0xdf, 0xce, 0x0f, 0xc0, 0x2e, 0x6f, 0x8f,
	0xed, 0x42, 0x2f, 0xc2, 0x68, 0x82, 0xe9, 0x38, 0x88, 0x4f, 0x04, 0x09, 0x65, 0xe9, 0xf9, 0x81,
	0x41, 0x1e, 0xc5, 0x27, 0x82, 0x46, 0x46, 0x2a, 0x4e, 0x03, 0x1f, 0x53, 0xbb, 0x76, 0xfd, 0xc8,
	0xc8, 0x61, 0xce, 0x6f, 0x96, 0xb9, 0x0f, 0xb3, 0xe7, 0xfa, 0xde, 0xeb, 0xaf, 0x43, 0x5b, 0xcf,
	0x4f, 0x2d, 0x6e, 0xa3, 0xe0, 0x96, 0x36, 0x8d, 0xb8, 0x29, 0x40, 0xe2, 0xae, 0x1b, 0x71, 0x6b,
	0x07, 0x89, 0xfb, 0x19, 0xf4, 0x3c, 0x11, 0x66, 0x51, 0x3c, 0xd6, 0xae, 0x7c, 0xd6, 0x6d, 0xd0,
	0x6a, 0x2f, 0x51, 0x71, 0x5d, 0xd9, 0x01, 0xc5, 0xf3, 0x9b, 0x08, 0x06, 0xad, 0x63, 0xce, 0x8f,
	0x16, 0xdc, 0xba, 0xa4, 0xac, 0xf7, 0xae, 0x7f, 0x17, 0xc0, 0x28, 0x98, 0x68, 0x35, 0xa2, 0x19,
	0x0d, 0xba, 0x28, 0x45, 0x96, 0x7a, 0xf8, 0x46, 0xa2, 0x9f, 0x97, 0xd1, 0x25, 0xa8, 0xe6, 0x39,
	0x7f, 0x5b, 0xc0, 0x2e, 0x23, 0xe8, 0x4a, 0x0b, 0xc5, 0xc3, 0x71, 0x84, 0x51, 0x3e, 0xca, 0x3a,
	0xe4, 0x78, 0x89, 0x11, 0xdb, 0x80, 0x4e, 0x26, 0xd1, 0xa7, 0x58, 0xdd, 0x88, 0x50, 0xdb, 0x3a,
	0xf4, 0x00, 0x56, 0x0c, 0x2f, 0x49, 0x85, 0x87, 0x52, 0x0a, 0x73, 0x85, 0xfb, 0xee, 0x80, 0xdc,
	0xaf, 0x0a, 0x2f, 0xbb, 0x0f, 0x03, 0xca, 0x51, 0xe1, 0x9a, 0x84, 0xeb, 0x6b, 0x6f, 0x05, 0x2b,
	0xf3, 0x4d, 0x78, 0xec, 0x9f, 0x05, 0xbe, 0x7a, 0x9b, 0xcf, 0x79, 0x93, 0x6f, 0xbf, 0xf0, 0x96,
	0xf9, 0x2a, 0x9c, 0x99, 0xfa, 0x94, 0xaf, 0x84, 0x39, 0xbf, 0x58, 0x60, 0x2f, 0x13, 0xbd, 0xde,
	0x97, 0xbe, 0x21, 0xb4, 0x2f, 0x33, 0x81, 0xdb, 0xda, 0xd6, 0xfb, 0xba, 0x0f, 0x03, 0x0a, 0x55,
	0xe5, 0xd6, 0x4c, 0xb9, 0xda, 0x3b, 0xb7, 0x2b, 0x82, 0x55, 0x55, 0x98, 0xfe, 0x10, 0xac, 0x2a,
	0x76, 0x08, 0x1d, 0x3f, 0x33, 0xeb, 0x53, 0x7b, 0x1a, 0x6e, 0x69, 0x3b, 0x3f, 0x59, 0xd0, 0xd5,
	0x15, 0x7e, 0x7e, 0x8a, 0x31, 0x5d, 0x3c, 0x75, 0x9e, 0x60, 0x3e, 0x70, 0xe9, 0x7b, 0x76, 0x0e,
	0xd7, 0xe6, 0xe6, 0xf0, 0x83, 0xf9, 0x51, 0x7b, 0x8b, 0x8e, 0xff, 0xaa, 0x31, 0x6b, 0x43, 0xdb,
	0x13, 0xb1, 0xc2, 0x58, 0xd1, 0xf2, 0x5d, 0xb7, 0x30, 0xe7, 0x47, 0x52, 0x73, 0x7e, 0x24, 0x39,
	0x0f, 0xcd, 0x7d, 0xa3, 0xca, 0xfe, 0xf5, 0xf1, 0xc8, 0x8c, 0xba, 0x73, 0x70, 0xfe, 0x5a, 0xad,
	0x41, 0x4b, 0x8f, 0xa5, 0x4c, 0x12, 0xb8, 0xe9, 0xe6, 0x16, 0xbb, 0x09, 0xf5, 0x48, 0x4e, 0xf3,
	0xed, 0xe8, 0x4f, 0xb6, 0x0b, 0x2b, 0x94, 0x17, 0x35, 0xdf, 0xbc, 0x6e, 0x75, 0xba, 0x5d, 0x83,
	0xf2, 0x2e, 0x98, 0xd4, 0x7d, 0x55, 0x7c, 0xea, 0x17, 0xee, 0xc9, 0xef, 0x35, 0xe8, 0xd1, 0x5f,
	0x0f, 0xa6, 0xa7, 0x81, 0x87, 0xec, 0x31, 0x74, 0x8e, 0xf9, 0x29, 0x6a, 0x17, 0x5b, 0x7c, 0x18,
	0x87, 0xb7, 0xc9, 0x71, 0x1c, 0x44, 0x49, 0x88, 0x65, 0x8d, 0x1f, 0x43, 0xff, 0x05, 0xaa, 0xea,
	0x99, 0x64, 0xe6, 0x11, 0xb8, 0xf4, 0x6e, 0x0e, 0x17, 0xd3, 0xb1, 0x8f, 0xa0, 0xa3, 0x6b, 0x20,
	0xd2, 0x9d, 0x32, 0x38, 0xf3, 0xd6, 0x0f, 0x57, 0x17, 0xbc, 0xf9, 0x92, 0x5f, 0x02, 0x2b, 0x88,
	0xd5, 0xdf, 0x07, 0xdb, 0x9c, 0x03, 0x5f, 0xfa, 0x2d, 0x59, 0x96, 0xec, 0x39, 0xf4, 0x8b, 0x64,
	0x46, 0x43, 0xab, 0x0b, 0x1d, 0xcb, 0xe9, 0x6b, 0x8b, 0x6e, 0xc3, 0xdf, 0x7f, 0xfe, 0xc7, 0xc5,
	0xa6, 0xf5, 0xe7, 0xc5, 0xa6, 0xf5, 0xd7, 0xc5, 0xa6, 0xf5, 0xed, 0xe3, 0x69, 0xa0, 0xde, 0x66,
	0x93, 0x1d, 0x4f, 0x44, 0x23, 0x57, 0x48, 0x54, 0x8a, 0x7f, 0x11, 0x8a, 0xb3, 0xd1, 0x01, 0x4f,
	0xd3, 0x00, 0xd3, 0xff, 0xbf, 0x10, 0xa3, 0xf9, 0xdf, 0xd0, 0x49, 0x8b, 0x7e, 0x3f, 0x9f, 0xfe,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x96, 0x30, 0x5a, 0xf7, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	// 存储任务
	SaveTask(ctx context.Context, in *TaskDetail, opts ...grpc.CallOption) (*SimpleResponse, error)
	// 查询任务详情（任务ID、节点ID、参与方标识）
	GetDetailTask(ctx context.Context, in *DetailTaskRequest, opts ...grpc.CallOption) (*TaskDetail, error)
	// 查询任务列表
	ListTask(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error)
	// 根据组织身份查询任务列表
	ListTaskByIdentity(ctx context.Context, in *TaskListByIdentityRequest, opts ...grpc.CallOption) (*TaskListResponse, error)
	// 查询任务的事件列表
	ListTaskEvent(ctx context.Context, in *TaskEventRequest, opts ...grpc.CallOption) (*TaskEventResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) SaveTask(ctx context.Context, in *TaskDetail, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/api.TaskService/SaveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetDetailTask(ctx context.Context, in *DetailTaskRequest, opts ...grpc.CallOption) (*TaskDetail, error) {
	out := new(TaskDetail)
	err := c.cc.Invoke(ctx, "/api.TaskService/GetDetailTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTask(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error) {
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, "/api.TaskService/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTaskByIdentity(ctx context.Context, in *TaskListByIdentityRequest, opts ...grpc.CallOption) (*TaskListResponse, error) {
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, "/api.TaskService/ListTaskByIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTaskEvent(ctx context.Context, in *TaskEventRequest, opts ...grpc.CallOption) (*TaskEventResponse, error) {
	out := new(TaskEventResponse)
	err := c.cc.Invoke(ctx, "/api.TaskService/ListTaskEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	// 存储任务
	SaveTask(context.Context, *TaskDetail) (*SimpleResponse, error)
	// 查询任务详情（任务ID、节点ID、参与方标识）
	GetDetailTask(context.Context, *DetailTaskRequest) (*TaskDetail, error)
	// 查询任务列表
	ListTask(context.Context, *TaskListRequest) (*TaskListResponse, error)
	// 根据组织身份查询任务列表
	ListTaskByIdentity(context.Context, *TaskListByIdentityRequest) (*TaskListResponse, error)
	// 查询任务的事件列表
	ListTaskEvent(context.Context, *TaskEventRequest) (*TaskEventResponse, error)
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) SaveTask(ctx context.Context, req *TaskDetail) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTask not implemented")
}
func (*UnimplementedTaskServiceServer) GetDetailTask(ctx context.Context, req *DetailTaskRequest) (*TaskDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailTask not implemented")
}
func (*UnimplementedTaskServiceServer) ListTask(ctx context.Context, req *TaskListRequest) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (*UnimplementedTaskServiceServer) ListTaskByIdentity(ctx context.Context, req *TaskListByIdentityRequest) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskByIdentity not implemented")
}
func (*UnimplementedTaskServiceServer) ListTaskEvent(ctx context.Context, req *TaskEventRequest) (*TaskEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskEvent not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_SaveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TaskService/SaveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTask(ctx, req.(*TaskDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetDetailTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetDetailTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TaskService/GetDetailTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetDetailTask(ctx, req.(*DetailTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TaskService/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTask(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTaskByIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListByIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTaskByIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TaskService/ListTaskByIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTaskByIdentity(ctx, req.(*TaskListByIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTaskEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTaskEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TaskService/ListTaskEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTaskEvent(ctx, req.(*TaskEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTask",
			Handler:    _TaskService_SaveTask_Handler,
		},
		{
			MethodName: "GetDetailTask",
			Handler:    _TaskService_GetDetailTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _TaskService_ListTask_Handler,
		},
		{
			MethodName: "ListTaskByIdentity",
			Handler:    _TaskService_ListTaskByIdentity_Handler,
		},
		{
			MethodName: "ListTaskEvent",
			Handler:    _TaskService_ListTaskEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/center/api/task.proto",
}

func (m *TaskSummaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskSummaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskSummaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintTask(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x42
	}
	if m.EndAt != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateAt != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Partners) > 0 {
		for iNdEx := len(m.Partners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskName) > 0 {
		i -= len(m.TaskName)
		copy(dAtA[i:], m.TaskName)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskListByIdentityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListByIdentityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListByIdentityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastUpdateTime != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.LastUpdateTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastUpdateTime != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.LastUpdateTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskList) > 0 {
		for iNdEx := len(m.TaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DetailTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetailTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetailTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.OperationCost != nil {
		{
			size, err := m.OperationCost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintTask(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x5a
	}
	if m.StartAt != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x50
	}
	if m.EndAt != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateAt != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PowerSupplier) > 0 {
		for iNdEx := len(m.PowerSupplier) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PowerSupplier[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DataSupplier) > 0 {
		for iNdEx := len(m.DataSupplier) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSupplier[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.AlgoSupplier != nil {
		{
			size, err := m.AlgoSupplier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskName) > 0 {
		i -= len(m.TaskName)
		copy(dAtA[i:], m.TaskName)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskResultReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResultReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskResultReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Provider) > 0 {
		for iNdEx := len(m.Provider) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Provider[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MemberInfo != nil {
		{
			size, err := m.MemberInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskDataSupplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDataSupplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskDataSupplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ColumnMeta) > 0 {
		for iNdEx := len(m.ColumnMeta) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ColumnMeta[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MetaName) > 0 {
		i -= len(m.MetaName)
		copy(dAtA[i:], m.MetaName)
		i = encodeVarintTask(dAtA, i, uint64(len(m.MetaName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetaId) > 0 {
		i -= len(m.MetaId)
		copy(dAtA[i:], m.MetaId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.MetaId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MemberInfo != nil {
		{
			size, err := m.MemberInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskPowerSupplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskPowerSupplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskPowerSupplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PowerInfo != nil {
		{
			size, err := m.PowerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MemberInfo != nil {
		{
			size, err := m.MemberInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceUsedDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUsedDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceUsedDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsedBandwidth != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.UsedBandwidth))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalBandwidth != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TotalBandwidth))
		i--
		dAtA[i] = 0x30
	}
	if m.UsedProcessor != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.UsedProcessor))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalProcessor != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TotalProcessor))
		i--
		dAtA[i] = 0x20
	}
	if m.UsedMem != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.UsedMem))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalMem != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TotalMem))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TaskOperationCostDeclare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskOperationCostDeclare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskOperationCostDeclare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Duration != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.CostBandwidth != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.CostBandwidth))
		i--
		dAtA[i] = 0x18
	}
	if m.CostProcessor != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.CostProcessor))
		i--
		dAtA[i] = 0x10
	}
	if m.CostMem != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.CostMem))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskEventList) > 0 {
		for iNdEx := len(m.TaskEventList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskEventList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskSummaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.Partners) > 0 {
		for _, e := range m.Partners {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.CreateAt != 0 {
		n += 1 + sovTask(uint64(m.CreateAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovTask(uint64(m.EndAt))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskListByIdentityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.LastUpdateTime != 0 {
		n += 1 + sovTask(uint64(m.LastUpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastUpdateTime != 0 {
		n += 1 + sovTask(uint64(m.LastUpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskList) > 0 {
		for _, e := range m.TaskList {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DetailTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.AlgoSupplier != nil {
		l = m.AlgoSupplier.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.DataSupplier) > 0 {
		for _, e := range m.DataSupplier {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.PowerSupplier) > 0 {
		for _, e := range m.PowerSupplier {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.CreateAt != 0 {
		n += 1 + sovTask(uint64(m.CreateAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovTask(uint64(m.EndAt))
	}
	if m.StartAt != 0 {
		n += 1 + sovTask(uint64(m.StartAt))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.OperationCost != nil {
		l = m.OperationCost.Size()
		n += 2 + l + sovTask(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 2 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskResultReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberInfo != nil {
		l = m.MemberInfo.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.Provider) > 0 {
		for _, e := range m.Provider {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskDataSupplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberInfo != nil {
		l = m.MemberInfo.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.MetaId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.MetaName)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.ColumnMeta) > 0 {
		for _, e := range m.ColumnMeta {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskPowerSupplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberInfo != nil {
		l = m.MemberInfo.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.PowerInfo != nil {
		l = m.PowerInfo.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceUsedDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalMem != 0 {
		n += 1 + sovTask(uint64(m.TotalMem))
	}
	if m.UsedMem != 0 {
		n += 1 + sovTask(uint64(m.UsedMem))
	}
	if m.TotalProcessor != 0 {
		n += 1 + sovTask(uint64(m.TotalProcessor))
	}
	if m.UsedProcessor != 0 {
		n += 1 + sovTask(uint64(m.UsedProcessor))
	}
	if m.TotalBandwidth != 0 {
		n += 1 + sovTask(uint64(m.TotalBandwidth))
	}
	if m.UsedBandwidth != 0 {
		n += 1 + sovTask(uint64(m.UsedBandwidth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskOperationCostDeclare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CostMem != 0 {
		n += 1 + sovTask(uint64(m.CostMem))
	}
	if m.CostProcessor != 0 {
		n += 1 + sovTask(uint64(m.CostProcessor))
	}
	if m.CostBandwidth != 0 {
		n += 1 + sovTask(uint64(m.CostBandwidth))
	}
	if m.Duration != 0 {
		n += 1 + sovTask(uint64(m.Duration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovTask(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTask(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.TaskEventList) > 0 {
		for _, e := range m.TaskEventList {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskSummaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskSummaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskSummaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TaskOrganization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partners = append(m.Partners, &TaskOrganization{})
			if err := m.Partners[len(m.Partners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &TaskOrganization{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListByIdentityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListByIdentityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListByIdentityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTime", wireType)
			}
			m.LastUpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTime", wireType)
			}
			m.LastUpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = append(m.TaskList, &TaskDetail{})
			if err := m.TaskList[len(m.TaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetailTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TaskOrganization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgoSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AlgoSupplier == nil {
				m.AlgoSupplier = &TaskOrganization{}
			}
			if err := m.AlgoSupplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSupplier = append(m.DataSupplier, &TaskDataSupplier{})
			if err := m.DataSupplier[len(m.DataSupplier)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerSupplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerSupplier = append(m.PowerSupplier, &TaskPowerSupplier{})
			if err := m.PowerSupplier[len(m.PowerSupplier)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &TaskResultReceiver{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationCost == nil {
				m.OperationCost = &TaskOperationCostDeclare{}
			}
			if err := m.OperationCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskResultReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResultReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResultReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberInfo == nil {
				m.MemberInfo = &TaskOrganization{}
			}
			if err := m.MemberInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider, &TaskOrganization{})
			if err := m.Provider[len(m.Provider)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskDataSupplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDataSupplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDataSupplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberInfo == nil {
				m.MemberInfo = &TaskOrganization{}
			}
			if err := m.MemberInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnMeta = append(m.ColumnMeta, &MetaDataColumnDetail{})
			if err := m.ColumnMeta[len(m.ColumnMeta)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskPowerSupplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskPowerSupplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskPowerSupplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberInfo == nil {
				m.MemberInfo = &TaskOrganization{}
			}
			if err := m.MemberInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PowerInfo == nil {
				m.PowerInfo = &ResourceUsedDetail{}
			}
			if err := m.PowerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceUsedDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsedDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsedDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMem", wireType)
			}
			m.TotalMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMem", wireType)
			}
			m.UsedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcessor", wireType)
			}
			m.TotalProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProcessor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedProcessor", wireType)
			}
			m.UsedProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedProcessor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			m.TotalBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			m.UsedBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskOperationCostDeclare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskOperationCostDeclare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskOperationCostDeclare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostMem", wireType)
			}
			m.CostMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostProcessor", wireType)
			}
			m.CostProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostProcessor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostBandwidth", wireType)
			}
			m.CostBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskEventList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskEventList = append(m.TaskEventList, &TaskEvent{})
			if err := m.TaskEventList[len(m.TaskEventList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
