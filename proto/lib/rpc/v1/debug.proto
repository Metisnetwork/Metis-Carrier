syntax = "proto3";

package carrier.rpc.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "lib/p2p/v1/messages.proto";
import "repos/protobuf/gogoproto/gogo.proto";

// Debug service API
service Debug {

  // SetLoggingLevel sets the log-level of the beacon node programmatically.
  rpc SetLoggingLevel(LoggingLevelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/carrier/v1/debug/logging"
    };
  }

  // Returns all the related data for every peer tracked by the host node.
  rpc ListPeers(google.protobuf.Empty) returns (DebugPeerResponses){
    option (google.api.http) = {
      get: "/carrier/v1/debug/peers"
    };
  }

  // Returns requested peer with specified peer id if it exists.
  rpc GetPeer(PeerRequest) returns (DebugPeerResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/debug/peer"
    };
  }

  // Add a new peer with the specified
  rpc AddPeer(PeerRequest) returns (DebugPeerAddResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/debug/add"
    };
  }

  // Returns all the related data for every peer tracked by the host node(count).
  rpc GetPeerCount(google.protobuf.Empty) returns (DebugPeerCountResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/debug/peerCount"
    };
  }
}

message PeerRequest {
    string peer_id = 1;
}

message LoggingLevelRequest {
  enum Level {
    INFO  = 0;
    DEBUG = 1;
    TRACE = 2;
  }
    Level level = 1;
}

message DebugPeerAddResponse {
    string message = 1;
}

message DebugPeerCountResponse {
    uint64 count = 1;
}

message DebugPeerResponses {
    repeated DebugPeerResponse responses = 1;
}

message DebugPeerResponse {
  // Peer related metadata that is useful for debugging.
  message PeerInfo {
    // Metadata of the peer, containing their bitfield
    // and sequence number.
    carrier.p2p.v1.MetaData metadata = 1;
    // List of protocols the peer supports.
    repeated string protocols = 2;
    // Number of times peer has been penalised.
    uint64 fault_count = 3;
    // Protocol Version peer is running.
    string protocol_version = 4;
    // Agent Version peer is running.
    string agent_version = 5;
    // Latency of responses from peer(in ms).
    uint64 peer_latency = 6;
  }
  // Listening addresses know of the peer.
    repeated string listening_addresses = 1;
  // Direction of current connection.
    PeerDirection direction = 2;
  // Current connection between host and peer.
    ConnectionState connection_state = 3;
  // Peer ID of peer.
    string peer_id = 4;
  // ENR of peer at the current moment.
    string enr = 5;
  // Peer Info of the peer containing all relevant metadata.
    PeerInfo peer_info = 6;
  // Peer Status of the peer.
    carrier.p2p.v1.Status peer_status = 7;
  // Last know update time for peer status.
    uint64 last_updated = 8;
  // Score Info of the peer.
    ScoreInfo score_info = 9;
}

// PeerDirection states the direction of the connection to a peer.
enum PeerDirection {
    UNKNOWN  = 0;
    INBOUND  = 1;
    OUTBOUND = 2;
}

// ConnectionState states the current status of the peer.
enum ConnectionState {
    DISCONNECTED  = 0;
    DISCONNECTING = 1;
    CONNECTED     = 2;
    CONNECTING    = 3;
}

// The Scoring related information of the particular peer.
message ScoreInfo {
    float overall_score = 1;
  // Amount of processed blocks provided by
  // the peer.
    uint64 processed_blocks = 2;
  // Related block provider score.
    float block_provider_score = 3;
  // Relevant scores by particular topic.
    map<string, TopicScoreSnapshot> topic_scores = 4;
  // Gossip Score for peer.
    float gossip_score = 5;
  // Behaviour penalty of peer.
    float behaviour_penalty = 6;
  // Returns the current validation error(if it exists).
    string validation_error = 7;
}

message TopicScoreSnapshot {
  // Time a peer has spent in the gossip mesh.
    uint64 time_in_mesh = 1;
  // This is the number of first message deliveries in the topic.
    float first_message_deliveries = 2;
  // This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of
  // message validation.It effectively tracks first and near-first
  // deliveries, ie a message seen from a mesh peer before we have forwarded it to them.
    float mesh_message_deliveries = 3;
  // This is the number of invalid messages in the topic from the peer.
    float invalid_message_deliveries = 4;
}
