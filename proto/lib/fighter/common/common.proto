syntax = "proto3";
package common;
option go_package = "github.com/Metisnetwork/Metis-Carrier/lib/fighter/common";

message Party {                // 各参与方信息
    string ip = 1;
    int32 port = 2;
    string party_id = 3;      // 达成共识后为每个参与方分配的唯一标识
    string name = 4;          // 为了可读性
}

enum AlgorithmCfgType {
    AlgorithmCfgType_Unknown = 0;      // 未知
    AlgorithmCfgType_2DTable = 1;      // 二维数据表
    AlgorithmCfgType_non2DTable = 2;   // 非二维数据表
}

enum ConnectPolicyFormat {
    ConnectPolicyFormat_Unknown = 0;       // 未知
    ConnectPolicyFormat_Str = 1;           // 字符串
    ConnectPolicyFormat_Json = 2;          // json
}

message TaskReadyGoReq {
    string task_id = 1;
    string party_id = 2;          // 当前参与方id
    string data_id = 3;
    string env_id = 4;            // 环境
    repeated Party parties = 5;   // 各个参与方的信息
    string algorithm_code = 6;           // 算法代码
    AlgorithmCfgType algorithm_cfg_type = 7;  // 算法配置的类型
    string algorithm_cfg = 8;            // 算法配置json
    repeated string data_party_ids = 9;         // 各数据方的party_id
    repeated string computation_party_ids = 10;  // 各计算方的party_id
    repeated string result_party_ids = 11;      // 各结果方的party_id
    uint64 duration = 12;       // 任务预算计算时长(单位: ms)
    uint64 memory = 13;         // 内存限制(单位: byte)
    uint32 processor = 14;      // 处理器限制(单位：个)
    uint64 bandwidth = 15;      // 带宽限制(单位：bps)
    ConnectPolicyFormat connect_policy_format = 16; // 策略的格式，str或者json
    string connect_policy = 17;      // channel的连接策略
}

message TaskReadyGoReply {
    bool ok = 1;
    string msg = 2;
}

message TaskCancelReq {
    string task_id = 1;
    string party_id = 2;
}

message TaskCancelReply {
    bool ok = 1;
    string msg = 2;
}
