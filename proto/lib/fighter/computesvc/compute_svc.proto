syntax = "proto3";
package computesvc;
option go_package = "github.com/RosettaFlow/Carrier-Go/lib/fighter/computesvc";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service ComputeProvider {
   rpc GetStatus(google.protobuf.Empty) returns (GetStatusReply) {
    option(google.api.http) = {
            get: "/compute/getStatus"
        };
  }
  rpc GetTaskDetails(GetTaskDetailsReq) returns (GetTaskDetailsReply) {
    option(google.api.http) = {
            post: "/compute/getTaskDetails"
            body: "*"
        };
  }

  rpc UploadShard(stream UploadShardReq) returns (UploadShardReply) {}
  rpc HandleTaskReadyGo(TaskReadyGoReq) returns (UploadShardReply) {
    option(google.api.http) = {
            post: "/compute/handleTaskReadyGo"
            body: "*"
        };
  }

}

message UploadShardReq {
  message Info {
    string task_id = 1;
    string data_id = 2;
  }
  oneof data {
    Info  meta    = 1;
    bytes content = 2;
  }
}

message UploadShardReply {
    bool   ok  = 1;
    string msg = 2;
}

message TaskReadyGoReq {
    string task_id     = 1;
    string contract_id = 2;
    string data_id     = 3;
    string party_id    = 4;        // 当前参与方id
    string env_id      = 5;
  message Peer {              // 各参与方信息
    string ip    = 1;
    int32  port  = 2;
    string party = 3;         // 达成共识后为每方分配的唯一标识
    string name  = 4;          // 为了可读性
  }
    repeated Peer       peers             = 6;
    map<string, string> user_cfg          = 7;       // 具体算法要求的配置
    repeated string     data_party        = 8;         // 各数据方的party_id
    repeated string     computation_party = 9;  // 各计算方的party_id
    repeated string     result_party      = 10;      // 各结果方的party_id

}

message GetStatusReply {
    string cpu       = 1;
    string mem       = 2;
    string bandwidth = 3;
}

message GetTaskDetailsReq {
    repeated string task_ids = 1;
}

message GetTaskDetailsReply {
  message Detail {
    string task_id      = 1;
    string task_name    = 2;
    string contract_id  = 3;
    int64  elapsed_time = 4;
    int64  remain_time  = 5;
    string progress     = 6;
    string phase        = 7;
  }
    repeated Detail task_details = 1;
}
