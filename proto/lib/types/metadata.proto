syntax = "proto3";

package types;

import "lib/common/base.proto";
import "lib/common/data.proto";


option go_package = "github.com/RosettaFlow/Carrier-Go/lib/types";

// Metadata body data struct.
message MetadataPB {
  string                      metadata_id = 1;                // 元数据ID
  api.protobuf.Organization   owner = 2;                      // 元数据所属的组织信息
  string                      data_id = 3;                    // 预留
  api.protobuf.DataStatus     data_status = 4;                // the status of data for local storage, 1 means valid, 2 means invalid.
  string                      metadata_name = 5;              // 元数据的名称 (对外的表名)
  uint32                      metadata_type = 6;              // 表示该元数据是 普通数据 还是 模型数据的元数据 (0: 未定义; 1: 普通数据元数据; 2: 模型数据元数据)
  string                      file_hash = 7;                  // 原始数据的Hash
  string                      desc = 8;                       // 元数据的摘要(描述)
  api.protobuf.OriginFileType file_type = 9;                  // 源文件的类型 (目前只有 csv)
  string                      industry = 10;                  // 元数据所属的行业
  api.protobuf.MetadataState  state = 11;                     // 元数据的状态 (0: 未知; 1: 还未发布的新表; 2: 已发布的表; 3: 已撤销的表)
  uint64                      publish_at = 12;                // 元数据发布时间
  uint64                      update_at = 13;                 // 元数据更新时间
  uint64                      nonce = 14;                     // 元数据的 nonce (用来标识该元数据在所属组织中的元数据的序号, 从 0 开始递增)
  string                      metadata_option = 15;           // 元数据的选项，和 file_type 配套使用.
  string                      token_address = 16;             // 元数据对应的 dataToken 合约的地址
}

// 元数据申请记录实体
message MetadataAuthorityPB {
  string                                      metadata_auth_id = 1;     // 元数据授权申请Id
  string                                      user = 2;                 // 申请人地址
  string                                      data_id = 3;              // 预留
  api.protobuf.DataStatus                     data_status = 4;          // the status of data for local storage, 1 means valid, 2 means invalid.
  api.protobuf.UserType                       user_type = 5;            // 申请人类型
  MetadataAuthority                           auth = 6;                 // 元数据使用授权信息
  api.protobuf.AuditMetadataOption            audit_option  = 7;        // 审核结果
  string                                      audit_suggestion = 8;     // 审核意见 (允许""字符)
  MetadataUsedQuo                             used_quo = 9;             // 对应数据授权信息中元数据的使用实况
  uint64                                      apply_at = 10;            // 发起授权申请的时间 (单位: ms)
  uint64                                      audit_at = 11;            // 审核授权申请的时间 (单位: ms)
  api.protobuf.MetadataAuthorityState         state = 12;               // 数据授权信息的状态 (0: 未知; 1: 还未发布的数据授权; 2: 已发布的数据授权; 3: 已撤销的数据授权 <失效前主动撤回的>; 4: 已经失效的数据授权 <过期or达到使用上限的>)
  bytes                                       sign = 13;

  uint64                                      publish_at = 14;          // 数据发布时间
  uint64                                      update_at = 15;           // 数据更新时间
}

// =============================== For API =========================
// 元数据的摘要内容 (不包含详细 列描述)
message MetadataSummary {
  string                        metadata_id = 1;            // 元数据Id
  string                        metadata_name = 2;          // 元数据名称|数据名称 (表名)
  uint32                        metadata_type = 3;          // 表示该元数据是 普通数据 还是 模型数据的元数据 (0: 未定义; 1: 普通数据元数据; 2: 模型数据元数据)
  string                        file_hash = 4;              // 原始数据的Hash
  string                        desc = 5;                   // 元数据的描述 (摘要)
  api.protobuf.OriginFileType   file_type = 6;              // 源文件的类型 (目前只有 csv)
  string                        industry = 7;               // 元数据所属行业
  api.protobuf.MetadataState    state = 8;                  // 元数据的状态 (0: 未知; 1: 还未发布的新表; 2: 已发布的表; 3: 已撤销的表)
  uint64                        publish_at = 9;             // 数据发布时间
  uint64                        update_at = 10;             // 数据更新时间
  uint64                        nonce = 11;                 // 元数据的 nonce 用来标识该 元数据
  string                        metadata_option = 12;       // 元数据选项 (根据 fileType 的值来配对对应的模板)
}

// 元数据的详情信息
message MetadataDetail {
  MetadataSummary         metadata_summary = 1;            // 元数据摘要
  uint32                  total_task_count = 3;            // 该元数据参与过得任务数 (已完成的和正在执行的)
}

// 元数据的使用方式定义
message MetadataUsageRule {
  api.protobuf.MetadataUsageType  usage_type = 1;              // 元数据的使用方式 (0: 未定义; 1: 按照时间段来使用; 2: 按照次数来使用)
  uint64                          start_at = 2;                // 可使用的开始时间 (当 usage_type 为 1 时才需要的字段)
  uint64                          end_at = 3;                  // 可使用的结束时间 (当 usage_type 为 1 时才需要的字段)
  uint32                          times = 4;                   // 可使用的次数 (当 usage_type 为 2 时才需要的字段)
}

// 元数据使用授权
message MetadataAuthority {
  api.protobuf.Organization owner = 1;                   // 元数据所属的组织信息
  string                    metadata_id = 2;             // 元数据Id
  MetadataUsageRule         usage_rule = 3;              // 元数据怎么使用
}

// 对应授权信息中元数据的使用实况定义 (配合数据授权使用)
message MetadataUsedQuo {
  api.protobuf.MetadataUsageType  usage_type = 1;               // 元数据的使用方式 (0: 未定义; 1: 按照时间段来使用; 2: 按照次数来使用)
  bool                            expire = 2;                   // 是否已过期 (当 usage_type 为 1 时才需要的字段)
  uint32                          used_times = 3;               // 已经使用的次数 (当 usage_type 为 2 时才需要的字段)
}
