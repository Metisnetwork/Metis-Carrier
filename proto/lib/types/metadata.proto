syntax = "proto3";

package types;

import "repos/protobuf/gogoproto/gogo.proto";

option go_package = "github.com/RosettaFlow/Carrier-Go/lib/types";

// MetaData body data struct.
message MetaData {
    string              identity       = 1;
    string              nodeId         = 2;
    string              nodeName       = 3;
    string              dataId         = 4;
    string              dataStatus     = 5;
    string              originId       = 6;
    string              tableName      = 7;
    string              filePath       = 8;
    string              desc           = 9;
    uint64              rows           = 10;
    uint64              columns        = 11;
    uint64              size           = 12;
    string              fileType       = 13;
    string              state          = 14;
    bool                hasTitleRow    = 15;
    repeated MetadataColumn columnMetaList = 16;
}

message MetadataColumn {
    uint32 cindex = 1;
    string cname  = 2;
    string ctype  = 3;
  // unit: byte
    uint32 csize    = 4;
    string ccomment = 5;
}

// =============================== For API =========================
// 元数据的摘要内容 (不包含详细 列描述)
message MetaDataSummary {
    string meta_data_id = 1;           // 元数据Id
    string origin_id = 2;              // 源文件Id
    string table_name = 3;             // 元数据名称|数据名称 (表名)
    string desc = 4;                   // 元数据的描述 (摘要)
    string file_path = 5;              // 源文件存放路径
    uint32 rows = 6;                   // 源文件的行数
    uint32 columns = 7;                // 源文件的列数
    uint32 size = 8;                   // 源文件的大小 (单位: byte)
    string file_type = 9;              // 源文件的类型 (目前只有 csv)
    bool   has_title = 10;             // 源文件是否包含标题
    string industry = 11;              // 元数据所属行业
    string state = 12;                 // 元数据的状态 (create: 还未发布的新表; release: 已发布的表; revoke: 已撤销的表)
}

// 元数据的详情信息
message MetaDataDetail {
    MetaDataSummary               meta_data_summary = 1;
    repeated MetadataColumn           column_meta = 2;
    uint32                        total_task_count = 3;            // 该元数据参与过得任务数 (已完成的和正在执行的)
}

// 元数据的使用方式类型枚举
enum MetaDataUsageType {
    Usage_Unknown = 0;  // 未定义类型
    Period = 1;         // 依照时间段来使用
    Times = 2;          // 依照次数来使用
}

// 元数据的使用方式定义
message MetaDataUsage {
    MetaDataUsageType              usage_type = 1;              // 元数据的使用方式 (0: 未定义; 1: 按照时间段来使用; 2: 按照次数来使用)
    uint64                         start_at   = 2;                // 使用开始时间 (当 usage_type 为 1 时才需要的字段)
    uint64                         end_at     = 3;                  // 使用结束时间 (当 usage_type 为 1 时才需要的字段)
    uint32                         times      = 4;                   // 使用次数 (当 usage_type 为 2 时才需要的字段)
}

// 元数据使用授权
message MetaDataAuthority {
    Organization                          owner = 1;                   // 元数据所属的组织信息
    string                                meta_data_id = 2;            // 元数据Id
    MetaDataUsage                         usage = 3;                   // 元数据怎么使用
}

enum AuditMetaDataOption {
    Audit_Pending = 0;          // 等待审核中
    Audit_Passed = 1;           // 审核通过
    Audit_Refused = 2;          // 审核拒绝
}