syntax = "proto3";

package types;

import "repos/protobuf/gogoproto/gogo.proto";
import "lib/types/metadata.proto";
import "lib/types/identitydata.proto";
import "lib/common/base.proto";

option go_package = "github.com/RosettaFlow/Carrier-Go/lib/types";

message TaskData {
    string identity   = 1;
    string nodeId     = 2;
    string nodeName   = 3;
    string dataId     = 4;
    string dataStatus = 5;
    string taskId     = 6;
    string taskName   = 7;
  // success/failed/running/pending/waiting
    string state      = 8;
    string reason     = 9;
    uint32 eventCount = 10;
    string desc       = 11;
    uint64 createAt   = 12;
    uint64 endAt      = 13;
    uint64 startAt    = 14;
    string party_id   = 15;
    // 算法提供者信息
    TaskOrganization algoSupplier = 20;
    TaskResourceCostDeclare taskResource = 21;
    // 数据提供方组信息
    repeated TaskDataSupplier metadataSupplier = 22;
    // 算力提供方组织
    repeated TaskPowerSupplier resourceSupplier = 23;
    // 结果接收方组织
    repeated TaskResultReceiver receivers = 24;
    // 任务参与方
    repeated TaskOrganization partnerList           = 25;
    repeated TaskEvent        eventDataList         = 26;
    string                    CalculateContractCode = 27;
    string                    DataSplitContractCode = 28;
    string                    ContractExtraParams   = 29;
}

// 定义：任务详细信息
message TaskDetail {
    string                                task_id = 1;                         // 任务Id
    string                                task_name = 2;                       // 任务名称
    string                                user = 3;                            // 发起任务的用户的信息 (task是属于用户的)
    UserType                              user_type = 4;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    TaskOrganization                      sender = 5;                          // 任务发起方
    TaskOrganization                      algo_supplier = 6;                   // 算法提供方 (目前就是和 任务发起方是同一个 ...)
    repeated TaskDataSupplier             data_supplier = 7;                   // 数据提供方
    repeated TaskPowerSupplier            power_supplier = 8;                  // 算力提供方
    repeated TaskResultReceiver           receivers = 9;                       // 任务结果方
    uint64                                create_at = 10;                      // 任务发起时间
    uint64                                start_at = 11;                       // 任务启动时间
    uint64                                end_at = 12;                         // 任务结束时间
    string                                state = 13;                          // 任务的状态 (pending: 等在中; running: 计算中; failed: 失败; success: 成功)
    TaskResourceCostDeclare               operation_cost = 14;                 // 任务所需资源声明

    // 任务描述
    string desc = 21;
    // 事件列表
    repeated TaskEvent task_event_list = 22;
}

// 任务算力提供方信息
message TaskPowerSupplier {
    // 身份信息
    TaskOrganization organization = 1;
    // 算力使用情况
    ResourceUsageOverview resourceUsedOverview = 2;
}

// 任务需要花费的资源声明
message TaskResourceCostDeclare {
    // 任务所需的内存 (单位: byte)
    uint64 cost_mem = 1;
    // 任务所需的核数 (单位: 个)
    uint32 cost_processor = 2;
    // 任务所需的带宽 (单位: bps)
    uint64 cost_bandwidth = 3;
    // 任务所需的运行时长 (单位: ms)
    uint64 duration = 4;
}

// 定义：任务结果接收详细信息
message TaskResultReceiver {
    // 任务接收方组织信息
    TaskOrganization receiver = 1;
    // 提供结果的组织方信息（列表）
    repeated TaskOrganization provider = 2;
}

// 任务数据提供方基本信息
message TaskDataSupplier {
    TaskOrganization             member_info = 1;                              // 身份信息
    string                       meta_data_id = 2;                             // 元数据Id
    string                       meta_data_name = 3;                           // 元数据名称
    repeated MetadataColumn      column_list = 4;
}

// 任务事件定义
message TaskEvent {
    string type = 1;                        // 事件类型码
    string task_id = 2;                     // 事件对应的任务id
    string identity_id = 3;                 // 产生事件的节点身份
    string content = 4;                     // 事件内容
    uint64 create_at = 5;                   // 事件产生时间
}


