syntax = "proto3";

package types;

import "lib/common/base.proto";
import "lib/common/data.proto";
import "repos/protobuf/gogoproto/gogo.proto";
import "lib/types/metadata.proto";
import "lib/types/identitydata.proto";
import "lib/types/resourcedata.proto";

option go_package = "github.com/RosettaFlow/Carrier-Go/lib/types";

message TaskData {
    string identity_id = 1;
    string node_id     = 2;
    string node_name   = 3;
    string data_id     = 4;
    string data_status = 5;
    string task_id     = 6;
    string task_name   = 7;
  // success/failed/running/pending/waiting
    string state       = 8;
    string reason      = 9;
    uint32 event_count = 10;
    string desc        = 11;
    uint64 create_at   = 12;
    uint64 end_at      = 13;
    uint64 start_at    = 14;
    string party_id    = 15;
    // 算法提供者信息
    api.protobuf.TaskOrganization        algo_supplier  = 20;
    api.protobuf.TaskResourceCostDeclare operation_cost = 21;
    // 数据提供方组信息
    repeated TaskDataSupplier data_supplier = 22;
    // 算力提供方组织
    repeated TaskPowerSupplier power_supplier = 23;
    // 结果接收方组织
    repeated TaskResultReceiver receivers = 24;
    // 任务参与方
    repeated api.protobuf.TaskOrganization partner_list              = 25;
    repeated TaskEvent                     task_event_list           = 26;
    string                                 calculate_contract_code   = 27;
    string                                 data_splits_contract_code = 28;
    string                                 contract_extra_params     = 29;

    // v2.0
    // 发起任务的用户的信息 (task是属于用户的)
    string user = 30;
    // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    api.protobuf.UserType user_type = 31;
    // 任务发起方
    api.protobuf.TaskOrganization sender = 32;
}

// 定义：任务详细信息
message TaskDetail {
    string                               task_id        = 1;                         // 任务Id
    string                               task_name      = 2;                       // 任务名称
    string                               user           = 3;                            // 发起任务的用户的信息 (task是属于用户的)
    api.protobuf.UserType                user_type      = 4;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    api.protobuf.TaskOrganization        sender         = 5;                          // 任务发起方
    api.protobuf.TaskOrganization        algo_supplier  = 6;                   // 算法提供方 (目前就是和 任务发起方是同一个 ...)
    repeated TaskDataSupplier            data_supplier  = 7;                   // 数据提供方
    repeated TaskPowerSupplier           power_supplier = 8;                  // 算力提供方
    repeated TaskResultReceiver          receivers      = 9;                       // 任务结果方
    uint64                               create_at      = 10;                      // 任务发起时间
    uint64                               start_at       = 11;                       // 任务启动时间
    uint64                               end_at         = 12;                         // 任务结束时间
    string                               state          = 13;                          // 任务的状态 (pending: 等在中; running: 计算中; failed: 失败; success: 成功)
    api.protobuf.TaskResourceCostDeclare operation_cost = 14;                 // 任务所需资源声明

    // 任务描述
    string desc = 21;
    // 事件列表
    repeated TaskEvent task_event_list = 22;
}

// 任务算力提供方信息
message TaskPowerSupplier {
    // 身份信息
    api.protobuf.TaskOrganization organization = 1;
    // 算力使用情况
    types.ResourceUsageOverview resource_used_overview = 2;
}

// 定义：任务结果接收详细信息
message TaskResultReceiver {
    // 任务接收方组织信息
    api.protobuf.TaskOrganization receiver = 1;
    // 提供结果的组织方信息（列表）
    repeated api.protobuf.TaskOrganization provider = 2;
}

// 任务数据提供方基本信息
message TaskDataSupplier {
    api.protobuf.TaskOrganization member_info    = 1;                              // 身份信息
    string                        meta_data_id   = 2;                             // 元数据Id
    string                        meta_data_name = 3;                           // 元数据名称
    repeated MetadataColumn       column_list    = 4;
}

// 任务事件定义
message TaskEvent {
    string type        = 1;                        // 事件类型码
    string task_id     = 2;                     // 事件对应的任务id
    string identity_id = 3;                 // 产生事件的节点身份
    string content     = 4;                     // 事件内容
    uint64 create_at   = 5;                   // 事件产生时间
}


