syntax = "proto3";

package rpcapi;

option go_package = "github.com/RosettaFlow/Carrier-Go/lib/api";

import "lib/common/base.proto";
import "lib/types/identitydata.proto";
import "lib/types/metadata.proto";
import "google/api/annotations.proto";

//  ------------------------  auth  ------------------------
message ApplyIdentityJoinRequest {
  Organization member = 1;           // 申请准入身份
}

message GetNodeIdentityResponse {
  int32                    status = 1;                       // 响应码
  string                   msg = 2;                          // 错误信息
  Organization             owner = 3;                        // 自己身份信息
}

message GetIdentityListResponse {
  int32                             status = 1;                       // 响应码
  string                            msg = 2;                          // 错误信息
  repeated Organization             member_list = 3;                  // 全网身份信息列表
}

// 用户对元数据使用授权申请req
message ApplyMetaDataAuthorityRequest {
  string                                user = 1;                            // 发起任务的用户的信息 (task是属于用户的)
  UserType                              user_type = 2;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
  MetaDataAuthority                     auth = 3;                            // 元数据使用授权信息
  bytes                                 sign = 4;                            // 发起数据授权申请的账户的签名
}

// 用户对元数据使用授权申请resp
message ApplyMetaDataAuthorityResponse {
  int32                             status = 1;                       // 响应码
  string                            msg = 2;                          // 错误信息
  string                            meta_data_auth_id = 3;            // 元数据授权申请Id
}

message AuditMetaDataAuthorityRequest {
  string                          meta_data_auth_id = 1;                  // 元数据授权申请Id
  AuditMetaDataOption             audit = 2;                              // 审核结果
}

message GetMetaDataAuthority {
  string                                meta_data_auth_id = 1;               // 元数据授权申请Id
  string                                user = 2;                            // 发起任务的用户的信息 (task是属于用户的)
  UserType                              user_type = 3;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
  MetaDataAuthority                     auth = 4;                            // 元数据使用授权信息
  AuditMetaDataOption                   audit = 5;                           // 审核结果
  uint64                                apply_at = 6;                        // 发起授权申请的时间 (单位: ms)
  uint64                                audit_at = 7;                        // 审核授权申请的时间 (单位: ms)
}

message GetMetaDataAuthorityListResponse {
  int32                             status = 1;                       // 响应码
  string                            msg = 2;                          // 错误信息
  repeated  GetMetaDataAuthority    list = 3;                         // 数据授权信息列表
}

service AuthService {

  // 数据授权申请
  rpc ApplyMetaDataAuthority(ApplyMetaDataAuthorityRequest) returns (ApplyMetaDataAuthorityResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/applyMetaDataAuth"
      body: "*"
    };
  }

  // 数据授权审核
  rpc AuditMetaDataAuthority(AuditMetaDataAuthorityRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/auditMetaDataAuth"
      body: "*"
    };
  }

  // 获取数据授权申请列表
  rpc GetMetaDataAuthorityList(EmptyGetParams) returns (GetMetaDataAuthorityListResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/metaDataAuthList"
      body: "*"
    };
  }

  //

  // 申请准入网络
  rpc ApplyIdentityJoin (ApplyIdentityJoinRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/applyIdentity"
      body: "*"
    };
  }

  // 注销准入网络
  rpc RevokeIdentityJoin (EmptyGetParams) returns (SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/revokeIdentity"
      body: "*"
    };
  }
  // 查询自己组织的identity信息
  rpc GetNodeIdentity (EmptyGetParams)returns (GetNodeIdentityResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/getIdentity"
      body: "*"
    };
  }

  // 查询全网全部已发布的 身份信息
  rpc GetIdentityList (EmptyGetParams) returns (GetIdentityListResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/identityList"
      body: "*"
    };
  }
}
