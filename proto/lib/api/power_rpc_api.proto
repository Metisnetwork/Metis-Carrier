syntax = "proto3";

package rpcapi;

option go_package = "github.com/RosettaFlow/Carrier-Go/lib/api";

import "lib/common/base.proto";
import "lib/common/data.proto";
import "lib/types/resourcedata.proto";
import "lib/api/task_rpc_api.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

//  ------------------------  power  ------------------------
message GetPowerTotalDetailResponse {
    api.protobuf.Organization owner = 1;                  // 算力拥有者信息
    types.PowerTotalDetail    power = 2;                  // 算力总详细
}

message GetPowerTotalDetailListResponse {
    int32                                status     = 1;                         // 响应码
    string                               msg        = 2;
    repeated GetPowerTotalDetailResponse power_list = 3;  // 全网的算力总详情列表
}

message PublishPowerRequest {
    string job_node_id = 1;     // 计算服务id (节点内部的)
}

message GetPowerSingleDetailResponse {
    api.protobuf.Organization owner = 1;                  // 算力拥有者信息
    types.PowerSingleDetail   power = 2;                  // 算力单个摘要
}

message GetPowerSingleDetailListResponse {
    int32                                 status     = 1;                         // 响应码
    string                                msg        = 2;
    repeated GetPowerSingleDetailResponse power_list = 3;  // 单个节点的算力总摘要列表
}

message PublishPowerResponse {
    int32  status   = 1;                         // 响应码
    string msg      = 2;                            // 错误信息
    string power_id = 3;                       // 算力id
}

message RevokePowerRequest {
    string power_id = 1;        // 算力id
}

// ## 算力 相关接口
///           【注意】 算力和元数据 不一样, 对外面人来说, 算力只需要知道总的, 而元数据则需要知道单个单个的;
//                    对自己来说, 算力和元数据都需要知道单个单个的.
service PowerService {

  // 查看各个节点的总算力详情列表
  rpc GetPowerTotalDetailList (google.protobuf.Empty) returns (GetPowerTotalDetailListResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/power/totalList"
      body: "*"
    };
  }
  // 查看某个节点各个单算力详情列表
  rpc GetPowerSingleDetailList (google.protobuf.Empty) returns (GetPowerSingleDetailListResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/power/singleList"
      body: "*"
    };
  }

  // 启用算力 (发布算力)
  rpc PublishPower (PublishPowerRequest) returns (PublishPowerResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/power/publish"
      body: "*"
    };
  }
  // 停用算力 (撤销算力)
  rpc RevokePower (RevokePowerRequest) returns (api.protobuf.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/power/revoke"
      body: "*"
    };
  }
}
