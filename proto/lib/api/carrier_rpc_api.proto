syntax = "proto3";

package rpcapi;


//import "repos/protobuf/gogoproto/gogo.proto";

option go_package = "github.com/RosettaFlow/Carrier-Go/lib/api";

//  ------------------------  yarn  ------------------------

// 调度服务的信息
message YarnNodeInfo {
  string                      node_type = 1;                             // 服务node的类型
  string                      node_id = 2;                               // 调度服务的 nodeId, 代表整个机构的 nodeId
  string                      internal_ip = 3;                           // 调度服务的内网 ip, 给 管理台用
  string                      external_ip = 4;                           // 调度服务的外网 ip, 给 外部做p2p用
  string                      internal_port = 5;                         // 调度服务的内网 port, 给 管理台用
  string                      external_port = 6;                         // 调度服务的外网 port, 给 外部做p2p用
  string                      identity_type = 7;                         // 身份认证标识的类型 (ca 或者 did)
  string                      identity_id = 8;                           // 身份认证标识的id
  YarnNodeSysInfo             information = 9;                           // 调度服务系统本身资源信息
  repeated YarnRegisteredPeer peers = 10;                                // 调度服务上被注册的 计算or数据服务节点信息
  repeated SeedPeer           seed_peers = 11;                           // 调度服务上被注册的种子节点信息
  string                      state = 12;                                // 调度服务自身的状态信息 (active: 活跃; leave: 离开网络; join: 加入网络 unuseful: 不可用)
  string                      name = 13;                                 // 组织的Name
}


// 调度服务的系统资源信息
message YarnNodeSysInfo {
  string name = 1;                  // 调度服务系统名称
  uint64 total_mem = 2;             // 调度服务系统的总内存 (单位: byte)
  uint64 used_mem = 3;              // 调度服务系统的已用内存 (单位: byte)
  uint64 total_processor = 4;       // 调度服务的总内核数 (单位: 个)
  uint64 used_processor = 5;        // 调度服务的已用内核数 (单位: 个)
  uint64 total_bandwidth = 6;       // 调度服务的总带宽数 (单位: bps)
  uint64 used_bandwidth = 7;        // 调度服务的已用带宽数 (单位: bps)
}


// 调度服务上被注册的资源节点信息
message YarnRegisteredPeer {
  string                   node_type = 1;                      // 计算or数据服务node的类型
  YarnRegisteredPeerDetail node_detail = 2;                    // 计算or数据服务node的网络信息
}

message YarnRegisteredPeerDetail {
  string id = 1;                            // 计算or数据服务的唯一Id
  string internal_ip = 2;                   // 计算or数据服务的内网 ip, 给 管理台用
  string external_ip = 3;                   // 计算or数据服务的外网 ip, 给 多方协作任务用
  string internal_port = 4;                 // 计算or数据服务的内网 port, 给 管理台用
  string external_port = 5;                 // 计算or数据服务的外网 port, 给 多方协作任务用
  int32  conn_state = 6;                    // 计算or数据服务的状态 (-1: 未被调度服务连接上; 0: 连接上; 1: 算力为启用<计算服务>; 2: 算力启用<计算服务>; 3: 算力被占用<计算服务算力正在被任务占用>)
}

message SeedPeer {
  string id = 1;                            // 种子节点的唯一Id
  string internal_ip = 2;                   // 种子节点的内网 ip, 给 管理台用
  string internal_port = 3;                 // 种子节点的内网 port, 给 管理台用
  int32  conn_state = 4;                    // 是否被调度服务连接上 (-1: 未被调度服务连接上; 0: 连接上)
}

// 调度服务上的 计算服务详情信息
message YarnRegisteredJobNode {
  string                       id = 2;                            // 计算服务的唯一Id
  string                       internal_ip = 3;                   // 计算服务的内网 ip, 给 管理台用
  string                       external_ip = 4;                   // 计算服务的外网 ip, 给 多方协作任务用
  string                       internal_port = 5;                 // 计算服务的内网 port, 给 管理台用
  string                       external_port = 6;                 // 计算服务的外网 port, 给 多方协作任务用
  ResourceUsedDetailShow       information = 7;                   // 计算服务的算力资源使用情况
  uint64                       duration = 8;                      // 计算服务远行时长 (从加入网络中的时间点计算)
  YarnRegisteredJobNodeTaskIds task = 9;                          // 计算服务上的任务Id和个数
}

message YarnRegisteredJobNodeTaskIds {
  uint32          count = 1;
  repeated string task_ids = 2;
}


message YarnRegisteredDataNode {
  string                      id = 2;                            // 数据服务的唯一Id
  string                      internal_ip = 3;                   // 数据服务的内网 ip, 给 管理台用
  string                      external_ip = 4;                   // 数据服务的外网 ip, 给 多方协作任务用
  string                      internal_port = 5;                 // 数据服务的内网 port, 给 管理台用
  string                      external_port = 6;                 // 数据服务的外网 port, 给 多方协作任务用
  ResourceUsedDetailShow      information = 7;                   // 数据服务的算力资源使用情况
  uint64                      duration = 8;                      // 数据服务远行时长 (从加入网络中的时间点计算)
  YarnRegisteredDataNodeDelta delta = 9;                         // 数据服务上的文件统计信息
}

message YarnRegisteredDataNodeDelta {
  uint32 fileCount = 1;                           // 数据服务对外公开的源文件个数
  uint32 fileTotalSize = 2;                       // 数据服务对外公开的源文件总大小  (单位: byte)
}


message GetNodeInfoResponse {
  int32        status = 1;                      // 响应码
  string       msg = 2;                         // 错误信息
  YarnNodeInfo information = 3;                 // 调度服务系统信息
}


message GetRegisteredPeersResponse {
  int32                           status = 1;                               // 响应码
  string                          msg = 2;                                  // 错误信息
  repeated YarnRegisteredJobNode  job_nodes = 3;                            // 注册在调度服务上的 计算服务信息
  repeated YarnRegisteredDataNode data_nodes = 4;                           // 注册在调度服务上的 数据服务信息
}


message SetSeedNodeRequest {
  string internal_ip = 1;                   // 种子节点的内网 ip, 给 管理台用
  string internal_port = 2;                 // 种子节点的内网 port, 给 管理台用
}
message SetSeedNodeResponse {
  int32    status = 1;                      // 响应码
  string   msg = 2;                         // 错误信息
  SeedPeer seed_peer = 3;
}


message UpdateSeedNodeRequest {
  string id = 1;                            // 种子节点的唯一Id
  string internal_ip = 2;                   // 种子节点的内网 ip, 给 管理台用
  string internal_port = 3;                 // 种子节点的内网 port, 给 管理台用
}




message GetSeedNodeListResponse {
  int32             status = 1;                      // 响应码
  string            msg = 2;                         // 错误信息
  repeated SeedPeer seed_peers = 3;
}



message SetDataNodeRequest {
  string internal_ip = 3;                   // 数据服务的内网 ip, 给 管理台用
  string external_ip = 4;                   // 数据服务的外网 ip, 给 多方协作任务用
  string internal_port = 5;                 // 数据服务的内网 port, 给 管理台用
  string external_port = 6;                 // 数据服务的外网 port, 给 多方协作任务用
}

message SetDataNodeResponse {
  int32                    status = 1;                      // 响应码
  string                   msg = 2;                         // 错误信息
  YarnRegisteredPeerDetail data_node = 3;
}

message UpdateDataNodeRequest {
  string id = 1;                            // 数据服务的唯一id
  string internal_ip = 3;                   // 数据服务的内网 ip, 给 管理台用
  string external_ip = 4;                   // 数据服务的外网 ip, 给 多方协作任务用
  string internal_port = 5;                 // 数据服务的内网 port, 给 管理台用
  string external_port = 6;                 // 数据服务的外网 port, 给 多方协作任务用
}

message GetRegisteredNodeListResponse {
  int32                       status = 1;                      // 响应码
  string                      msg = 2;                         // 错误信息
  repeated YarnRegisteredPeer nodes = 3;
}


message SetJobNodeRequest {
  string internal_ip = 3;                   // 计算服务的内网 ip, 给 管理台用
  string external_ip = 4;                   // 计算服务的外网 ip, 给 多方协作任务用
  string internal_port = 5;                 // 计算服务的内网 port, 给 管理台用
  string external_port = 6;                 // 计算服务的外网 port, 给 多方协作任务用
}

message SetJobNodeResponse {
  int32                    status = 1;                      // 响应码
  string                   msg = 2;                         // 错误信息
  YarnRegisteredPeerDetail job_node = 3;
}

message UpdateJobNodeRequest {
  string id = 1;                            // 计算服务的唯一id
  string internal_ip = 3;                   // 计算服务的内网 ip, 给 管理台用
  string external_ip = 4;                   // 计算服务的外网 ip, 给 多方协作任务用
  string internal_port = 5;                 // 计算服务的内网 port, 给 管理台用
  string external_port = 6;                 // 计算服务的外网 port, 给 多方协作任务用
}



message ReportTaskEventRequest {
  TaskEventDeclare task_event = 1;
}


// 未定义
message ReportTaskResourceExpenseRequest {

}

// ## 调度服务 - 系统状态 接口
service YarnService {

  // Getter YarnNode ...
  // 查看自身调度服务信息
  rpc GetNodeInfo (EmptyGetParams) returns (GetNodeInfoResponse);
  // 查看自身调度服务的 peer注册信息
  rpc GetRegisteredPeers (EmptyGetParams) returns (GetRegisteredPeersResponse);



  // about seed
  // 新增种子节点信息
  rpc SetSeedNode (SetSeedNodeRequest) returns (SetSeedNodeResponse);
  // 修改种子节点信息
  rpc UpdateSeedNode (UpdateSeedNodeRequest) returns (SetSeedNodeResponse);
  // 删除种子节点信息
  rpc DeleteSeedNode (DeleteRegisteredNodeRequest) returns (SimpleResponseCode);
  // 查询种子节点列表
  rpc GetSeedNodeList (EmptyGetParams) returns (GetSeedNodeListResponse);

  // about dataNode
  // 新增数据服务信息
  rpc SetDataNode (SetDataNodeRequest) returns (SetDataNodeResponse);
  // 修改数据服务信息
  rpc UpdateDataNode (UpdateDataNodeRequest) returns (SetDataNodeResponse);
  // 删除数据服务信息
  rpc DeleteDataNode (DeleteRegisteredNodeRequest) returns (SimpleResponseCode);
  // 查询数据服务列表
  rpc GetDataNodeList (EmptyGetParams) returns (GetRegisteredNodeListResponse);

  // about jobNode
  // 新增计算服务信息
  rpc SetJobNode (SetJobNodeRequest) returns (SetJobNodeResponse);
  // 修改计算服务信息
  rpc UpdateJobNode (UpdateJobNodeRequest) returns (SetJobNodeResponse);
  // 删除计算服务信息
  rpc DeleteJobNode (DeleteRegisteredNodeRequest) returns (SimpleResponseCode);
  // 查询计算服务列表
  rpc GetJobNodeList (EmptyGetParams) returns (GetRegisteredNodeListResponse);

  // about report
  // 上报任务事件
  rpc ReportTaskEvent (ReportTaskEventRequest) returns (SimpleResponseCode);
  // 上报资源使用实况
  rpc ReportTaskResourceExpense (ReportTaskResourceExpenseRequest) returns (SimpleResponseCode);

}



//  ------------------------  metadata  ------------------------

// 源数据的摘要内容 (不包含详细 列描述)
message MetaDataSummary {
  string meta_data_id = 1;           // 元数据Id
  string origin_id = 2;              // 源文件Id
  string table_name = 3;             // 元数据名称 (表名)
  string desc = 4;                   // 元数据的描述 (摘要)
  string file_path = 5;              // 源文件存放路径
  uint32 rows = 6;                   // 源文件的行数
  uint32 columns = 7;                // 源文件的列数
  uint32 size = 8;                   // 源文件的大小 (单位: byte)
  string file_type = 9;              // 源文件的类型 (目前只有 csv)
  bool   has_title = 10;             // 源文件是否包含标题
  string state = 11;                 // 元数据的状态 (create: 还未发布的新表; release: 已发布的表; revoke: 已撤销的表)
}



// 源文件的列的描述详情
message MetaDataColumnDetail {
  uint64 cindex = 1;                         // 列的索引
  string cname = 2;                          // 列名
  string ctype = 3;                          // 列类型
  uint32 csize = 4;                          // 列大小(单位: byte)
  string ccomment = 5;                       // 列描述
}

// 源文件的详情
message MetaDataDetailShow {
  MetaDataSummary               meta_summary = 1;
  repeated MetaDataColumnDetail column_meta = 2;
}


message GetMetaDataSummaryResponse {
  OrganizationIdentityInfo owner = 1;              // 元数据的拥有者
  MetaDataSummary          information = 2;        // 元文件摘要主体
}
message GetMetaDataSummaryListResponse {
  repeated GetMetaDataSummaryResponse meta_list = 1;
}

message GetMetaDataSummaryByStateRequest {
  string state = 1;
}


message GetMetaDataSummaryByOwnerRequest {
  string identity_id = 1;
}

message GetMetaDataDetailRequest {
  string identity_id = 1;
  string meta_data_id = 2;
}
message GetMetaDataDetailResponse {
  OrganizationIdentityInfo owner = 1;              // 元数据的拥有者
  MetaDataDetailShow       information = 2;        // 元文件详情主体
}



message PublishMetaDataRequest {
  OrganizationIdentityInfo owner = 1;                          // 元数据拥有者
  MetaDataDetailShow       information = 2;                    // 元数据详情
}
message PublishMetaDataResponse {
  int32  status = 1;                         // 响应码
  string msg = 2;                            // 错误信息
  string meta_data_id = 3;                   // 元数据id
}

message RevokeMetaDataRequest {
  OrganizationIdentityInfo owner = 1;                          // 元数据拥有者
  string                   meta_data_id = 2;
}



// ## 元数据 相关接口
service MetaDataService {
  // 查看全部元数据摘要列表 (不包含 列字段描述)
  rpc GetMetaDataSummaryList (EmptyGetParams) returns (GetMetaDataSummaryListResponse);
  // 查看指定状态的元数据摘要列表 (不包含 列字段描述)
  rpc GetMetaDataSummaryByState (GetMetaDataSummaryByStateRequest) returns (GetMetaDataSummaryListResponse);
  // 查看指定拥有者的元数据摘要列表 (不包含 列字段描述)
  rpc GetMetaDataSummaryByOwner (GetMetaDataSummaryByOwnerRequest) returns (GetMetaDataSummaryListResponse);
  // 查看单个元数据详情 (包含 列字段描述)
  rpc GetMetaDataDetail (GetMetaDataDetailRequest) returns (GetMetaDataDetailResponse);

  // 发布元数据  (新增和编辑 都是发布新的元数据) <底层根据 原始数据Id -- OriginId 来关联 新的MetaDataId>
  rpc PublishMetaData (PublishMetaDataRequest) returns (PublishMetaDataResponse);
  // 撤销元数据 (从底层网络撤销)
  rpc RevokeMetaData (RevokeMetaDataRequest) returns (SimpleResponseCode);

  // 分页拉取摘要列表
  // 分页拉取详情列表
}

//  ------------------------  power  ------------------------

// 单个算力摘要 (不包含 正在处理的任务信息)
message PowerSingleSummary {
  string                 job_node_id = 1;                      // 计算服务id (节点内部的)
  string                 power_id = 2;                         // 算力id
  ResourceUsedDetailShow information = 3;                      // 算力实况
  string                 state = 4;                            // 算力状态 (create: 还未发布的算力; release: 已发布的算力; revoke: 已撤销的算力)
}

//  总算力摘要
message PowerTotalSummary {
  ResourceUsedDetailShow information = 1;                 // 算力实况
  uint32                 total_task_count = 2;            // 算力上总共执行的任务数 (已完成的和正在执行的)
  string                 state = 3;                       // 算力状态 (create: 还未发布的算力; release: 已发布的算力; revoke: 已撤销的算力)
}

// 算力任务使用情况
message  PowerTaskDetail {
  uint32             total_task_count = 1;                     // 算力上总共执行的任务数 (已完成的和正在执行的)
  uint32             current_task_count = 2;                   // 算力上正在执行的任务数
  repeated PowerTask tasks = 3;                                // 算力上正在执行的任务详情信息
}

// 算力上的任务信息
message PowerTask {
  string                            task_id = 1;              // 任务Id
  OrganizationIdentityInfo          owner = 2;                // 任务发起方身份信息
  repeated OrganizationIdentityInfo patners = 3;              // 任务协作方信息
  repeated OrganizationIdentityInfo receivers = 4;            // 任务结果接收方信息
  TaskOperationCostShow             operation_cost = 5;       // 任务所需的资源大小信息
  TaskOperationCostShow             operation_spend = 6;      // 任务已经花费的资源大小信息
}




message GetPowerTotalSummaryResponse {
  OrganizationIdentityInfo owner = 1;                  // 算力拥有者信息
  PowerTotalSummary        power = 2;                  // 算力总摘要
}
message GetPowerTotalSummaryListResponse {
  repeated GetPowerTotalSummaryResponse power_list = 1;  // 全网的算力总摘要列表
}


message GetPowerSingleSummaryResponse {
  OrganizationIdentityInfo owner = 1;                  // 算力拥有者信息
  PowerSingleSummary       power = 2;                  // 算力单个摘要
}
message GetPowerSingleSummaryListResponse {
  repeated GetPowerSingleSummaryResponse power_list = 1;  // 单个节点的算力总摘要列表
}

message GetPowerTotalSummaryByStateRequest {
  string state = 1;                         // 算力状态 (create: 还未发布的算力; release: 已发布的算力; revoke: 已撤销的算力)
}

message GetPowerSingleSummaryByStateRequest {
  string state = 1;                         // 算力状态 (create: 还未发布的算力; release: 已发布的算力; revoke: 已撤销的算力)
}


message GetPowerTotalSummaryByOwnerRequest {
  string identity_id = 1;
}

message GetPowerSingleSummaryByOwnerRequest {
  string identity_id = 1;
}


message GetPowerSingleDetailRequest {
  string identity_id = 1;
  string power_id = 2;
}
message GetPowerSingleDetailResponse {
  OrganizationIdentityInfo owner = 1;              // 算力的拥有者
  PowerTaskDetail          information = 2;        // 算力详情主体
}


message PublishPowerRequest {
  OrganizationIdentityInfo owner = 1;           // 算力的拥有者
  string                   job_node_id = 2;     // 计算服务id (节点内部的)
  PurePower                information = 3;     // 发布的算力信息
}

message PublishPowerResponse {
  int32  status = 1;                         // 响应码
  string msg = 2;                            // 错误信息
  string power_id = 3;                       // 算力id
}

message RevokePowerRequest {
  OrganizationIdentityInfo owner = 1;           // 算力的拥有者
  string                   power_id = 2;        // 算力id
}

// ## 算力 相关接口
///           【注意】 算力和元数据 不一样, 对外面人来说, 算力只需要知道总的, 而元数据则需要知道单个单个的;
//                    对自己来说, 算力和元数据都需要知道单个单个的.
service PowerService {
  // 查看各个节点的总算力摘要列表 (不包含 任务描述)
  rpc GetPowerTotalSummaryList (EmptyGetParams) returns (GetPowerTotalSummaryListResponse);
  // 查看某个节点各个单算力摘要列表 (不包含 任务描述)
  rpc GetPowerSingleSummaryList (EmptyGetParams) returns (GetPowerSingleSummaryListResponse);

  // 查看指定状态的总算力摘要列表  (不包含 任务描述)
  rpc GetPowerTotalSummaryByState (GetPowerTotalSummaryByStateRequest) returns (GetPowerTotalSummaryListResponse);
  // 查看指定状态的各个单个算力摘要列表  (不包含 任务描述)
  rpc GetPowerSingleSummaryByState (GetPowerSingleSummaryByStateRequest) returns (GetPowerSingleSummaryListResponse);

  // 查看指定拥有者的总算力摘要  (不包含 任务描述)
  rpc GetPowerTotalSummaryByOwner (GetPowerTotalSummaryByOwnerRequest) returns (GetPowerTotalSummaryResponse);
  // 查看指定拥有者的单个算力摘要 (不包含 任务描述)
  rpc GetPowerSingleSummaryByOwner (GetPowerSingleSummaryByOwnerRequest) returns (GetPowerSingleSummaryListResponse);

  // 查看单个算力详情 (包含 任务描述)
  rpc GetPowerSingleDetail (GetPowerSingleDetailRequest) returns (GetPowerSingleDetailResponse);



  // 启用算力 (发布算力)
  rpc PublishPower (PublishPowerRequest) returns (PublishPowerResponse);
  // 停用算力 (撤销算力)
  rpc RevokePower (RevokePowerRequest) returns (SimpleResponseCode);
}


//  ------------------------  auth  ------------------------


message ApplyIdentityJoinRequest {
  OrganizationIdentityInfo member = 1;           // 申请准入身份
}

message RevokeIdentityJoinRequest {
  OrganizationIdentityInfo member = 1;           // 注销准入身份
}


service AuthService {

  // 数据授权申请

  // 数据授权投票

  // 申请准入网络
  rpc ApplyIdentityJoin (ApplyIdentityJoinRequest) returns (SimpleResponseCode);
  // 注销准入网络
  rpc RevokeIdentityJoin (RevokeIdentityJoinRequest) returns (SimpleResponseCode);
}






//  ------------------------  task  ------------------------

// 任务摘要 (供展示用)
message TaskSummaryShow {
  string                            task_id = 1;                         // 任务Id
  string                            task_name = 2;                       // 任务名称
  OrganizationIdentityInfo          owner = 3;                           // 任务发起者
  repeated OrganizationIdentityInfo partners = 4;                        // 任务协作者
  repeated OrganizationIdentityInfo receivers = 5;                       // 任务结果方
  string                            create_at = 6;                       // 任务发起时间
  string                            end_at = 7;                          // 任务结束时间
  string                            state = 8;                           // 任务的状态
}

// 任务详情 (供展示用)
message TaskDetailShow {
  string                            task_id = 1;                         // 任务Id
  string                            task_name = 2;                       // 任务名称
  OrganizationIdentityInfo          owner = 3;                           // 任务发起发
  OrganizationIdentityInfo          algo_supplier = 4;                   // 算法提供方
  repeated TaskDataSupplierShow     data_supplier = 5;                   // 数据提供方
  repeated TaskPowerSupplierShow    power_supplier = 6;                  // 算力提供方
  repeated OrganizationIdentityInfo receivers = 7;                       // 任务结果方
  string                            create_at = 8;                       // 任务发起时间
  string                            end_at = 9;                          // 任务结束时间
  string                            state = 10;                          // 任务的状态
  TaskOperationCostDeclare          operation_cost = 11;                 // 任务所需资源声明
}
// 任务数据提供方信息 (任务详情展示用)
message TaskDataSupplierShow {
  OrganizationIdentityInfo member_info = 1;                         // 身份信息
  string                   meta_id = 2;                             // 元数据Id
  string                   meta_name = 3;                           // 元数据名称
}
// 任务算力提供方信息 (任务详情展示用)
message TaskPowerSupplierShow {
  OrganizationIdentityInfo member_info = 1;                         // 身份信息
  ResourceUsedDetailShow   power_info = 2;                          // 算力使用情况
}

// 任务事件定义
message TaskEventShow {
  string                   type = 1;                        // 事件类型码
  string                   task_id = 2;                     // 事件对应的任务id
  OrganizationIdentityInfo owner = 3;                       // 产生事件的节点身份
  string                   content = 4;                     // 事件内容
  string                   create_at = 5;                   // 事件产生时间
}

message TaskEventDeclare {
  string type = 1;                        // 事件类型码
  string task_id = 2;                     // 事件对应的任务id
  string identity_id = 3;                 // 产生事件的节点身份
  string content = 4;                     // 事件内容
  string create_at = 5;                   // 事件产生时间
}


// 任务数据供应者信息 (任务详情定义用)
message TaskDataSupplierDeclare {
  OrganizationIdentityInfo member_info = 1;                         // 身份信息
  TaskMetaDataDeclare      meta_data_info = 2;                      // 任务使用的元数据信息
}

message TaskMetaDataDeclare {
  string          meta_data_id = 1;                                 // 元数据id
  repeated uint64 column_index_list = 2;                            // 该任务使用原始数据的第几列
}

message TaskResultReceiverDeclare {
  OrganizationIdentityInfo          member_info = 1;                       // 结果接收方身份信息
  repeated OrganizationIdentityInfo providers = 2;                         // 被接收结果的生成方身份信息
}


// 任务的所需操作成本 展示结构 (定义任务的大小)
message TaskOperationCostShow {
  uint64 cost_mem = 1;               // 任务所需的内存 (单位: byte)
  uint64 cost_processor = 2;         // 任务所需的核数 (单位: 个)
  uint64 cost_bandwidth = 3;         // 任务所需的带宽 (单位: bps)
  uint64 duration = 4;               // 任务所需的运行时长 (单位: ms)
}

// 定义任务所需资源的大小
message TaskOperationCostDeclare {
  uint64 cost_mem = 1;               // 任务所需的内存 (单位: byte)
  uint64 cost_processor = 2;         // 任务所需的核数 (单位: 个)
  uint64 cost_bandwidth = 3;         // 任务所需的带宽 (单位: bps)
  uint64 duration = 4;               // 任务所需的运行时长 (单位: ms)
}


message GetTaskSummaryListResponse {
  int32                    status = 1;                      // 响应码
  string                   msg = 2;                         // 错误信息
  repeated TaskSummaryShow task_list = 3;
}


message GetTaskJoinSummaryListRequest {
  OrganizationIdentityInfo member_info = 1;                       // 参与方身份信息
}
message GetTaskJoinSummaryResponse {
  string          role = 1;                               // 自己在任务中的角色 (owner/data_partner/job_partner/receiver)
  TaskSummaryShow task = 2;                               // 任务展示摘要
}
message GetTaskJoinSummaryListResponse {
  int32                               status = 1;                      // 响应码
  string                              msg = 2;                         // 错误信息
  repeated GetTaskJoinSummaryResponse task_list = 3;
}


message GetTaskDetailRequest {
  string task_id = 1;
}
message GetTaskDetailResponse {
  int32          status = 1;                      // 响应码
  string         msg = 2;                         // 错误信息
  TaskDetailShow information = 3;
}


message GetTaskEventListRequest {
  string task_id = 1;
}
message GetTaskEventListResponse {
  int32                  status = 1;                      // 响应码
  string                 msg = 2;                         // 错误信息
  repeated TaskEventShow task_event_list = 3;             // 任务事件列表
}


message PublishTaskDeclareRequest {
  string                             task_name = 1;                        //  任务名称
  TaskDataSupplierDeclare            owner = 2;                            //  任务发起者
  repeated TaskDataSupplierDeclare   partners = 3;                         //  任务参与方
  repeated TaskResultReceiverDeclare receivers = 4;                        //  任务结果接受者
  TaskOperationCostDeclare           operation_cost = 5;                   //  任务所需资源声明
  string                             calculate_contractcode = 6;           //  计算合约
  string                             datasplit_contractcode = 7;           //  数据分片合约
}

message PublishTaskDeclareResponse {
  int32  status = 1;                      // 响应码
  string msg = 2;                         // 错误信息
  string task_id = 3;                     // 任务id
}


// ## 任务 相关接口
service TaskService {

  // 查看全部任务 摘要列表 (浏览器用)
  rpc GetTaskSummaryList (EmptyGetParams) returns (GetTaskSummaryListResponse);
  // 查看某个节点参与过的任务 摘要列表 (管理台 计算任务, 浏览器 节点任务)
  rpc GetTaskJoinSummaryList (GetTaskJoinSummaryListRequest) returns (GetTaskJoinSummaryListResponse);
  // 查看某个任务详情 (管理台 和 浏览器用)
  rpc GetTaskDetail (GetTaskDetailRequest) returns (GetTaskDetailResponse);
  // 查看某个任务的全部事件列表
  rpc GetTaskEventList (GetTaskEventListRequest) returns (GetTaskEventListResponse);
  // 发布任务
  rpc PublishTaskDeclare (PublishTaskDeclareRequest) returns (PublishTaskDeclareResponse);

}



//  ------------------------  common  ------------------------

// 系统本身资源抽象
message ResourceUsedDetailShow {
  uint64 total_mem = 2;             // 服务系统的总内存 (单位: byte)
  uint64 used_mem = 3;              // 服务系统的已用内存 (单位: byte)
  uint64 total_processor = 4;       // 服务的总内核数 (单位: 个)
  uint64 used_processor = 5;        // 服务的已用内核数 (单位: 个)
  uint64 total_bandwidth = 6;       // 服务的总带宽数 (单位: bps)
  uint64 used_bandwidth = 7;        // 服务的已用带宽数 (单位: bps)
}

// 算力的基本仨元素
message PurePower {
  uint64 mem = 1;             // 系统的总内存 (单位: byte)
  uint64 processor = 2;       // 系统的总核数 (单位: 个)
  uint64 bandwidth = 3;       // 系统的总带宽 (单位: bps)
}

// 组织(节点)唯一标识抽象
message OrganizationIdentityInfo  {
  string name = 1;                           // 组织名称
  string node_id = 2;                        // 组织中调度服务的 nodeId
  string identity_id = 3;                    // 组织的身份标识Id
}


message DeleteRegisteredNodeRequest {
  string id = 1;                            // 种子节点的唯一Id
}


message EmptyGetParams {}

message SimpleResponseCode {
  int32  status = 1;                      // 响应码
  string msg = 2;                         // 错误信息
}
