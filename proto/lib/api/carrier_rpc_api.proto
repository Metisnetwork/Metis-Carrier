syntax = "proto3";

package rpcapi;


import "repos/protobuf/gogoproto/gogo.proto";

option go_package = "github.com/RosettaFlow/Carrier-Go/lib/rpcapi";

//  ------------------------  yarn  ------------------------

// 调度服务的信息
message YarnNodeInfo {
    string                      node_type     = 1;                             // 服务node的类型
    string                      node_id       = 2;                               // 调度服务的 nodeId, 代表整个机构的 nodeId
    string                      internal_ip   = 3;                           // 调度服务的内网 ip, 给 管理台用
    string                      external_ip   = 4;                           // 调度服务的外网 ip, 给 外部做p2p用
    string                      internal_port = 5;                         // 调度服务的内网 port, 给 管理台用
    string                      external_port = 6;                         // 调度服务的外网 port, 给 外部做p2p用
    string                      identity_type = 7;                         // 身份认证标识的类型 (ca 或者 did)
    string                      identity_id   = 8;                           // 身份认证标识的id
    YarnNodeSysInfo             info          = 9;                                  // 调度服务系统本身资源信息
    repeated YarnRegisteredPeer peers         = 10;                                // 调度服务上被注册的 计算or数据服务节点信息
    string                      state         = 11;                                // 调度服务自身的状态信息 (active: 活跃; leave: 离开网络; join: 加入网络 unuseful: 不可用)
}


// 调度服务的系统资源信息
message YarnNodeSysInfo {
    string name            = 1;                  // 调度服务系统名称
    string total_mem       = 2;             // 调度服务系统的总内存
    string used_mem        = 3;              // 调度服务系统的已用内存
    string total_processor = 4;       // 调度服务的总内核数
    string used_processor  = 5;        // 调度服务的已用内核数
    string total_bandwidth = 6;       // 调度服务的总带宽数
    string used_bandwidth  = 7;        // 调度服务的已用带宽数
}


// 调度服务上被注册的资源节点信息
message YarnRegisteredPeer {
    string node_type     = 1;                     // 计算or数据服务node的类型
    string id            = 2;                            // 计算or数据服务的唯一Id
    string internal_ip   = 3;                   // 计算or数据服务的内网 ip, 给 管理台用
    string external_ip   = 4;                   // 计算or数据服务的外网 ip, 给 多方协作任务用
    string internal_port = 5;                 // 计算or数据服务的内网 port, 给 管理台用
    string external_port = 6;                 // 计算or数据服务的外网 port, 给 多方协作任务用
}

// 调度服务上的 计算服务详情信息
message YarnRegisteredJobNode {
    string                       id            = 2;                            // 计算服务的唯一Id
    string                       internal_ip   = 3;                   // 计算服务的内网 ip, 给 管理台用
    string                       external_ip   = 4;                   // 计算服务的外网 ip, 给 多方协作任务用
    string                       internal_port = 5;                 // 计算服务的内网 port, 给 管理台用
    string                       external_port = 6;                 // 计算服务的外网 port, 给 多方协作任务用
    ResourceUsedDetail           info          = 7;                          // 计算服务的算力资源使用情况
    uint64                       duration      = 8;                      // 计算服务远行时长 (从加入网络中的时间点计算)
    YarnRegisteredJobNodeTaskIds task          = 9;               // 计算服务上的任务Id和个数
}

message YarnRegisteredJobNodeTaskIds {
    uint32          count    = 1;
    repeated string task_ids = 2;
}


message YarnRegisteredDataNode {
    string                      id            = 2;                            // 数据服务的唯一Id
    string                      internal_ip   = 3;                   // 数据服务的内网 ip, 给 管理台用
    string                      external_ip   = 4;                   // 数据服务的外网 ip, 给 多方协作任务用
    string                      internal_port = 5;                 // 数据服务的内网 port, 给 管理台用
    string                      external_port = 6;                 // 数据服务的外网 port, 给 多方协作任务用
    ResourceUsedDetail          info          = 7;                          // 数据服务的算力资源使用情况
    uint64                      duration      = 8;                      // 数据服务远行时长 (从加入网络中的时间点计算)
    YarnRegisteredDataNodeDelta delta         = 9;                // 数据服务上的文件统计信息
}

message YarnRegisteredDataNodeDelta {
    uint64 fileCount     = 1;                           // 数据服务对外公开的源文件个数
    string fileTotalSize = 2;                       // 数据服务对外公开的源文件总大小
}


message GetNodeInfoRequest {}
message GetRegisteredPeersRequest {}


message GetNodeInfoResponse {
    int32        status = 1;                        // 响应码
    string       msg    = 2;                        // 错误信息
    YarnNodeInfo info   = 3;                        // 调度服务系统信息
}

message GetRegisteredPeersResponse {
    int32                           status     = 1;                                  // 响应码
    string                          msg        = 2;                                  // 错误信息
    repeated YarnRegisteredJobNode  job_nodes  = 3;         // 注册在调度服务上的 计算服务信息
    repeated YarnRegisteredDataNode data_nodes = 4;       // 注册在调度服务上的 数据服务信息
}

// ## 调度服务 - 系统状态 接口
service YarnService {
  rpc GetNodeInfo (GetNodeInfoRequest) returns (GetNodeInfoResponse);
  rpc GetRegisteredPeers (GetRegisteredPeersRequest) returns (GetRegisteredPeersResponse);
}



//  ------------------------  metadata  ------------------------



//  ------------------------  power  ------------------------


//  ------------------------  auth  ------------------------



//  ------------------------  task  ------------------------


//  ------------------------  common  ------------------------

message ResourceUsedDetail {
    string total_mem       = 2;             // 服务系统的总内存
    string used_mem        = 3;              // 服务系统的已用内存
    string total_processor = 4;       // 服务的总内核数
    string used_processor  = 5;        // 服务的已用内核数
    string total_bandwidth = 6;       // 服务的总带宽数
    string used_bandwidth  = 7;        // 服务的已用带宽数
}
