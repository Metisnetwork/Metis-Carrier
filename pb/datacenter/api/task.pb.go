// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: datacenter/api/task.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	types "pb/carrier/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SaveTaskRequest struct {
	Task                 *types.TaskPB `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SaveTaskRequest) Reset()         { *m = SaveTaskRequest{} }
func (m *SaveTaskRequest) String() string { return proto.CompactTextString(m) }
func (*SaveTaskRequest) ProtoMessage()    {}
func (*SaveTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9efb50adebb0c8, []int{0}
}
func (m *SaveTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveTaskRequest.Merge(m, src)
}
func (m *SaveTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveTaskRequest proto.InternalMessageInfo

func (m *SaveTaskRequest) GetTask() *types.TaskPB {
	if m != nil {
		return m.Task
	}
	return nil
}

type ListTaskByTaskIdsRequest struct {
	TaskIds              []string `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTaskByTaskIdsRequest) Reset()         { *m = ListTaskByTaskIdsRequest{} }
func (m *ListTaskByTaskIdsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTaskByTaskIdsRequest) ProtoMessage()    {}
func (*ListTaskByTaskIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9efb50adebb0c8, []int{1}
}
func (m *ListTaskByTaskIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskByTaskIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskByTaskIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskByTaskIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskByTaskIdsRequest.Merge(m, src)
}
func (m *ListTaskByTaskIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskByTaskIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskByTaskIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskByTaskIdsRequest proto.InternalMessageInfo

func (m *ListTaskByTaskIdsRequest) GetTaskIds() []string {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

type ListTaskByIdentityRequest struct {
	IdentityId           string   `protobuf:"bytes,1,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	LastUpdated          uint64   `protobuf:"varint,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	PageSize             uint64   `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTaskByIdentityRequest) Reset()         { *m = ListTaskByIdentityRequest{} }
func (m *ListTaskByIdentityRequest) String() string { return proto.CompactTextString(m) }
func (*ListTaskByIdentityRequest) ProtoMessage()    {}
func (*ListTaskByIdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9efb50adebb0c8, []int{2}
}
func (m *ListTaskByIdentityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskByIdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskByIdentityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskByIdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskByIdentityRequest.Merge(m, src)
}
func (m *ListTaskByIdentityRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskByIdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskByIdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskByIdentityRequest proto.InternalMessageInfo

func (m *ListTaskByIdentityRequest) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *ListTaskByIdentityRequest) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *ListTaskByIdentityRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListTaskRequest struct {
	LastUpdated          uint64   `protobuf:"varint,1,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	PageSize             uint64   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTaskRequest) Reset()         { *m = ListTaskRequest{} }
func (m *ListTaskRequest) String() string { return proto.CompactTextString(m) }
func (*ListTaskRequest) ProtoMessage()    {}
func (*ListTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9efb50adebb0c8, []int{3}
}
func (m *ListTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskRequest.Merge(m, src)
}
func (m *ListTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskRequest proto.InternalMessageInfo

func (m *ListTaskRequest) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *ListTaskRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListTaskResponse struct {
	Tasks                []*types.TaskPB `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListTaskResponse) Reset()         { *m = ListTaskResponse{} }
func (m *ListTaskResponse) String() string { return proto.CompactTextString(m) }
func (*ListTaskResponse) ProtoMessage()    {}
func (*ListTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9efb50adebb0c8, []int{4}
}
func (m *ListTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskResponse.Merge(m, src)
}
func (m *ListTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskResponse proto.InternalMessageInfo

func (m *ListTaskResponse) GetTasks() []*types.TaskPB {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type GetTaskDetailRequest struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskDetailRequest) Reset()         { *m = GetTaskDetailRequest{} }
func (m *GetTaskDetailRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskDetailRequest) ProtoMessage()    {}
func (*GetTaskDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9efb50adebb0c8, []int{5}
}
func (m *GetTaskDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskDetailRequest.Merge(m, src)
}
func (m *GetTaskDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskDetailRequest proto.InternalMessageInfo

func (m *GetTaskDetailRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type GetTaskDetailResponse struct {
	Task                 *types.TaskPB `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetTaskDetailResponse) Reset()         { *m = GetTaskDetailResponse{} }
func (m *GetTaskDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetTaskDetailResponse) ProtoMessage()    {}
func (*GetTaskDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9efb50adebb0c8, []int{6}
}
func (m *GetTaskDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskDetailResponse.Merge(m, src)
}
func (m *GetTaskDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskDetailResponse proto.InternalMessageInfo

func (m *GetTaskDetailResponse) GetTask() *types.TaskPB {
	if m != nil {
		return m.Task
	}
	return nil
}

type ListTaskEventRequest struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTaskEventRequest) Reset()         { *m = ListTaskEventRequest{} }
func (m *ListTaskEventRequest) String() string { return proto.CompactTextString(m) }
func (*ListTaskEventRequest) ProtoMessage()    {}
func (*ListTaskEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9efb50adebb0c8, []int{7}
}
func (m *ListTaskEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskEventRequest.Merge(m, src)
}
func (m *ListTaskEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskEventRequest proto.InternalMessageInfo

func (m *ListTaskEventRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type ListTaskEventResponse struct {
	// 错误码，0 成功，1 异常
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 错误信息
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 事件列表
	TaskEvents           []*types.TaskEvent `protobuf:"bytes,3,rep,name=task_events,json=taskEvents,proto3" json:"task_events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListTaskEventResponse) Reset()         { *m = ListTaskEventResponse{} }
func (m *ListTaskEventResponse) String() string { return proto.CompactTextString(m) }
func (*ListTaskEventResponse) ProtoMessage()    {}
func (*ListTaskEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9efb50adebb0c8, []int{8}
}
func (m *ListTaskEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskEventResponse.Merge(m, src)
}
func (m *ListTaskEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskEventResponse proto.InternalMessageInfo

func (m *ListTaskEventResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ListTaskEventResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ListTaskEventResponse) GetTaskEvents() []*types.TaskEvent {
	if m != nil {
		return m.TaskEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*SaveTaskRequest)(nil), "datacenter.api.SaveTaskRequest")
	proto.RegisterType((*ListTaskByTaskIdsRequest)(nil), "datacenter.api.ListTaskByTaskIdsRequest")
	proto.RegisterType((*ListTaskByIdentityRequest)(nil), "datacenter.api.ListTaskByIdentityRequest")
	proto.RegisterType((*ListTaskRequest)(nil), "datacenter.api.ListTaskRequest")
	proto.RegisterType((*ListTaskResponse)(nil), "datacenter.api.ListTaskResponse")
	proto.RegisterType((*GetTaskDetailRequest)(nil), "datacenter.api.GetTaskDetailRequest")
	proto.RegisterType((*GetTaskDetailResponse)(nil), "datacenter.api.GetTaskDetailResponse")
	proto.RegisterType((*ListTaskEventRequest)(nil), "datacenter.api.ListTaskEventRequest")
	proto.RegisterType((*ListTaskEventResponse)(nil), "datacenter.api.ListTaskEventResponse")
}

func init() { proto.RegisterFile("datacenter/api/task.proto", fileDescriptor_1c9efb50adebb0c8) }

var fileDescriptor_1c9efb50adebb0c8 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdf, 0x8a, 0xd3, 0x4c,
	0x14, 0x27, 0xdb, 0x6e, 0xb7, 0x3d, 0xf9, 0xf6, 0xdb, 0xdd, 0x61, 0xab, 0x69, 0xd4, 0xb6, 0x06,
	0x85, 0x2e, 0x42, 0x02, 0x2b, 0x5e, 0x08, 0x82, 0x50, 0x14, 0xa9, 0x28, 0x68, 0xaa, 0x37, 0xb2,
	0x10, 0x66, 0x9b, 0xc3, 0x32, 0x6c, 0x9b, 0xc4, 0xcc, 0xb4, 0xd0, 0x65, 0x1f, 0xc8, 0x47, 0xf1,
	0xd2, 0x47, 0x90, 0x3e, 0x89, 0xcc, 0x24, 0x63, 0x49, 0xd2, 0xd2, 0xf5, 0xa6, 0xa4, 0x67, 0x7e,
	0x7f, 0xce, 0xfc, 0x72, 0x4e, 0xa0, 0x13, 0x52, 0x41, 0x27, 0x18, 0x09, 0x4c, 0x3d, 0x9a, 0x30,
	0x4f, 0x50, 0x7e, 0xed, 0x26, 0x69, 0x2c, 0x62, 0xf2, 0xff, 0xfa, 0xc8, 0xa5, 0x09, 0xb3, 0xed,
	0x09, 0x4d, 0x53, 0x86, 0xa9, 0x27, 0x96, 0x09, 0x72, 0x6f, 0x12, 0xcf, 0x66, 0x71, 0x94, 0x61,
	0xed, 0x87, 0xc5, 0x33, 0xa9, 0x22, 0xd9, 0xd9, 0xa9, 0xf3, 0x0a, 0x8e, 0xc6, 0x74, 0x81, 0x5f,
	0x28, 0xbf, 0xf6, 0xf1, 0xfb, 0x1c, 0xb9, 0x20, 0x67, 0x50, 0x97, 0x20, 0xcb, 0xe8, 0x1b, 0x03,
	0xf3, 0xbc, 0xed, 0xe6, 0x7c, 0x57, 0xf1, 0x5d, 0x89, 0xfc, 0x34, 0xf4, 0x15, 0xc4, 0x79, 0x01,
	0xd6, 0x07, 0xc6, 0x85, 0xac, 0x0d, 0x97, 0xf2, 0x77, 0x14, 0x72, 0x2d, 0xd3, 0x81, 0xa6, 0xc4,
	0x04, 0x2c, 0xe4, 0x96, 0xd1, 0xaf, 0x0d, 0x5a, 0xfe, 0x81, 0xc8, 0x10, 0xce, 0x2d, 0x74, 0xd6,
	0xb4, 0x51, 0x88, 0x91, 0x60, 0x62, 0xa9, 0x79, 0x3d, 0x30, 0x59, 0x5e, 0x0a, 0x58, 0xa8, 0xba,
	0x68, 0xf9, 0xa0, 0x4b, 0xa3, 0x90, 0x3c, 0x86, 0xff, 0xa6, 0x94, 0x8b, 0x60, 0x9e, 0x84, 0x54,
	0x60, 0x68, 0xed, 0xf5, 0x8d, 0x41, 0xdd, 0x37, 0x65, 0xed, 0x6b, 0x56, 0x22, 0x0f, 0xa0, 0x95,
	0xd0, 0x2b, 0x0c, 0x38, 0xbb, 0x41, 0xab, 0xa6, 0xce, 0x9b, 0xb2, 0x30, 0x66, 0x37, 0xe8, 0x7c,
	0x86, 0x23, 0xed, 0xae, 0x3d, 0xcb, 0x92, 0xc6, 0x0e, 0xc9, 0xbd, 0x92, 0xe4, 0x6b, 0x38, 0x5e,
	0x4b, 0xf2, 0x24, 0x8e, 0x38, 0x92, 0x67, 0xb0, 0x2f, 0xef, 0x9b, 0x5d, 0x7e, 0x6b, 0x8e, 0x19,
	0xc6, 0xf1, 0xe0, 0xf4, 0x1d, 0x2a, 0xfe, 0x1b, 0x14, 0x94, 0x4d, 0x75, 0x63, 0xf7, 0xe1, 0x20,
	0x0f, 0x31, 0x0f, 0xa2, 0x91, 0x65, 0xe8, 0x0c, 0xa1, 0x5d, 0x22, 0xe4, 0xb6, 0xff, 0xf0, 0xf6,
	0x3c, 0x38, 0xd5, 0x5d, 0xbf, 0x5d, 0x60, 0x24, 0x76, 0x9a, 0xde, 0x42, 0xbb, 0x44, 0xc8, 0x4d,
	0xef, 0x41, 0x83, 0x0b, 0x2a, 0xe6, 0x5c, 0x11, 0xf6, 0xfd, 0xfc, 0x1f, 0x39, 0x86, 0xda, 0x8c,
	0x5f, 0xa9, 0xb8, 0x5a, 0xbe, 0x7c, 0x24, 0x2f, 0xc1, 0x54, 0xda, 0x28, 0xf9, 0xdc, 0xaa, 0xa9,
	0x6c, 0xac, 0x0d, 0x5d, 0x66, 0x06, 0x20, 0xf4, 0x23, 0x3f, 0xff, 0x51, 0x07, 0x53, 0x9e, 0x8c,
	0x31, 0x5d, 0xb0, 0x09, 0x92, 0xf7, 0xd0, 0xd4, 0xa3, 0x4b, 0x7a, 0x6e, 0x71, 0x23, 0xdc, 0xd2,
	0x50, 0xdb, 0x8f, 0x4a, 0x16, 0x63, 0x36, 0x4b, 0xa6, 0xf8, 0xf7, 0x02, 0x17, 0x70, 0x58, 0x88,
	0x93, 0x3c, 0x29, 0x0b, 0x6e, 0x7a, 0x3d, 0xf6, 0xd3, 0x1d, 0xa8, 0x5c, 0xfd, 0x23, 0x34, 0x75,
	0x6e, 0xd5, 0x4e, 0x4b, 0xb3, 0x68, 0xf7, 0xb7, 0x03, 0x72, 0x39, 0x0a, 0xa4, 0xba, 0x3e, 0xe4,
	0x6c, 0x1b, 0xaf, 0xb2, 0x62, 0x77, 0xb0, 0x08, 0xe0, 0xa4, 0xb2, 0xd8, 0x64, 0xb0, 0xdd, 0xa1,
	0xb8, 0xfb, 0x77, 0x30, 0xb8, 0x80, 0xc3, 0xc2, 0x28, 0x55, 0x03, 0xdf, 0x34, 0x9a, 0xd5, 0xc0,
	0x37, 0xce, 0xe3, 0xb0, 0xf7, 0x73, 0xd5, 0x35, 0x7e, 0xad, 0xba, 0xc6, 0xef, 0x55, 0xd7, 0xf8,
	0x76, 0x92, 0x5c, 0x7a, 0xc5, 0x6f, 0xe9, 0x65, 0x43, 0x7d, 0xfd, 0x9e, 0xff, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x5d, 0x07, 0x41, 0xc0, 0x64, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	// 存储任务
	SaveTask(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	// 查询任务详情（任务ID、节点ID、参与方标识）
	GetTaskDetail(ctx context.Context, in *GetTaskDetailRequest, opts ...grpc.CallOption) (*GetTaskDetailResponse, error)
	// 查询任务列表
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error)
	// 根据组织身份查询任务列表
	ListTaskByIdentity(ctx context.Context, in *ListTaskByIdentityRequest, opts ...grpc.CallOption) (*ListTaskResponse, error)
	// 根据任务Ids查询任务列表 (v3.0)
	ListTaskByTaskIds(ctx context.Context, in *ListTaskByTaskIdsRequest, opts ...grpc.CallOption) (*ListTaskResponse, error)
	// 查询任务的事件列表
	ListTaskEvent(ctx context.Context, in *ListTaskEventRequest, opts ...grpc.CallOption) (*ListTaskEventResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) SaveTask(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/datacenter.api.TaskService/SaveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskDetail(ctx context.Context, in *GetTaskDetailRequest, opts ...grpc.CallOption) (*GetTaskDetailResponse, error) {
	out := new(GetTaskDetailResponse)
	err := c.cc.Invoke(ctx, "/datacenter.api.TaskService/GetTaskDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.cc.Invoke(ctx, "/datacenter.api.TaskService/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTaskByIdentity(ctx context.Context, in *ListTaskByIdentityRequest, opts ...grpc.CallOption) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.cc.Invoke(ctx, "/datacenter.api.TaskService/ListTaskByIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTaskByTaskIds(ctx context.Context, in *ListTaskByTaskIdsRequest, opts ...grpc.CallOption) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.cc.Invoke(ctx, "/datacenter.api.TaskService/ListTaskByTaskIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTaskEvent(ctx context.Context, in *ListTaskEventRequest, opts ...grpc.CallOption) (*ListTaskEventResponse, error) {
	out := new(ListTaskEventResponse)
	err := c.cc.Invoke(ctx, "/datacenter.api.TaskService/ListTaskEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	// 存储任务
	SaveTask(context.Context, *SaveTaskRequest) (*types.SimpleResponse, error)
	// 查询任务详情（任务ID、节点ID、参与方标识）
	GetTaskDetail(context.Context, *GetTaskDetailRequest) (*GetTaskDetailResponse, error)
	// 查询任务列表
	ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error)
	// 根据组织身份查询任务列表
	ListTaskByIdentity(context.Context, *ListTaskByIdentityRequest) (*ListTaskResponse, error)
	// 根据任务Ids查询任务列表 (v3.0)
	ListTaskByTaskIds(context.Context, *ListTaskByTaskIdsRequest) (*ListTaskResponse, error)
	// 查询任务的事件列表
	ListTaskEvent(context.Context, *ListTaskEventRequest) (*ListTaskEventResponse, error)
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) SaveTask(ctx context.Context, req *SaveTaskRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTask not implemented")
}
func (*UnimplementedTaskServiceServer) GetTaskDetail(ctx context.Context, req *GetTaskDetailRequest) (*GetTaskDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskDetail not implemented")
}
func (*UnimplementedTaskServiceServer) ListTask(ctx context.Context, req *ListTaskRequest) (*ListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (*UnimplementedTaskServiceServer) ListTaskByIdentity(ctx context.Context, req *ListTaskByIdentityRequest) (*ListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskByIdentity not implemented")
}
func (*UnimplementedTaskServiceServer) ListTaskByTaskIds(ctx context.Context, req *ListTaskByTaskIdsRequest) (*ListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskByTaskIds not implemented")
}
func (*UnimplementedTaskServiceServer) ListTaskEvent(ctx context.Context, req *ListTaskEventRequest) (*ListTaskEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskEvent not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_SaveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacenter.api.TaskService/SaveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTask(ctx, req.(*SaveTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacenter.api.TaskService/GetTaskDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskDetail(ctx, req.(*GetTaskDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacenter.api.TaskService/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTaskByIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskByIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTaskByIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacenter.api.TaskService/ListTaskByIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTaskByIdentity(ctx, req.(*ListTaskByIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTaskByTaskIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskByTaskIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTaskByTaskIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacenter.api.TaskService/ListTaskByTaskIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTaskByTaskIds(ctx, req.(*ListTaskByTaskIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTaskEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTaskEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacenter.api.TaskService/ListTaskEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTaskEvent(ctx, req.(*ListTaskEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datacenter.api.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTask",
			Handler:    _TaskService_SaveTask_Handler,
		},
		{
			MethodName: "GetTaskDetail",
			Handler:    _TaskService_GetTaskDetail_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _TaskService_ListTask_Handler,
		},
		{
			MethodName: "ListTaskByIdentity",
			Handler:    _TaskService_ListTaskByIdentity_Handler,
		},
		{
			MethodName: "ListTaskByTaskIds",
			Handler:    _TaskService_ListTaskByTaskIds_Handler,
		},
		{
			MethodName: "ListTaskEvent",
			Handler:    _TaskService_ListTaskEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datacenter/api/task.proto",
}

func (m *SaveTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskByTaskIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskByTaskIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskByTaskIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskIds) > 0 {
		for iNdEx := len(m.TaskIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskIds[iNdEx])
			copy(dAtA[i:], m.TaskIds[iNdEx])
			i = encodeVarintTask(dAtA, i, uint64(len(m.TaskIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskByIdentityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskByIdentityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskByIdentityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.LastUpdated != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.LastUpdated))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.LastUpdated != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.LastUpdated))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskEvents) > 0 {
		for iNdEx := len(m.TaskEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SaveTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTaskByTaskIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskIds) > 0 {
		for _, s := range m.TaskIds {
			l = len(s)
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTaskByIdentityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.LastUpdated != 0 {
		n += 1 + sovTask(uint64(m.LastUpdated))
	}
	if m.PageSize != 0 {
		n += 1 + sovTask(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastUpdated != 0 {
		n += 1 + sovTask(uint64(m.LastUpdated))
	}
	if m.PageSize != 0 {
		n += 1 + sovTask(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTaskEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTaskEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTask(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.TaskEvents) > 0 {
		for _, e := range m.TaskEvents {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SaveTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &types.TaskPB{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskByTaskIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskByTaskIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskByTaskIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskIds = append(m.TaskIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskByIdentityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskByIdentityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskByIdentityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &types.TaskPB{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &types.TaskPB{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskEvents = append(m.TaskEvents, &types.TaskEvent{})
			if err := m.TaskEvents[len(m.TaskEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
