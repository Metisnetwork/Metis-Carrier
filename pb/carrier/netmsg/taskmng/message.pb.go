// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carrier/netmsg/taskmng/message.proto

package taskmng

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	common "pb/carrier/netmsg/common"
	_ "pb/carrier/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 参与方反馈 各自对某个task的执行结果 (发给发起方)
type TaskResultMsg struct {
	MsgOption            *common.MsgOption `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty" ssz-max:"16777216"`
	TaskEventList        []*TaskEvent      `protobuf:"bytes,2,rep,name=task_event_list,json=taskEventList,proto3" json:"task_event_list,omitempty" ssz-max:"16777216"`
	CreateAt             uint64            `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" ssz-size:"8"`
	Sign                 []byte            `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty" ssz-max:"1024"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TaskResultMsg) Reset()         { *m = TaskResultMsg{} }
func (m *TaskResultMsg) String() string { return proto.CompactTextString(m) }
func (*TaskResultMsg) ProtoMessage()    {}
func (*TaskResultMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a49c43eb03ee350, []int{0}
}
func (m *TaskResultMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskResultMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskResultMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskResultMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResultMsg.Merge(m, src)
}
func (m *TaskResultMsg) XXX_Size() int {
	return m.Size()
}
func (m *TaskResultMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResultMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResultMsg proto.InternalMessageInfo

func (m *TaskResultMsg) GetMsgOption() *common.MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *TaskResultMsg) GetTaskEventList() []*TaskEvent {
	if m != nil {
		return m.TaskEventList
	}
	return nil
}

func (m *TaskResultMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *TaskResultMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type TaskEvent struct {
	Type                 []byte   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" ssz-max:"32"`
	TaskId               []byte   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" ssz-max:"128"`
	IdentityId           []byte   `protobuf:"bytes,3,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty" ssz-max:"1024"`
	PartyId              []byte   `protobuf:"bytes,4,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty" ssz-max:"32"`
	Content              []byte   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty" ssz-max:"2048"`
	CreateAt             uint64   `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" ssz-size:"8"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskEvent) Reset()         { *m = TaskEvent{} }
func (m *TaskEvent) String() string { return proto.CompactTextString(m) }
func (*TaskEvent) ProtoMessage()    {}
func (*TaskEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a49c43eb03ee350, []int{1}
}
func (m *TaskEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEvent.Merge(m, src)
}
func (m *TaskEvent) XXX_Size() int {
	return m.Size()
}
func (m *TaskEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEvent proto.InternalMessageInfo

func (m *TaskEvent) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TaskEvent) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskEvent) GetIdentityId() []byte {
	if m != nil {
		return m.IdentityId
	}
	return nil
}

func (m *TaskEvent) GetPartyId() []byte {
	if m != nil {
		return m.PartyId
	}
	return nil
}

func (m *TaskEvent) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *TaskEvent) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

// 参与方 返回task的实时资源消耗
type TaskResourceUsageMsg struct {
	MsgOption            *common.MsgOption     `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty" ssz-max:"16777216"`
	TaskId               []byte                `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" ssz-max:"128"`
	Usage                *common.ResourceUsage `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	CreateAt             uint64                `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" ssz-size:"8"`
	Sign                 []byte                `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty" ssz-max:"1024"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TaskResourceUsageMsg) Reset()         { *m = TaskResourceUsageMsg{} }
func (m *TaskResourceUsageMsg) String() string { return proto.CompactTextString(m) }
func (*TaskResourceUsageMsg) ProtoMessage()    {}
func (*TaskResourceUsageMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a49c43eb03ee350, []int{2}
}
func (m *TaskResourceUsageMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskResourceUsageMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskResourceUsageMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskResourceUsageMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResourceUsageMsg.Merge(m, src)
}
func (m *TaskResourceUsageMsg) XXX_Size() int {
	return m.Size()
}
func (m *TaskResourceUsageMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResourceUsageMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResourceUsageMsg proto.InternalMessageInfo

func (m *TaskResourceUsageMsg) GetMsgOption() *common.MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *TaskResourceUsageMsg) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskResourceUsageMsg) GetUsage() *common.ResourceUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *TaskResourceUsageMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *TaskResourceUsageMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// 任务终止消息
type TaskTerminateMsg struct {
	MsgOption            *common.MsgOption `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty" ssz-max:"16777216"`
	TaskId               []byte            `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" ssz-max:"128"`
	CreateAt             uint64            `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" ssz-size:"8"`
	Sign                 []byte            `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty" ssz-max:"1024"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TaskTerminateMsg) Reset()         { *m = TaskTerminateMsg{} }
func (m *TaskTerminateMsg) String() string { return proto.CompactTextString(m) }
func (*TaskTerminateMsg) ProtoMessage()    {}
func (*TaskTerminateMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a49c43eb03ee350, []int{3}
}
func (m *TaskTerminateMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskTerminateMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskTerminateMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskTerminateMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskTerminateMsg.Merge(m, src)
}
func (m *TaskTerminateMsg) XXX_Size() int {
	return m.Size()
}
func (m *TaskTerminateMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskTerminateMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TaskTerminateMsg proto.InternalMessageInfo

func (m *TaskTerminateMsg) GetMsgOption() *common.MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *TaskTerminateMsg) GetTaskId() []byte {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskTerminateMsg) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *TaskTerminateMsg) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskResultMsg)(nil), "carrier.netmsg.taskmng.TaskResultMsg")
	proto.RegisterType((*TaskEvent)(nil), "carrier.netmsg.taskmng.TaskEvent")
	proto.RegisterType((*TaskResourceUsageMsg)(nil), "carrier.netmsg.taskmng.TaskResourceUsageMsg")
	proto.RegisterType((*TaskTerminateMsg)(nil), "carrier.netmsg.taskmng.TaskTerminateMsg")
}

func init() {
	proto.RegisterFile("carrier/netmsg/taskmng/message.proto", fileDescriptor_2a49c43eb03ee350)
}

var fileDescriptor_2a49c43eb03ee350 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xc1, 0x8a, 0xd3, 0x40,
	0x18, 0xc7, 0x49, 0x9b, 0xb6, 0xdb, 0x69, 0xab, 0xeb, 0x20, 0x4b, 0x5c, 0xa4, 0x8d, 0xb3, 0x45,
	0x8b, 0xba, 0xc9, 0x6e, 0xba, 0x6c, 0x4b, 0x6f, 0x16, 0x3c, 0x14, 0x5c, 0x84, 0xb0, 0x22, 0x78,
	0x29, 0xd3, 0x64, 0x0c, 0xc3, 0x6e, 0x66, 0x42, 0x66, 0x2a, 0xee, 0x3e, 0x8b, 0x27, 0x1f, 0xc0,
	0xe7, 0xf0, 0xe8, 0x13, 0x14, 0xe9, 0x03, 0x78, 0xe8, 0x13, 0xc8, 0x4c, 0x1a, 0x4b, 0x97, 0x96,
	0xd5, 0xc3, 0x82, 0xb7, 0x84, 0xf9, 0x7d, 0xdf, 0xf7, 0xcf, 0x8f, 0x2f, 0x03, 0xda, 0x01, 0x4e,
	0x53, 0x4a, 0x52, 0x97, 0x11, 0x19, 0x8b, 0xc8, 0x95, 0x58, 0x5c, 0xc4, 0x2c, 0x72, 0x63, 0x22,
	0x04, 0x8e, 0x88, 0x93, 0xa4, 0x5c, 0x72, 0xb8, 0xb7, 0xa4, 0x9c, 0x8c, 0x72, 0x96, 0xd4, 0xfe,
	0x41, 0x4a, 0x12, 0x2e, 0x5c, 0x0d, 0x4d, 0xa6, 0x1f, 0xdd, 0x88, 0x47, 0x5c, 0xbf, 0xe8, 0xa7,
	0xac, 0x78, 0xff, 0x71, 0x3e, 0x42, 0x5e, 0x25, 0x44, 0xe8, 0x09, 0x21, 0x96, 0x78, 0x79, 0x7a,
	0x70, 0x23, 0x40, 0xc0, 0xe3, 0x98, 0xb3, 0xf5, 0xf9, 0xe8, 0x6b, 0x01, 0x34, 0xce, 0xb1, 0xb8,
	0xf0, 0x89, 0x98, 0x5e, 0xca, 0x33, 0x11, 0xc1, 0xf7, 0x00, 0xc4, 0x22, 0x1a, 0xf3, 0x44, 0x52,
	0xce, 0x2c, 0xc3, 0x36, 0x3a, 0x35, 0xcf, 0x76, 0x6e, 0xc4, 0xcc, 0x7a, 0x39, 0x67, 0x22, 0x7a,
	0xab, 0xb9, 0xe1, 0xde, 0x62, 0xd6, 0x82, 0x42, 0x5c, 0x1f, 0xc6, 0xf8, 0xf3, 0x00, 0x1d, 0x9f,
	0xf6, 0x7a, 0x3d, 0xef, 0xf8, 0x14, 0xf9, 0xd5, 0x38, 0x47, 0x20, 0x06, 0xf7, 0x55, 0xc2, 0x31,
	0xf9, 0x44, 0x98, 0x1c, 0x5f, 0x52, 0x21, 0xad, 0x82, 0x5d, 0xec, 0xd4, 0xbc, 0x27, 0xce, 0x66,
	0x09, 0x8e, 0x0a, 0xf6, 0x5a, 0xd1, 0x5b, 0xdb, 0x37, 0x64, 0x8e, 0xbc, 0xa1, 0x42, 0xc2, 0x43,
	0x50, 0x0d, 0x52, 0x82, 0x25, 0x19, 0x63, 0x69, 0x15, 0x6d, 0xa3, 0x63, 0x0e, 0x77, 0x17, 0xb3,
	0x56, 0x5d, 0x55, 0x0a, 0x7a, 0x4d, 0x06, 0xa8, 0x8f, 0xfc, 0x9d, 0x0c, 0x79, 0x25, 0xe1, 0x53,
	0x60, 0x0a, 0x1a, 0x31, 0xcb, 0xb4, 0x8d, 0x4e, 0x7d, 0x08, 0x17, 0xb3, 0xd6, 0xbd, 0xd5, 0x8c,
	0x23, 0xef, 0x04, 0xf9, 0xfa, 0x1c, 0x7d, 0x29, 0x80, 0xea, 0x9f, 0x2c, 0xb0, 0x0d, 0x4c, 0xe5,
	0x5b, 0xab, 0xa9, 0xaf, 0xfa, 0xeb, 0xaa, 0xae, 0x87, 0x7c, 0x7d, 0x0a, 0x9f, 0x83, 0x8a, 0xfe,
	0x5a, 0x1a, 0x5a, 0x05, 0x0d, 0x3e, 0x58, 0xcc, 0x5a, 0x8d, 0x55, 0x7b, 0xaf, 0x8f, 0xfc, 0xb2,
	0x22, 0x46, 0x21, 0xec, 0x82, 0x1a, 0x0d, 0x09, 0x93, 0x54, 0x5e, 0x29, 0xbe, 0xb8, 0x35, 0x0e,
	0xc8, 0xb1, 0x51, 0x08, 0x5f, 0x80, 0x9d, 0x04, 0xa7, 0x59, 0x85, 0xb9, 0x25, 0x4a, 0x45, 0x13,
	0xa3, 0x10, 0xbe, 0x04, 0x95, 0x80, 0x33, 0x49, 0x98, 0xb4, 0x4a, 0x1b, 0xba, 0x7b, 0x47, 0x27,
	0x7d, 0xe4, 0xe7, 0xc8, 0xba, 0xc6, 0xf2, 0x6d, 0x1a, 0xd1, 0xb7, 0x02, 0x78, 0xb8, 0xdc, 0x21,
	0x3e, 0x4d, 0x03, 0xf2, 0x4e, 0xed, 0xd7, 0x9d, 0xae, 0xd2, 0xbf, 0xc8, 0x1d, 0x80, 0xd2, 0x54,
	0x05, 0xd2, 0x5a, 0x6b, 0x5e, 0x7b, 0xcb, 0xfc, 0xb5, 0xf0, 0x7e, 0x56, 0xb2, 0x2e, 0xc2, 0xfc,
	0xeb, 0x7d, 0x2a, 0xdd, 0xb2, 0x4f, 0xbf, 0x0c, 0xb0, 0xab, 0x84, 0x9d, 0x93, 0x34, 0xa6, 0x0c,
	0xcb, 0xff, 0x47, 0xd6, 0xdd, 0xfc, 0x40, 0xc3, 0x67, 0xdf, 0xe7, 0x4d, 0xe3, 0xc7, 0xbc, 0x69,
	0xfc, 0x9c, 0x37, 0x8d, 0x0f, 0x8f, 0x92, 0x89, 0xbb, 0xf9, 0x72, 0x9c, 0x94, 0xf5, 0xad, 0xd4,
	0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x19, 0x4d, 0x84, 0x3d, 0x05, 0x00, 0x00,
}

func (m *TaskResultMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResultMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskResultMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TaskEventList) > 0 {
		for iNdEx := len(m.TaskEventList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskEventList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PartyId) > 0 {
		i -= len(m.PartyId)
		copy(dAtA[i:], m.PartyId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PartyId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskResourceUsageMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResourceUsageMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskResourceUsageMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Usage != nil {
		{
			size, err := m.Usage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskTerminateMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskTerminateMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskTerminateMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreateAt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskResultMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.TaskEventList) > 0 {
		for _, e := range m.TaskEventList {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.PartyId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskResourceUsageMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskTerminateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovMessage(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskResultMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResultMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResultMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &common.MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskEventList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskEventList = append(m.TaskEventList, &TaskEvent{})
			if err := m.TaskEventList[len(m.TaskEventList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type[:0], dAtA[iNdEx:postIndex]...)
			if m.Type == nil {
				m.Type = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = append(m.TaskId[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskId == nil {
				m.TaskId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = append(m.IdentityId[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityId == nil {
				m.IdentityId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyId = append(m.PartyId[:0], dAtA[iNdEx:postIndex]...)
			if m.PartyId == nil {
				m.PartyId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskResourceUsageMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResourceUsageMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResourceUsageMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &common.MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = append(m.TaskId[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskId == nil {
				m.TaskId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &common.ResourceUsage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskTerminateMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskTerminateMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskTerminateMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &common.MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = append(m.TaskId[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskId == nil {
				m.TaskId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
