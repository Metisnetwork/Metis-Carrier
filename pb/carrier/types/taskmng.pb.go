// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carrier/types/taskmng.proto

package types

import (
	fmt "fmt"
	twopc "github.com/datumtechs/datum-network-carrier/pb/carrier/netmsg/consensus/twopc"
	constant "github.com/datumtechs/datum-network-carrier/pb/common/constant"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NeedExecuteTask struct {
	RemotePid              string                     `protobuf:"bytes,1,opt,name=remote_pid,json=remotePid,proto3" json:"remote_pid,omitempty"`
	LocalTaskRole          constant.TaskRole          `protobuf:"varint,2,opt,name=local_task_role,json=localTaskRole,proto3,enum=common.constant.TaskRole" json:"local_task_role,omitempty"`
	LocalTaskOrganization  *TaskOrganization          `protobuf:"bytes,3,opt,name=local_task_organization,json=localTaskOrganization,proto3" json:"local_task_organization,omitempty"`
	RemoteTaskRole         constant.TaskRole          `protobuf:"varint,4,opt,name=remote_task_role,json=remoteTaskRole,proto3,enum=common.constant.TaskRole" json:"remote_task_role,omitempty"`
	RemoteTaskOrganization *TaskOrganization          `protobuf:"bytes,5,opt,name=remote_task_organization,json=remoteTaskOrganization,proto3" json:"remote_task_organization,omitempty"`
	TaskId                 string                     `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ConsStatus             []byte                     `protobuf:"bytes,7,opt,name=consStatus,proto3" json:"consStatus,omitempty"`
	LocalResource          *PrepareVoteResource       `protobuf:"bytes,8,opt,name=local_resource,json=localResource,proto3" json:"local_resource,omitempty"`
	Resources              *twopc.ConfirmTaskPeerInfo `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	ErrStr                 string                     `protobuf:"bytes,10,opt,name=err_str,json=errStr,proto3" json:"err_str,omitempty"`
	ConsumeSpec            *TaskConsumeSpec           `protobuf:"bytes,11,opt,name=consume_spec,json=consumeSpec,proto3" json:"consume_spec,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                   `json:"-"`
	XXX_unrecognized       []byte                     `json:"-"`
	XXX_sizecache          int32                      `json:"-"`
}

func (m *NeedExecuteTask) Reset()         { *m = NeedExecuteTask{} }
func (m *NeedExecuteTask) String() string { return proto.CompactTextString(m) }
func (*NeedExecuteTask) ProtoMessage()    {}
func (*NeedExecuteTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_e77c3b5a9def19f9, []int{0}
}
func (m *NeedExecuteTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NeedExecuteTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NeedExecuteTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NeedExecuteTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeedExecuteTask.Merge(m, src)
}
func (m *NeedExecuteTask) XXX_Size() int {
	return m.Size()
}
func (m *NeedExecuteTask) XXX_DiscardUnknown() {
	xxx_messageInfo_NeedExecuteTask.DiscardUnknown(m)
}

var xxx_messageInfo_NeedExecuteTask proto.InternalMessageInfo

func (m *NeedExecuteTask) GetRemotePid() string {
	if m != nil {
		return m.RemotePid
	}
	return ""
}

func (m *NeedExecuteTask) GetLocalTaskRole() constant.TaskRole {
	if m != nil {
		return m.LocalTaskRole
	}
	return constant.TaskRole_TaskRole_Unknown
}

func (m *NeedExecuteTask) GetLocalTaskOrganization() *TaskOrganization {
	if m != nil {
		return m.LocalTaskOrganization
	}
	return nil
}

func (m *NeedExecuteTask) GetRemoteTaskRole() constant.TaskRole {
	if m != nil {
		return m.RemoteTaskRole
	}
	return constant.TaskRole_TaskRole_Unknown
}

func (m *NeedExecuteTask) GetRemoteTaskOrganization() *TaskOrganization {
	if m != nil {
		return m.RemoteTaskOrganization
	}
	return nil
}

func (m *NeedExecuteTask) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *NeedExecuteTask) GetConsStatus() []byte {
	if m != nil {
		return m.ConsStatus
	}
	return nil
}

func (m *NeedExecuteTask) GetLocalResource() *PrepareVoteResource {
	if m != nil {
		return m.LocalResource
	}
	return nil
}

func (m *NeedExecuteTask) GetResources() *twopc.ConfirmTaskPeerInfo {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *NeedExecuteTask) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

func (m *NeedExecuteTask) GetConsumeSpec() *TaskConsumeSpec {
	if m != nil {
		return m.ConsumeSpec
	}
	return nil
}

// add by v0.5.1 fix
type TaskConsumeSpec struct {
	ConsumeTypes         []uint32 `protobuf:"varint,1,rep,packed,name=consume_types,json=consumeTypes,proto3" json:"consume_types,omitempty"`
	ConsumeOptions       []string `protobuf:"bytes,2,rep,name=consume_options,json=consumeOptions,proto3" json:"consume_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskConsumeSpec) Reset()         { *m = TaskConsumeSpec{} }
func (m *TaskConsumeSpec) String() string { return proto.CompactTextString(m) }
func (*TaskConsumeSpec) ProtoMessage()    {}
func (*TaskConsumeSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_e77c3b5a9def19f9, []int{1}
}
func (m *TaskConsumeSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskConsumeSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskConsumeSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskConsumeSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskConsumeSpec.Merge(m, src)
}
func (m *TaskConsumeSpec) XXX_Size() int {
	return m.Size()
}
func (m *TaskConsumeSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskConsumeSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TaskConsumeSpec proto.InternalMessageInfo

func (m *TaskConsumeSpec) GetConsumeTypes() []uint32 {
	if m != nil {
		return m.ConsumeTypes
	}
	return nil
}

func (m *TaskConsumeSpec) GetConsumeOptions() []string {
	if m != nil {
		return m.ConsumeOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*NeedExecuteTask)(nil), "carrier.types.NeedExecuteTask")
	proto.RegisterType((*TaskConsumeSpec)(nil), "carrier.types.TaskConsumeSpec")
}

func init() { proto.RegisterFile("carrier/types/taskmng.proto", fileDescriptor_e77c3b5a9def19f9) }

var fileDescriptor_e77c3b5a9def19f9 = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xe5, 0xf6, 0xd7, 0xf4, 0x97, 0x4d, 0x93, 0xa0, 0x95, 0xa0, 0x4b, 0x81, 0x60, 0x85,
	0x03, 0x3e, 0x50, 0x5b, 0x6a, 0xaf, 0x5c, 0x4a, 0xc4, 0x21, 0x1c, 0x68, 0x70, 0x2a, 0x10, 0x5c,
	0xac, 0xcd, 0x7a, 0x9a, 0x5a, 0x89, 0x77, 0xad, 0xdd, 0xb1, 0x0a, 0xbc, 0x0c, 0xaf, 0xc3, 0x91,
	0x47, 0x40, 0x79, 0x12, 0xb4, 0x6b, 0x3b, 0x7f, 0x0a, 0x12, 0xdc, 0x3c, 0x33, 0xdf, 0xfd, 0xf8,
	0x3b, 0xa3, 0x19, 0xf2, 0x48, 0x70, 0xad, 0x33, 0xd0, 0x11, 0x7e, 0x29, 0xc0, 0x44, 0xc8, 0xcd,
	0x22, 0x97, 0xf3, 0xb0, 0xd0, 0x0a, 0x15, 0xed, 0xd6, 0xc5, 0xd0, 0x15, 0x4f, 0x86, 0x42, 0xe5,
	0xb9, 0x92, 0x91, 0x50, 0xd2, 0x20, 0x97, 0x18, 0xd5, 0xe5, 0x04, 0x64, 0x99, 0x57, 0x4f, 0x4e,
	0x1e, 0xff, 0xce, 0x4b, 0x39, 0xf2, 0xba, 0x3a, 0xdc, 0xad, 0x5a, 0x10, 0x48, 0x53, 0x1a, 0x83,
	0x1c, 0xa1, 0xd6, 0xbc, 0x68, 0x34, 0x12, 0x30, 0x37, 0xf3, 0x8d, 0x28, 0xc2, 0x5b, 0x55, 0x88,
	0x28, 0x07, 0x63, 0xf8, 0xbc, 0x56, 0x0f, 0xbf, 0x1d, 0x90, 0xfe, 0x5b, 0x80, 0xf4, 0xf5, 0x67,
	0x10, 0x25, 0xc2, 0x15, 0x37, 0x0b, 0xfa, 0x84, 0x10, 0x0d, 0xb9, 0x42, 0x48, 0x8a, 0x2c, 0x65,
	0x9e, 0xef, 0x05, 0xed, 0xb8, 0x5d, 0x65, 0x26, 0x59, 0x4a, 0x2f, 0x48, 0x7f, 0xa9, 0x04, 0x5f,
	0x26, 0xd6, 0x5c, 0xa2, 0xd5, 0x12, 0xd8, 0x9e, 0xef, 0x05, 0xbd, 0xb3, 0x87, 0x61, 0xd5, 0x60,
	0xd8, 0x34, 0x18, 0x5a, 0x5c, 0xac, 0x96, 0x10, 0x77, 0xdd, 0x8b, 0x26, 0xa4, 0x1f, 0xc8, 0xf1,
	0x16, 0x42, 0xe9, 0x39, 0x97, 0xd9, 0x57, 0x8e, 0x99, 0x92, 0x6c, 0xdf, 0xf7, 0x82, 0xce, 0xd9,
	0xd3, 0x70, 0x67, 0x74, 0x0e, 0x74, 0xb9, 0x25, 0x8b, 0xef, 0xaf, 0x81, 0xdb, 0x69, 0x3a, 0x22,
	0xf7, 0x6a, 0xeb, 0x1b, 0x73, 0xff, 0xfd, 0xcd, 0x5c, 0xaf, 0x7a, 0xb2, 0x76, 0xf7, 0x91, 0xb0,
	0x6d, 0xc8, 0x8e, 0xbd, 0x83, 0x7f, 0xb3, 0xf7, 0x60, 0x83, 0xdc, 0xf1, 0x77, 0x4c, 0x0e, 0x1d,
	0x33, 0x4b, 0x59, 0xcb, 0xcd, 0xb5, 0x65, 0xc3, 0x71, 0x4a, 0x07, 0x84, 0x58, 0x63, 0x53, 0xe4,
	0x58, 0x1a, 0x76, 0xe8, 0x7b, 0xc1, 0x51, 0xbc, 0x95, 0xa1, 0x63, 0xd2, 0xab, 0x26, 0xa6, 0xc1,
	0xa8, 0x52, 0x0b, 0x60, 0xff, 0x3b, 0x27, 0xc3, 0x3b, 0x4e, 0x26, 0x1a, 0x0a, 0xae, 0xe1, 0xbd,
	0x42, 0x88, 0x6b, 0x65, 0x3d, 0xfc, 0x26, 0xa4, 0xef, 0x48, 0xbb, 0x81, 0x18, 0xd6, 0x76, 0x94,
	0xf3, 0x35, 0xa5, 0x5a, 0x9a, 0x70, 0xbd, 0x34, 0xa1, 0x5b, 0x9a, 0x70, 0xa4, 0xe4, 0x75, 0xa6,
	0x73, 0xdb, 0xcf, 0x04, 0x40, 0x8f, 0xe5, 0xb5, 0x8a, 0x37, 0x14, 0xdb, 0x16, 0x68, 0x9d, 0x18,
	0xd4, 0x8c, 0x54, 0x6d, 0x81, 0xd6, 0x53, 0xd4, 0xf4, 0x82, 0x1c, 0x59, 0x54, 0x99, 0x43, 0x62,
	0x0a, 0x10, 0xac, 0xe3, 0x7e, 0x37, 0xf8, 0xc3, 0xf8, 0x46, 0x95, 0x6c, 0x5a, 0x80, 0x88, 0x3b,
	0x62, 0x13, 0x0c, 0x13, 0xd2, 0xbf, 0x53, 0xa7, 0xcf, 0x48, 0xb7, 0xa1, 0x3a, 0x00, 0xf3, 0xfc,
	0xfd, 0xa0, 0x1b, 0x37, 0xbf, 0xba, 0xb2, 0x39, 0xfa, 0x9c, 0xf4, 0x1b, 0x91, 0x2a, 0xec, 0xf0,
	0x0d, 0xdb, 0xf3, 0xf7, 0x83, 0x76, 0xdc, 0xab, 0xd3, 0x97, 0x55, 0xf6, 0xd5, 0x9b, 0xef, 0xab,
	0x81, 0xf7, 0x63, 0x35, 0xf0, 0x7e, 0xae, 0x06, 0xde, 0xa7, 0x97, 0xf3, 0x0c, 0x6f, 0xca, 0x99,
	0xdd, 0x96, 0x28, 0xe5, 0x58, 0xe6, 0x08, 0xe2, 0xc6, 0x54, 0x9f, 0xa7, 0x12, 0xf0, 0x56, 0xe9,
	0xc5, 0x69, 0x73, 0x62, 0xc5, 0x2c, 0xda, 0xb9, 0xc8, 0x59, 0xcb, 0x5d, 0xd5, 0xf9, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x02, 0x7c, 0x25, 0xcd, 0x17, 0x04, 0x00, 0x00,
}

func (m *NeedExecuteTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeedExecuteTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NeedExecuteTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConsumeSpec != nil {
		{
			size, err := m.ConsumeSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskmng(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ErrStr) > 0 {
		i -= len(m.ErrStr)
		copy(dAtA[i:], m.ErrStr)
		i = encodeVarintTaskmng(dAtA, i, uint64(len(m.ErrStr)))
		i--
		dAtA[i] = 0x52
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskmng(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.LocalResource != nil {
		{
			size, err := m.LocalResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskmng(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ConsStatus) > 0 {
		i -= len(m.ConsStatus)
		copy(dAtA[i:], m.ConsStatus)
		i = encodeVarintTaskmng(dAtA, i, uint64(len(m.ConsStatus)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTaskmng(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x32
	}
	if m.RemoteTaskOrganization != nil {
		{
			size, err := m.RemoteTaskOrganization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskmng(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RemoteTaskRole != 0 {
		i = encodeVarintTaskmng(dAtA, i, uint64(m.RemoteTaskRole))
		i--
		dAtA[i] = 0x20
	}
	if m.LocalTaskOrganization != nil {
		{
			size, err := m.LocalTaskOrganization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTaskmng(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LocalTaskRole != 0 {
		i = encodeVarintTaskmng(dAtA, i, uint64(m.LocalTaskRole))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RemotePid) > 0 {
		i -= len(m.RemotePid)
		copy(dAtA[i:], m.RemotePid)
		i = encodeVarintTaskmng(dAtA, i, uint64(len(m.RemotePid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskConsumeSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskConsumeSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskConsumeSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConsumeOptions) > 0 {
		for iNdEx := len(m.ConsumeOptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConsumeOptions[iNdEx])
			copy(dAtA[i:], m.ConsumeOptions[iNdEx])
			i = encodeVarintTaskmng(dAtA, i, uint64(len(m.ConsumeOptions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ConsumeTypes) > 0 {
		dAtA7 := make([]byte, len(m.ConsumeTypes)*10)
		var j6 int
		for _, num := range m.ConsumeTypes {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintTaskmng(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTaskmng(dAtA []byte, offset int, v uint64) int {
	offset -= sovTaskmng(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NeedExecuteTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemotePid)
	if l > 0 {
		n += 1 + l + sovTaskmng(uint64(l))
	}
	if m.LocalTaskRole != 0 {
		n += 1 + sovTaskmng(uint64(m.LocalTaskRole))
	}
	if m.LocalTaskOrganization != nil {
		l = m.LocalTaskOrganization.Size()
		n += 1 + l + sovTaskmng(uint64(l))
	}
	if m.RemoteTaskRole != 0 {
		n += 1 + sovTaskmng(uint64(m.RemoteTaskRole))
	}
	if m.RemoteTaskOrganization != nil {
		l = m.RemoteTaskOrganization.Size()
		n += 1 + l + sovTaskmng(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTaskmng(uint64(l))
	}
	l = len(m.ConsStatus)
	if l > 0 {
		n += 1 + l + sovTaskmng(uint64(l))
	}
	if m.LocalResource != nil {
		l = m.LocalResource.Size()
		n += 1 + l + sovTaskmng(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovTaskmng(uint64(l))
	}
	l = len(m.ErrStr)
	if l > 0 {
		n += 1 + l + sovTaskmng(uint64(l))
	}
	if m.ConsumeSpec != nil {
		l = m.ConsumeSpec.Size()
		n += 1 + l + sovTaskmng(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskConsumeSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConsumeTypes) > 0 {
		l = 0
		for _, e := range m.ConsumeTypes {
			l += sovTaskmng(uint64(e))
		}
		n += 1 + sovTaskmng(uint64(l)) + l
	}
	if len(m.ConsumeOptions) > 0 {
		for _, s := range m.ConsumeOptions {
			l = len(s)
			n += 1 + l + sovTaskmng(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTaskmng(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTaskmng(x uint64) (n int) {
	return sovTaskmng(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NeedExecuteTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskmng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeedExecuteTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeedExecuteTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemotePid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemotePid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTaskRole", wireType)
			}
			m.LocalTaskRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalTaskRole |= constant.TaskRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTaskOrganization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalTaskOrganization == nil {
				m.LocalTaskOrganization = &TaskOrganization{}
			}
			if err := m.LocalTaskOrganization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteTaskRole", wireType)
			}
			m.RemoteTaskRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteTaskRole |= constant.TaskRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteTaskOrganization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteTaskOrganization == nil {
				m.RemoteTaskOrganization = &TaskOrganization{}
			}
			if err := m.RemoteTaskOrganization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsStatus", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsStatus = append(m.ConsStatus[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsStatus == nil {
				m.ConsStatus = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalResource == nil {
				m.LocalResource = &PrepareVoteResource{}
			}
			if err := m.LocalResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &twopc.ConfirmTaskPeerInfo{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumeSpec == nil {
				m.ConsumeSpec = &TaskConsumeSpec{}
			}
			if err := m.ConsumeSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskmng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskmng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskConsumeSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskmng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskConsumeSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskConsumeSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTaskmng
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ConsumeTypes = append(m.ConsumeTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTaskmng
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTaskmng
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTaskmng
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ConsumeTypes) == 0 {
					m.ConsumeTypes = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTaskmng
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ConsumeTypes = append(m.ConsumeTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeTypes", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskmng
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTaskmng
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumeOptions = append(m.ConsumeOptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskmng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTaskmng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTaskmng(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTaskmng
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskmng
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTaskmng
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTaskmng
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTaskmng
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTaskmng        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTaskmng          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTaskmng = fmt.Errorf("proto: unexpected end of group")
)
