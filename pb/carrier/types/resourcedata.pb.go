// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carrier/types/resourcedata.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 单个组织的总算力信息
type ResourcePB struct {
	Owner                *Organization `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	DataId               string        `protobuf:"bytes,2,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	DataStatus           DataStatus    `protobuf:"varint,3,opt,name=data_status,json=dataStatus,proto3,enum=carrier.types.DataStatus" json:"data_status,omitempty"`
	State                PowerState    `protobuf:"varint,4,opt,name=state,proto3,enum=carrier.types.PowerState" json:"state,omitempty"`
	TotalMem             uint64        `protobuf:"varint,5,opt,name=total_mem,json=totalMem,proto3" json:"total_mem,omitempty"`
	UsedMem              uint64        `protobuf:"varint,6,opt,name=used_mem,json=usedMem,proto3" json:"used_mem,omitempty"`
	TotalProcessor       uint32        `protobuf:"varint,7,opt,name=total_processor,json=totalProcessor,proto3" json:"total_processor,omitempty"`
	UsedProcessor        uint32        `protobuf:"varint,8,opt,name=used_processor,json=usedProcessor,proto3" json:"used_processor,omitempty"`
	TotalBandwidth       uint64        `protobuf:"varint,9,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	UsedBandwidth        uint64        `protobuf:"varint,10,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"used_bandwidth,omitempty"`
	TotalDisk            uint64        `protobuf:"varint,11,opt,name=total_disk,json=totalDisk,proto3" json:"total_disk,omitempty"`
	UsedDisk             uint64        `protobuf:"varint,12,opt,name=used_disk,json=usedDisk,proto3" json:"used_disk,omitempty"`
	PublishAt            uint64        `protobuf:"varint,13,opt,name=publish_at,json=publishAt,proto3" json:"publish_at,omitempty"`
	UpdateAt             uint64        `protobuf:"varint,14,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Nonce                uint64        `protobuf:"varint,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResourcePB) Reset()         { *m = ResourcePB{} }
func (m *ResourcePB) String() string { return proto.CompactTextString(m) }
func (*ResourcePB) ProtoMessage()    {}
func (*ResourcePB) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b69e6ebb75664b, []int{0}
}
func (m *ResourcePB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourcePB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourcePB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourcePB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcePB.Merge(m, src)
}
func (m *ResourcePB) XXX_Size() int {
	return m.Size()
}
func (m *ResourcePB) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcePB.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcePB proto.InternalMessageInfo

func (m *ResourcePB) GetOwner() *Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ResourcePB) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *ResourcePB) GetDataStatus() DataStatus {
	if m != nil {
		return m.DataStatus
	}
	return DataStatus_DataStatus_Unknown
}

func (m *ResourcePB) GetState() PowerState {
	if m != nil {
		return m.State
	}
	return PowerState_PowerState_Unknown
}

func (m *ResourcePB) GetTotalMem() uint64 {
	if m != nil {
		return m.TotalMem
	}
	return 0
}

func (m *ResourcePB) GetUsedMem() uint64 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *ResourcePB) GetTotalProcessor() uint32 {
	if m != nil {
		return m.TotalProcessor
	}
	return 0
}

func (m *ResourcePB) GetUsedProcessor() uint32 {
	if m != nil {
		return m.UsedProcessor
	}
	return 0
}

func (m *ResourcePB) GetTotalBandwidth() uint64 {
	if m != nil {
		return m.TotalBandwidth
	}
	return 0
}

func (m *ResourcePB) GetUsedBandwidth() uint64 {
	if m != nil {
		return m.UsedBandwidth
	}
	return 0
}

func (m *ResourcePB) GetTotalDisk() uint64 {
	if m != nil {
		return m.TotalDisk
	}
	return 0
}

func (m *ResourcePB) GetUsedDisk() uint64 {
	if m != nil {
		return m.UsedDisk
	}
	return 0
}

func (m *ResourcePB) GetPublishAt() uint64 {
	if m != nil {
		return m.PublishAt
	}
	return 0
}

func (m *ResourcePB) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *ResourcePB) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// 单个组织中的单台服务的算力信息 (比 resource 多了 jobNodeId)
type LocalResourcePB struct {
	Owner                *Organization `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	DataId               string        `protobuf:"bytes,2,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	DataStatus           DataStatus    `protobuf:"varint,3,opt,name=data_status,json=dataStatus,proto3,enum=carrier.types.DataStatus" json:"data_status,omitempty"`
	State                PowerState    `protobuf:"varint,4,opt,name=state,proto3,enum=carrier.types.PowerState" json:"state,omitempty"`
	TotalMem             uint64        `protobuf:"varint,5,opt,name=total_mem,json=totalMem,proto3" json:"total_mem,omitempty"`
	UsedMem              uint64        `protobuf:"varint,6,opt,name=used_mem,json=usedMem,proto3" json:"used_mem,omitempty"`
	TotalProcessor       uint32        `protobuf:"varint,7,opt,name=total_processor,json=totalProcessor,proto3" json:"total_processor,omitempty"`
	UsedProcessor        uint32        `protobuf:"varint,8,opt,name=used_processor,json=usedProcessor,proto3" json:"used_processor,omitempty"`
	TotalBandwidth       uint64        `protobuf:"varint,9,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	UsedBandwidth        uint64        `protobuf:"varint,10,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"used_bandwidth,omitempty"`
	TotalDisk            uint64        `protobuf:"varint,11,opt,name=total_disk,json=totalDisk,proto3" json:"total_disk,omitempty"`
	UsedDisk             uint64        `protobuf:"varint,12,opt,name=used_disk,json=usedDisk,proto3" json:"used_disk,omitempty"`
	PublishAt            uint64        `protobuf:"varint,13,opt,name=publish_at,json=publishAt,proto3" json:"publish_at,omitempty"`
	UpdateAt             uint64        `protobuf:"varint,14,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Nonce                uint64        `protobuf:"varint,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
	JobNodeId            string        `protobuf:"bytes,16,opt,name=job_node_id,json=jobNodeId,proto3" json:"job_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LocalResourcePB) Reset()         { *m = LocalResourcePB{} }
func (m *LocalResourcePB) String() string { return proto.CompactTextString(m) }
func (*LocalResourcePB) ProtoMessage()    {}
func (*LocalResourcePB) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b69e6ebb75664b, []int{1}
}
func (m *LocalResourcePB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalResourcePB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalResourcePB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalResourcePB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalResourcePB.Merge(m, src)
}
func (m *LocalResourcePB) XXX_Size() int {
	return m.Size()
}
func (m *LocalResourcePB) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalResourcePB.DiscardUnknown(m)
}

var xxx_messageInfo_LocalResourcePB proto.InternalMessageInfo

func (m *LocalResourcePB) GetOwner() *Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *LocalResourcePB) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *LocalResourcePB) GetDataStatus() DataStatus {
	if m != nil {
		return m.DataStatus
	}
	return DataStatus_DataStatus_Unknown
}

func (m *LocalResourcePB) GetState() PowerState {
	if m != nil {
		return m.State
	}
	return PowerState_PowerState_Unknown
}

func (m *LocalResourcePB) GetTotalMem() uint64 {
	if m != nil {
		return m.TotalMem
	}
	return 0
}

func (m *LocalResourcePB) GetUsedMem() uint64 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *LocalResourcePB) GetTotalProcessor() uint32 {
	if m != nil {
		return m.TotalProcessor
	}
	return 0
}

func (m *LocalResourcePB) GetUsedProcessor() uint32 {
	if m != nil {
		return m.UsedProcessor
	}
	return 0
}

func (m *LocalResourcePB) GetTotalBandwidth() uint64 {
	if m != nil {
		return m.TotalBandwidth
	}
	return 0
}

func (m *LocalResourcePB) GetUsedBandwidth() uint64 {
	if m != nil {
		return m.UsedBandwidth
	}
	return 0
}

func (m *LocalResourcePB) GetTotalDisk() uint64 {
	if m != nil {
		return m.TotalDisk
	}
	return 0
}

func (m *LocalResourcePB) GetUsedDisk() uint64 {
	if m != nil {
		return m.UsedDisk
	}
	return 0
}

func (m *LocalResourcePB) GetPublishAt() uint64 {
	if m != nil {
		return m.PublishAt
	}
	return 0
}

func (m *LocalResourcePB) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *LocalResourcePB) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *LocalResourcePB) GetJobNodeId() string {
	if m != nil {
		return m.JobNodeId
	}
	return ""
}

// 定义：代表一个服务器纯粹的算力数据
type Power struct {
	JobNodeId            string                 `protobuf:"bytes,1,opt,name=job_node_id,json=jobNodeId,proto3" json:"job_node_id,omitempty"`
	PowerId              string                 `protobuf:"bytes,2,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	UsageOverview        *ResourceUsageOverview `protobuf:"bytes,3,opt,name=usage_overview,json=usageOverview,proto3" json:"usage_overview,omitempty"`
	State                PowerState             `protobuf:"varint,4,opt,name=state,proto3,enum=carrier.types.PowerState" json:"state,omitempty"`
	Nonce                uint64                 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Power) Reset()         { *m = Power{} }
func (m *Power) String() string { return proto.CompactTextString(m) }
func (*Power) ProtoMessage()    {}
func (*Power) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b69e6ebb75664b, []int{2}
}
func (m *Power) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Power) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Power.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Power) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Power.Merge(m, src)
}
func (m *Power) XXX_Size() int {
	return m.Size()
}
func (m *Power) XXX_DiscardUnknown() {
	xxx_messageInfo_Power.DiscardUnknown(m)
}

var xxx_messageInfo_Power proto.InternalMessageInfo

func (m *Power) GetJobNodeId() string {
	if m != nil {
		return m.JobNodeId
	}
	return ""
}

func (m *Power) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

func (m *Power) GetUsageOverview() *ResourceUsageOverview {
	if m != nil {
		return m.UsageOverview
	}
	return nil
}

func (m *Power) GetState() PowerState {
	if m != nil {
		return m.State
	}
	return PowerState_PowerState_Unknown
}

func (m *Power) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// 算力及算力上的task信息的公共抽象
type PowerUsageDetail struct {
	Information          *ResourceUsageOverview `protobuf:"bytes,1,opt,name=information,proto3" json:"information,omitempty"`
	TotalTaskCount       uint32                 `protobuf:"varint,2,opt,name=total_task_count,json=totalTaskCount,proto3" json:"total_task_count,omitempty"`
	CurrentTaskCount     uint32                 `protobuf:"varint,3,opt,name=current_task_count,json=currentTaskCount,proto3" json:"current_task_count,omitempty"`
	Tasks                []*PowerTask           `protobuf:"bytes,4,rep,name=tasks,proto3" json:"tasks,omitempty"`
	State                PowerState             `protobuf:"varint,5,opt,name=state,proto3,enum=carrier.types.PowerState" json:"state,omitempty"`
	PublishAt            uint64                 `protobuf:"varint,6,opt,name=publish_at,json=publishAt,proto3" json:"publish_at,omitempty"`
	UpdateAt             uint64                 `protobuf:"varint,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	Nonce                uint64                 `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PowerUsageDetail) Reset()         { *m = PowerUsageDetail{} }
func (m *PowerUsageDetail) String() string { return proto.CompactTextString(m) }
func (*PowerUsageDetail) ProtoMessage()    {}
func (*PowerUsageDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b69e6ebb75664b, []int{3}
}
func (m *PowerUsageDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PowerUsageDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PowerUsageDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PowerUsageDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerUsageDetail.Merge(m, src)
}
func (m *PowerUsageDetail) XXX_Size() int {
	return m.Size()
}
func (m *PowerUsageDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerUsageDetail.DiscardUnknown(m)
}

var xxx_messageInfo_PowerUsageDetail proto.InternalMessageInfo

func (m *PowerUsageDetail) GetInformation() *ResourceUsageOverview {
	if m != nil {
		return m.Information
	}
	return nil
}

func (m *PowerUsageDetail) GetTotalTaskCount() uint32 {
	if m != nil {
		return m.TotalTaskCount
	}
	return 0
}

func (m *PowerUsageDetail) GetCurrentTaskCount() uint32 {
	if m != nil {
		return m.CurrentTaskCount
	}
	return 0
}

func (m *PowerUsageDetail) GetTasks() []*PowerTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *PowerUsageDetail) GetState() PowerState {
	if m != nil {
		return m.State
	}
	return PowerState_PowerState_Unknown
}

func (m *PowerUsageDetail) GetPublishAt() uint64 {
	if m != nil {
		return m.PublishAt
	}
	return 0
}

func (m *PowerUsageDetail) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *PowerUsageDetail) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// 算力上的任务信息
type PowerTask struct {
	TaskId               string                   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName             string                   `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	Owner                *Organization            `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Partners             []*Organization          `protobuf:"bytes,4,rep,name=partners,proto3" json:"partners,omitempty"`
	Receivers            []*Organization          `protobuf:"bytes,5,rep,name=receivers,proto3" json:"receivers,omitempty"`
	OperationCost        *TaskResourceCostDeclare `protobuf:"bytes,6,opt,name=operation_cost,json=operationCost,proto3" json:"operation_cost,omitempty"`
	OperationSpend       *TaskResourceCostDeclare `protobuf:"bytes,7,opt,name=operation_spend,json=operationSpend,proto3" json:"operation_spend,omitempty"`
	CreateAt             uint64                   `protobuf:"varint,8,opt,name=createAt,proto3" json:"createAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PowerTask) Reset()         { *m = PowerTask{} }
func (m *PowerTask) String() string { return proto.CompactTextString(m) }
func (*PowerTask) ProtoMessage()    {}
func (*PowerTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b69e6ebb75664b, []int{4}
}
func (m *PowerTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PowerTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PowerTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PowerTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerTask.Merge(m, src)
}
func (m *PowerTask) XXX_Size() int {
	return m.Size()
}
func (m *PowerTask) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerTask.DiscardUnknown(m)
}

var xxx_messageInfo_PowerTask proto.InternalMessageInfo

func (m *PowerTask) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *PowerTask) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *PowerTask) GetOwner() *Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *PowerTask) GetPartners() []*Organization {
	if m != nil {
		return m.Partners
	}
	return nil
}

func (m *PowerTask) GetReceivers() []*Organization {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *PowerTask) GetOperationCost() *TaskResourceCostDeclare {
	if m != nil {
		return m.OperationCost
	}
	return nil
}

func (m *PowerTask) GetOperationSpend() *TaskResourceCostDeclare {
	if m != nil {
		return m.OperationSpend
	}
	return nil
}

func (m *PowerTask) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

// 系统资源消耗概览
type ResourceUsageOverview struct {
	TotalMem             uint64   `protobuf:"varint,1,opt,name=total_mem,json=totalMem,proto3" json:"total_mem,omitempty"`
	UsedMem              uint64   `protobuf:"varint,2,opt,name=used_mem,json=usedMem,proto3" json:"used_mem,omitempty"`
	TotalProcessor       uint32   `protobuf:"varint,3,opt,name=total_processor,json=totalProcessor,proto3" json:"total_processor,omitempty"`
	UsedProcessor        uint32   `protobuf:"varint,4,opt,name=used_processor,json=usedProcessor,proto3" json:"used_processor,omitempty"`
	TotalBandwidth       uint64   `protobuf:"varint,5,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	UsedBandwidth        uint64   `protobuf:"varint,6,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"used_bandwidth,omitempty"`
	TotalDisk            uint64   `protobuf:"varint,7,opt,name=total_disk,json=totalDisk,proto3" json:"total_disk,omitempty"`
	UsedDisk             uint64   `protobuf:"varint,8,opt,name=used_disk,json=usedDisk,proto3" json:"used_disk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceUsageOverview) Reset()         { *m = ResourceUsageOverview{} }
func (m *ResourceUsageOverview) String() string { return proto.CompactTextString(m) }
func (*ResourceUsageOverview) ProtoMessage()    {}
func (*ResourceUsageOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_83b69e6ebb75664b, []int{5}
}
func (m *ResourceUsageOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceUsageOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceUsageOverview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceUsageOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceUsageOverview.Merge(m, src)
}
func (m *ResourceUsageOverview) XXX_Size() int {
	return m.Size()
}
func (m *ResourceUsageOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceUsageOverview.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceUsageOverview proto.InternalMessageInfo

func (m *ResourceUsageOverview) GetTotalMem() uint64 {
	if m != nil {
		return m.TotalMem
	}
	return 0
}

func (m *ResourceUsageOverview) GetUsedMem() uint64 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *ResourceUsageOverview) GetTotalProcessor() uint32 {
	if m != nil {
		return m.TotalProcessor
	}
	return 0
}

func (m *ResourceUsageOverview) GetUsedProcessor() uint32 {
	if m != nil {
		return m.UsedProcessor
	}
	return 0
}

func (m *ResourceUsageOverview) GetTotalBandwidth() uint64 {
	if m != nil {
		return m.TotalBandwidth
	}
	return 0
}

func (m *ResourceUsageOverview) GetUsedBandwidth() uint64 {
	if m != nil {
		return m.UsedBandwidth
	}
	return 0
}

func (m *ResourceUsageOverview) GetTotalDisk() uint64 {
	if m != nil {
		return m.TotalDisk
	}
	return 0
}

func (m *ResourceUsageOverview) GetUsedDisk() uint64 {
	if m != nil {
		return m.UsedDisk
	}
	return 0
}

func init() {
	proto.RegisterType((*ResourcePB)(nil), "carrier.types.ResourcePB")
	proto.RegisterType((*LocalResourcePB)(nil), "carrier.types.LocalResourcePB")
	proto.RegisterType((*Power)(nil), "carrier.types.Power")
	proto.RegisterType((*PowerUsageDetail)(nil), "carrier.types.PowerUsageDetail")
	proto.RegisterType((*PowerTask)(nil), "carrier.types.PowerTask")
	proto.RegisterType((*ResourceUsageOverview)(nil), "carrier.types.ResourceUsageOverview")
}

func init() { proto.RegisterFile("carrier/types/resourcedata.proto", fileDescriptor_83b69e6ebb75664b) }

var fileDescriptor_83b69e6ebb75664b = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xcd, 0x8e, 0xe2, 0x46,
	0x10, 0xc7, 0x65, 0xc0, 0x60, 0xca, 0xe1, 0x43, 0xad, 0x44, 0xf1, 0xee, 0x6a, 0x11, 0x42, 0xf9,
	0xe0, 0x10, 0x81, 0x42, 0x0e, 0x51, 0x72, 0xdb, 0x59, 0x14, 0x09, 0x25, 0xbb, 0x33, 0xf2, 0x24,
	0x97, 0x5c, 0x50, 0x63, 0x57, 0x66, 0x3c, 0x80, 0xdb, 0xea, 0x6e, 0x06, 0x25, 0xcf, 0x93, 0xdb,
	0xbc, 0x48, 0x8e, 0x73, 0xca, 0x39, 0x1a, 0x29, 0xef, 0x11, 0x75, 0xd9, 0xd8, 0x80, 0x26, 0x8c,
	0xf7, 0x3e, 0x37, 0xba, 0xea, 0xf7, 0x2f, 0xbb, 0xab, 0xfe, 0x2e, 0x01, 0xfd, 0x80, 0x4b, 0x19,
	0xa1, 0x1c, 0xeb, 0xdf, 0x13, 0x54, 0x63, 0x89, 0x4a, 0x6c, 0x64, 0x80, 0x21, 0xd7, 0x7c, 0x94,
	0x48, 0xa1, 0x05, 0x6b, 0x65, 0xc4, 0x88, 0x88, 0x97, 0xde, 0xa1, 0x60, 0xc1, 0x15, 0xa6, 0xe0,
	0xe0, 0xae, 0x06, 0xe0, 0x67, 0xfa, 0x8b, 0x33, 0xf6, 0x35, 0xd8, 0x62, 0x1b, 0xa3, 0xf4, 0xac,
	0xbe, 0x35, 0x74, 0x27, 0xaf, 0x46, 0x07, 0x75, 0x46, 0xe7, 0xf2, 0x8a, 0xc7, 0xd1, 0x1f, 0x5c,
	0x47, 0x22, 0xf6, 0x53, 0x92, 0x7d, 0x0a, 0x0d, 0xf3, 0xe0, 0x79, 0x14, 0x7a, 0x95, 0xbe, 0x35,
	0x6c, 0xfa, 0x75, 0x73, 0x9c, 0x85, 0xec, 0x7b, 0x70, 0x29, 0xa1, 0x34, 0xd7, 0x1b, 0xe5, 0x55,
	0xfb, 0xd6, 0xb0, 0x3d, 0x79, 0x71, 0x54, 0x71, 0xca, 0x35, 0xbf, 0x24, 0xc0, 0x87, 0x30, 0xff,
	0xcd, 0xc6, 0x60, 0x1b, 0x19, 0x7a, 0xb5, 0x47, 0x55, 0x17, 0x62, 0x8b, 0xd2, 0xa0, 0xe8, 0xa7,
	0x1c, 0x7b, 0x05, 0x4d, 0x2d, 0x34, 0x5f, 0xcd, 0xd7, 0xb8, 0xf6, 0xec, 0xbe, 0x35, 0xac, 0xf9,
	0x0e, 0x05, 0xde, 0xe1, 0x9a, 0xbd, 0x00, 0x67, 0xa3, 0x30, 0xa4, 0x5c, 0x9d, 0x72, 0x0d, 0x73,
	0x36, 0xa9, 0x2f, 0xa1, 0x93, 0xea, 0x12, 0x29, 0x02, 0x54, 0x4a, 0x48, 0xaf, 0xd1, 0xb7, 0x86,
	0x2d, 0xbf, 0x4d, 0xe1, 0x8b, 0x5d, 0x94, 0x7d, 0x0e, 0x6d, 0xaa, 0x51, 0x70, 0x0e, 0x71, 0x2d,
	0x13, 0x2d, 0xb0, 0xbc, 0xde, 0x82, 0xc7, 0xe1, 0x36, 0x0a, 0xf5, 0xb5, 0xd7, 0xa4, 0x27, 0xa6,
	0xf5, 0xce, 0x76, 0xd1, 0xbc, 0x5e, 0xc1, 0x01, 0x71, 0x54, 0xaf, 0xc0, 0x5e, 0x03, 0xa4, 0xf5,
	0xc2, 0x48, 0x2d, 0x3d, 0x97, 0x90, 0xf4, 0xa6, 0xd3, 0x48, 0x2d, 0xcd, 0xb5, 0xa9, 0x0a, 0x65,
	0x3f, 0x4a, 0xaf, 0x6d, 0x02, 0x94, 0x7c, 0x0d, 0x90, 0x6c, 0x16, 0xab, 0x48, 0x5d, 0xcf, 0xb9,
	0xf6, 0x5a, 0xa9, 0x36, 0x8b, 0xbc, 0xd1, 0xa4, 0x4d, 0x42, 0xae, 0xd1, 0x64, 0xdb, 0x99, 0x96,
	0x02, 0x6f, 0x34, 0xfb, 0x18, 0xec, 0x58, 0xc4, 0x01, 0x7a, 0x1d, 0x4a, 0xa4, 0x87, 0xc1, 0x7d,
	0x0d, 0x3a, 0x3f, 0x89, 0x80, 0xaf, 0x9e, 0x2d, 0xf3, 0x6c, 0x99, 0x52, 0x96, 0x61, 0x3d, 0x70,
	0x6f, 0xc4, 0x62, 0x1e, 0x8b, 0x10, 0xcd, 0xbc, 0xbb, 0x34, 0xef, 0xe6, 0x8d, 0x58, 0xbc, 0x17,
	0x21, 0xce, 0xc2, 0xc1, 0xdf, 0x16, 0xd8, 0x34, 0x9b, 0x63, 0xd2, 0x3a, 0x22, 0xcd, 0x48, 0x12,
	0x03, 0x16, 0xb6, 0x69, 0xd0, 0x79, 0x16, 0xb2, 0x1f, 0x4d, 0x67, 0xf8, 0x15, 0xce, 0xc5, 0x2d,
	0xca, 0xdb, 0x08, 0xb7, 0x64, 0x1d, 0x77, 0xf2, 0xd9, 0x91, 0x09, 0x76, 0xb6, 0xfd, 0xc5, 0xc0,
	0xe7, 0x19, 0x6b, 0xfa, 0xb7, 0x77, 0xfc, 0x70, 0x23, 0xe5, 0x17, 0xb7, 0xf7, 0xbf, 0x95, 0x7f,
	0x2b, 0xd0, 0x25, 0x96, 0x1e, 0x36, 0x45, 0xcd, 0xa3, 0x15, 0xfb, 0x01, 0xdc, 0x28, 0xfe, 0x4d,
	0xc8, 0x35, 0x7d, 0x0f, 0xd9, 0x27, 0x53, 0xee, 0x2d, 0xf7, 0x85, 0x6c, 0x08, 0xdd, 0x74, 0xc6,
	0x9a, 0xab, 0xe5, 0x3c, 0x10, 0x9b, 0x58, 0x53, 0x4f, 0x76, 0x26, 0xfc, 0x99, 0xab, 0xe5, 0x5b,
	0x13, 0x65, 0x5f, 0x01, 0x0b, 0x36, 0x52, 0x62, 0xac, 0xf7, 0xd9, 0x2a, 0xb1, 0xdd, 0x2c, 0x53,
	0xd0, 0x23, 0xb0, 0x0d, 0xa5, 0xbc, 0x5a, 0xbf, 0x3a, 0x74, 0x27, 0xde, 0x63, 0x77, 0x37, 0xb4,
	0x9f, 0x62, 0x45, 0xaf, 0xec, 0x92, 0xbd, 0x3a, 0x34, 0x58, 0xfd, 0xa4, 0xc1, 0x1a, 0xff, 0x67,
	0x30, 0x67, 0xbf, 0xcf, 0x7f, 0x56, 0xa1, 0x99, 0xbf, 0x97, 0x59, 0x2d, 0x74, 0xcd, 0xdc, 0x40,
	0x75, 0x73, 0x9c, 0x85, 0xf4, 0xb5, 0x9b, 0x44, 0xcc, 0xd7, 0x98, 0xd9, 0xc7, 0x31, 0x81, 0xf7,
	0x7c, 0x8d, 0xc5, 0x0e, 0xab, 0x96, 0xde, 0x61, 0xdf, 0x82, 0x93, 0x70, 0xa9, 0x63, 0x94, 0xbb,
	0x66, 0x9d, 0x54, 0xe5, 0x30, 0xfb, 0x0e, 0x9a, 0x12, 0x03, 0x8c, 0x6e, 0x8d, 0xd2, 0x7e, 0x5a,
	0x59, 0xd0, 0xec, 0x1d, 0xb4, 0x45, 0x82, 0x92, 0xe2, 0xf3, 0x40, 0xa8, 0xb4, 0x81, 0xee, 0xe4,
	0x8b, 0x23, 0x3d, 0x4d, 0x28, 0x33, 0xd1, 0x5b, 0xa1, 0xf4, 0x14, 0x83, 0x15, 0x97, 0xe8, 0xb7,
	0x72, 0xb5, 0x89, 0xb2, 0x73, 0xe8, 0x14, 0xe5, 0x54, 0x82, 0x71, 0x48, 0x2d, 0x2f, 0x5f, 0xaf,
	0x78, 0x9b, 0x4b, 0xa3, 0x66, 0x2f, 0xc1, 0x09, 0x24, 0xd2, 0xb0, 0xb2, 0x19, 0xe5, 0xe7, 0xc1,
	0x5d, 0x05, 0x3e, 0x79, 0xd4, 0xd8, 0x87, 0x7b, 0xd8, 0x3a, 0xb1, 0x87, 0x2b, 0x4f, 0xee, 0xe1,
	0x6a, 0xc9, 0x3d, 0x5c, 0x2b, 0xb9, 0x87, 0xed, 0x92, 0x7b, 0xb8, 0xfe, 0xf4, 0x1e, 0x6e, 0x9c,
	0xdc, 0xc3, 0xce, 0xe1, 0x1e, 0x3e, 0xeb, 0xfd, 0xf5, 0xd0, 0xb3, 0xee, 0x1f, 0x7a, 0xd6, 0x3f,
	0x0f, 0x3d, 0xeb, 0xd7, 0x6e, 0xb2, 0x18, 0x1f, 0xfc, 0x83, 0x5b, 0xd4, 0xe9, 0xdf, 0xdb, 0x37,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x87, 0xc4, 0xf6, 0x0a, 0x0a, 0x00, 0x00,
}

func (m *ResourcePB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourcePB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourcePB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nonce != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x78
	}
	if m.UpdateAt != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x70
	}
	if m.PublishAt != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.PublishAt))
		i--
		dAtA[i] = 0x68
	}
	if m.UsedDisk != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedDisk))
		i--
		dAtA[i] = 0x60
	}
	if m.TotalDisk != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalDisk))
		i--
		dAtA[i] = 0x58
	}
	if m.UsedBandwidth != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedBandwidth))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalBandwidth != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalBandwidth))
		i--
		dAtA[i] = 0x48
	}
	if m.UsedProcessor != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedProcessor))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalProcessor != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalProcessor))
		i--
		dAtA[i] = 0x38
	}
	if m.UsedMem != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedMem))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalMem != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalMem))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.DataStatus != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.DataStatus))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourcedata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocalResourcePB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalResourcePB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalResourcePB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JobNodeId) > 0 {
		i -= len(m.JobNodeId)
		copy(dAtA[i:], m.JobNodeId)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.JobNodeId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Nonce != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x78
	}
	if m.UpdateAt != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x70
	}
	if m.PublishAt != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.PublishAt))
		i--
		dAtA[i] = 0x68
	}
	if m.UsedDisk != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedDisk))
		i--
		dAtA[i] = 0x60
	}
	if m.TotalDisk != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalDisk))
		i--
		dAtA[i] = 0x58
	}
	if m.UsedBandwidth != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedBandwidth))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalBandwidth != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalBandwidth))
		i--
		dAtA[i] = 0x48
	}
	if m.UsedProcessor != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedProcessor))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalProcessor != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalProcessor))
		i--
		dAtA[i] = 0x38
	}
	if m.UsedMem != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedMem))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalMem != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalMem))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.DataStatus != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.DataStatus))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourcedata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Power) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Power) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Power) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nonce != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.UsageOverview != nil {
		{
			size, err := m.UsageOverview.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourcedata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobNodeId) > 0 {
		i -= len(m.JobNodeId)
		copy(dAtA[i:], m.JobNodeId)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.JobNodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PowerUsageDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PowerUsageDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PowerUsageDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nonce != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x40
	}
	if m.UpdateAt != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x38
	}
	if m.PublishAt != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.PublishAt))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourcedata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.CurrentTaskCount != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.CurrentTaskCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalTaskCount != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalTaskCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourcedata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PowerTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PowerTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PowerTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x40
	}
	if m.OperationSpend != nil {
		{
			size, err := m.OperationSpend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourcedata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OperationCost != nil {
		{
			size, err := m.OperationCost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourcedata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Receivers) > 0 {
		for iNdEx := len(m.Receivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourcedata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Partners) > 0 {
		for iNdEx := len(m.Partners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourcedata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourcedata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskName) > 0 {
		i -= len(m.TaskName)
		copy(dAtA[i:], m.TaskName)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.TaskName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintResourcedata(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceUsageOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceUsageOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceUsageOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsedDisk != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedDisk))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalDisk != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalDisk))
		i--
		dAtA[i] = 0x38
	}
	if m.UsedBandwidth != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedBandwidth))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalBandwidth != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalBandwidth))
		i--
		dAtA[i] = 0x28
	}
	if m.UsedProcessor != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedProcessor))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalProcessor != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalProcessor))
		i--
		dAtA[i] = 0x18
	}
	if m.UsedMem != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.UsedMem))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalMem != 0 {
		i = encodeVarintResourcedata(dAtA, i, uint64(m.TotalMem))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintResourcedata(dAtA []byte, offset int, v uint64) int {
	offset -= sovResourcedata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourcePB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.DataStatus != 0 {
		n += 1 + sovResourcedata(uint64(m.DataStatus))
	}
	if m.State != 0 {
		n += 1 + sovResourcedata(uint64(m.State))
	}
	if m.TotalMem != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalMem))
	}
	if m.UsedMem != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedMem))
	}
	if m.TotalProcessor != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalProcessor))
	}
	if m.UsedProcessor != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedProcessor))
	}
	if m.TotalBandwidth != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalBandwidth))
	}
	if m.UsedBandwidth != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedBandwidth))
	}
	if m.TotalDisk != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalDisk))
	}
	if m.UsedDisk != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedDisk))
	}
	if m.PublishAt != 0 {
		n += 1 + sovResourcedata(uint64(m.PublishAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovResourcedata(uint64(m.UpdateAt))
	}
	if m.Nonce != 0 {
		n += 1 + sovResourcedata(uint64(m.Nonce))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocalResourcePB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.DataStatus != 0 {
		n += 1 + sovResourcedata(uint64(m.DataStatus))
	}
	if m.State != 0 {
		n += 1 + sovResourcedata(uint64(m.State))
	}
	if m.TotalMem != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalMem))
	}
	if m.UsedMem != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedMem))
	}
	if m.TotalProcessor != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalProcessor))
	}
	if m.UsedProcessor != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedProcessor))
	}
	if m.TotalBandwidth != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalBandwidth))
	}
	if m.UsedBandwidth != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedBandwidth))
	}
	if m.TotalDisk != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalDisk))
	}
	if m.UsedDisk != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedDisk))
	}
	if m.PublishAt != 0 {
		n += 1 + sovResourcedata(uint64(m.PublishAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovResourcedata(uint64(m.UpdateAt))
	}
	if m.Nonce != 0 {
		n += 1 + sovResourcedata(uint64(m.Nonce))
	}
	l = len(m.JobNodeId)
	if l > 0 {
		n += 2 + l + sovResourcedata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Power) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobNodeId)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.UsageOverview != nil {
		l = m.UsageOverview.Size()
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovResourcedata(uint64(m.State))
	}
	if m.Nonce != 0 {
		n += 1 + sovResourcedata(uint64(m.Nonce))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PowerUsageDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.TotalTaskCount != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalTaskCount))
	}
	if m.CurrentTaskCount != 0 {
		n += 1 + sovResourcedata(uint64(m.CurrentTaskCount))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovResourcedata(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovResourcedata(uint64(m.State))
	}
	if m.PublishAt != 0 {
		n += 1 + sovResourcedata(uint64(m.PublishAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovResourcedata(uint64(m.UpdateAt))
	}
	if m.Nonce != 0 {
		n += 1 + sovResourcedata(uint64(m.Nonce))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PowerTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if len(m.Partners) > 0 {
		for _, e := range m.Partners {
			l = e.Size()
			n += 1 + l + sovResourcedata(uint64(l))
		}
	}
	if len(m.Receivers) > 0 {
		for _, e := range m.Receivers {
			l = e.Size()
			n += 1 + l + sovResourcedata(uint64(l))
		}
	}
	if m.OperationCost != nil {
		l = m.OperationCost.Size()
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.OperationSpend != nil {
		l = m.OperationSpend.Size()
		n += 1 + l + sovResourcedata(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovResourcedata(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceUsageOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalMem != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalMem))
	}
	if m.UsedMem != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedMem))
	}
	if m.TotalProcessor != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalProcessor))
	}
	if m.UsedProcessor != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedProcessor))
	}
	if m.TotalBandwidth != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalBandwidth))
	}
	if m.UsedBandwidth != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedBandwidth))
	}
	if m.TotalDisk != 0 {
		n += 1 + sovResourcedata(uint64(m.TotalDisk))
	}
	if m.UsedDisk != 0 {
		n += 1 + sovResourcedata(uint64(m.UsedDisk))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovResourcedata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResourcedata(x uint64) (n int) {
	return sovResourcedata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourcePB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourcedata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcePB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcePB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStatus", wireType)
			}
			m.DataStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataStatus |= DataStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PowerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMem", wireType)
			}
			m.TotalMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMem", wireType)
			}
			m.UsedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcessor", wireType)
			}
			m.TotalProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProcessor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedProcessor", wireType)
			}
			m.UsedProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedProcessor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			m.TotalBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			m.UsedBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisk", wireType)
			}
			m.TotalDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDisk", wireType)
			}
			m.UsedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
			}
			m.PublishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourcedata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourcedata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalResourcePB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourcedata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalResourcePB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalResourcePB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStatus", wireType)
			}
			m.DataStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataStatus |= DataStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PowerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMem", wireType)
			}
			m.TotalMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMem", wireType)
			}
			m.UsedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcessor", wireType)
			}
			m.TotalProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProcessor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedProcessor", wireType)
			}
			m.UsedProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedProcessor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			m.TotalBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			m.UsedBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisk", wireType)
			}
			m.TotalDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDisk", wireType)
			}
			m.UsedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
			}
			m.PublishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourcedata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourcedata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Power) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourcedata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Power: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Power: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageOverview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsageOverview == nil {
				m.UsageOverview = &ResourceUsageOverview{}
			}
			if err := m.UsageOverview.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PowerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourcedata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourcedata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PowerUsageDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourcedata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowerUsageDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowerUsageDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &ResourceUsageOverview{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTaskCount", wireType)
			}
			m.TotalTaskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTaskCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTaskCount", wireType)
			}
			m.CurrentTaskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTaskCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &PowerTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PowerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishAt", wireType)
			}
			m.PublishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourcedata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourcedata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PowerTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourcedata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowerTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowerTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partners = append(m.Partners, &Organization{})
			if err := m.Partners[len(m.Partners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receivers = append(m.Receivers, &Organization{})
			if err := m.Receivers[len(m.Receivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationCost == nil {
				m.OperationCost = &TaskResourceCostDeclare{}
			}
			if err := m.OperationCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationSpend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcedata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcedata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationSpend == nil {
				m.OperationSpend = &TaskResourceCostDeclare{}
			}
			if err := m.OperationSpend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourcedata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourcedata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceUsageOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourcedata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUsageOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUsageOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMem", wireType)
			}
			m.TotalMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMem", wireType)
			}
			m.UsedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedMem |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProcessor", wireType)
			}
			m.TotalProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProcessor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedProcessor", wireType)
			}
			m.UsedProcessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedProcessor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			m.TotalBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			m.UsedBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisk", wireType)
			}
			m.TotalDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDisk", wireType)
			}
			m.UsedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourcedata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourcedata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourcedata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourcedata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourcedata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResourcedata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResourcedata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResourcedata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResourcedata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourcedata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResourcedata = fmt.Errorf("proto: unexpected end of group")
)
