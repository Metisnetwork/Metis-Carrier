// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carrier/types/consensusstate.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposalTask struct {
	//*
	//ProposalId common.Hash
	//Task
	//CreateAt uint64
	ProposalId           string   `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	TaskId               string   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	CreateAt             uint64   `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposalTask) Reset()         { *m = ProposalTask{} }
func (m *ProposalTask) String() string { return proto.CompactTextString(m) }
func (*ProposalTask) ProtoMessage()    {}
func (*ProposalTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_aefd563c87ad898c, []int{0}
}
func (m *ProposalTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalTask.Merge(m, src)
}
func (m *ProposalTask) XXX_Size() int {
	return m.Size()
}
func (m *ProposalTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalTask.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalTask proto.InternalMessageInfo

func (m *ProposalTask) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *ProposalTask) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ProposalTask) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

type OrgProposalState struct {
	StartAt              uint64            `protobuf:"varint,1,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	DeadlineDuration     uint64            `protobuf:"varint,2,opt,name=deadline_duration,json=deadlineDuration,proto3" json:"deadline_duration,omitempty"`
	CreateAt             uint64            `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	TaskRole             TaskRole          `protobuf:"varint,4,opt,name=task_role,json=taskRole,proto3,enum=carrier.types.TaskRole" json:"task_role,omitempty"`
	TaskOrg              *TaskOrganization `protobuf:"bytes,5,opt,name=task_org,json=taskOrg,proto3" json:"task_org,omitempty"`
	PeriodNum            uint32            `protobuf:"varint,6,opt,name=period_num,json=periodNum,proto3" json:"period_num,omitempty"`
	TaskId               string            `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskSender           *TaskOrganization `protobuf:"bytes,8,opt,name=task_sender,json=taskSender,proto3" json:"task_sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OrgProposalState) Reset()         { *m = OrgProposalState{} }
func (m *OrgProposalState) String() string { return proto.CompactTextString(m) }
func (*OrgProposalState) ProtoMessage()    {}
func (*OrgProposalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_aefd563c87ad898c, []int{1}
}
func (m *OrgProposalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrgProposalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrgProposalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrgProposalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrgProposalState.Merge(m, src)
}
func (m *OrgProposalState) XXX_Size() int {
	return m.Size()
}
func (m *OrgProposalState) XXX_DiscardUnknown() {
	xxx_messageInfo_OrgProposalState.DiscardUnknown(m)
}

var xxx_messageInfo_OrgProposalState proto.InternalMessageInfo

func (m *OrgProposalState) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *OrgProposalState) GetDeadlineDuration() uint64 {
	if m != nil {
		return m.DeadlineDuration
	}
	return 0
}

func (m *OrgProposalState) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *OrgProposalState) GetTaskRole() TaskRole {
	if m != nil {
		return m.TaskRole
	}
	return TaskRole_TaskRole_Unknown
}

func (m *OrgProposalState) GetTaskOrg() *TaskOrganization {
	if m != nil {
		return m.TaskOrg
	}
	return nil
}

func (m *OrgProposalState) GetPeriodNum() uint32 {
	if m != nil {
		return m.PeriodNum
	}
	return 0
}

func (m *OrgProposalState) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *OrgProposalState) GetTaskSender() *TaskOrganization {
	if m != nil {
		return m.TaskSender
	}
	return nil
}

type PrepareVoteResource struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	PartyId              string   `protobuf:"bytes,4,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareVoteResource) Reset()         { *m = PrepareVoteResource{} }
func (m *PrepareVoteResource) String() string { return proto.CompactTextString(m) }
func (*PrepareVoteResource) ProtoMessage()    {}
func (*PrepareVoteResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_aefd563c87ad898c, []int{2}
}
func (m *PrepareVoteResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareVoteResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareVoteResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareVoteResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareVoteResource.Merge(m, src)
}
func (m *PrepareVoteResource) XXX_Size() int {
	return m.Size()
}
func (m *PrepareVoteResource) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareVoteResource.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareVoteResource proto.InternalMessageInfo

func (m *PrepareVoteResource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrepareVoteResource) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PrepareVoteResource) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *PrepareVoteResource) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

type MsgOption struct {
	ProposalId           string            `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	SenderRole           TaskRole          `protobuf:"varint,2,opt,name=sender_role,json=senderRole,proto3,enum=carrier.types.TaskRole" json:"sender_role,omitempty"`
	SenderPartyId        string            `protobuf:"bytes,3,opt,name=sender_party_id,json=senderPartyId,proto3" json:"sender_party_id,omitempty"`
	ReceiverRole         TaskRole          `protobuf:"varint,4,opt,name=receiver_role,json=receiverRole,proto3,enum=carrier.types.TaskRole" json:"receiver_role,omitempty"`
	ReceiverPartyId      string            `protobuf:"bytes,5,opt,name=receiver_party_id,json=receiverPartyId,proto3" json:"receiver_party_id,omitempty"`
	Owner                *TaskOrganization `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MsgOption) Reset()         { *m = MsgOption{} }
func (m *MsgOption) String() string { return proto.CompactTextString(m) }
func (*MsgOption) ProtoMessage()    {}
func (*MsgOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_aefd563c87ad898c, []int{3}
}
func (m *MsgOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOption.Merge(m, src)
}
func (m *MsgOption) XXX_Size() int {
	return m.Size()
}
func (m *MsgOption) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOption.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOption proto.InternalMessageInfo

func (m *MsgOption) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *MsgOption) GetSenderRole() TaskRole {
	if m != nil {
		return m.SenderRole
	}
	return TaskRole_TaskRole_Unknown
}

func (m *MsgOption) GetSenderPartyId() string {
	if m != nil {
		return m.SenderPartyId
	}
	return ""
}

func (m *MsgOption) GetReceiverRole() TaskRole {
	if m != nil {
		return m.ReceiverRole
	}
	return TaskRole_TaskRole_Unknown
}

func (m *MsgOption) GetReceiverPartyId() string {
	if m != nil {
		return m.ReceiverPartyId
	}
	return ""
}

func (m *MsgOption) GetOwner() *TaskOrganization {
	if m != nil {
		return m.Owner
	}
	return nil
}

type PrepareVote struct {
	MsgOption            *MsgOption           `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty"`
	VoteOption           uint32               `protobuf:"varint,2,opt,name=vote_option,json=voteOption,proto3" json:"vote_option,omitempty"`
	PeerInfo             *PrepareVoteResource `protobuf:"bytes,3,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info,omitempty"`
	CreateAt             uint64               `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Sign                 []byte               `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PrepareVote) Reset()         { *m = PrepareVote{} }
func (m *PrepareVote) String() string { return proto.CompactTextString(m) }
func (*PrepareVote) ProtoMessage()    {}
func (*PrepareVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_aefd563c87ad898c, []int{4}
}
func (m *PrepareVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareVote.Merge(m, src)
}
func (m *PrepareVote) XXX_Size() int {
	return m.Size()
}
func (m *PrepareVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareVote.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareVote proto.InternalMessageInfo

func (m *PrepareVote) GetMsgOption() *MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *PrepareVote) GetVoteOption() uint32 {
	if m != nil {
		return m.VoteOption
	}
	return 0
}

func (m *PrepareVote) GetPeerInfo() *PrepareVoteResource {
	if m != nil {
		return m.PeerInfo
	}
	return nil
}

func (m *PrepareVote) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *PrepareVote) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ConfirmVote struct {
	MsgOption            *MsgOption `protobuf:"bytes,1,opt,name=msg_option,json=msgOption,proto3" json:"msg_option,omitempty"`
	VoteOption           uint32     `protobuf:"varint,2,opt,name=vote_option,json=voteOption,proto3" json:"vote_option,omitempty"`
	CreateAt             uint64     `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Sign                 []byte     `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConfirmVote) Reset()         { *m = ConfirmVote{} }
func (m *ConfirmVote) String() string { return proto.CompactTextString(m) }
func (*ConfirmVote) ProtoMessage()    {}
func (*ConfirmVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_aefd563c87ad898c, []int{5}
}
func (m *ConfirmVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmVote.Merge(m, src)
}
func (m *ConfirmVote) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmVote.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmVote proto.InternalMessageInfo

func (m *ConfirmVote) GetMsgOption() *MsgOption {
	if m != nil {
		return m.MsgOption
	}
	return nil
}

func (m *ConfirmVote) GetVoteOption() uint32 {
	if m != nil {
		return m.VoteOption
	}
	return 0
}

func (m *ConfirmVote) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *ConfirmVote) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func init() {
	proto.RegisterType((*ProposalTask)(nil), "carrier.types.ProposalTask")
	proto.RegisterType((*OrgProposalState)(nil), "carrier.types.OrgProposalState")
	proto.RegisterType((*PrepareVoteResource)(nil), "carrier.types.PrepareVoteResource")
	proto.RegisterType((*MsgOption)(nil), "carrier.types.MsgOption")
	proto.RegisterType((*PrepareVote)(nil), "carrier.types.PrepareVote")
	proto.RegisterType((*ConfirmVote)(nil), "carrier.types.ConfirmVote")
}

func init() {
	proto.RegisterFile("carrier/types/consensusstate.proto", fileDescriptor_aefd563c87ad898c)
}

var fileDescriptor_aefd563c87ad898c = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x8d, 0xdb, 0xc4, 0xe3, 0xa6, 0x1f, 0xcb, 0xa1, 0x06, 0x44, 0x1a, 0xf9, 0x80, 0x22,
	0x90, 0x52, 0x29, 0x80, 0x40, 0x08, 0x09, 0x0a, 0x5c, 0x72, 0x80, 0x54, 0x2e, 0xe2, 0xc0, 0xc5,
	0xda, 0xc6, 0x53, 0xcb, 0x6a, 0xe2, 0x5d, 0xcd, 0x6e, 0x8a, 0xca, 0x2f, 0xe1, 0x5f, 0xf0, 0x37,
	0x38, 0x72, 0xe5, 0x86, 0xca, 0x1f, 0x41, 0x1e, 0xdb, 0xa1, 0xa9, 0xaa, 0xb6, 0x17, 0x6e, 0xbb,
	0x33, 0xf3, 0xfc, 0xde, 0xbe, 0xb7, 0x6b, 0x88, 0x26, 0x92, 0x28, 0x47, 0xda, 0xb5, 0xa7, 0x1a,
	0xcd, 0xee, 0x44, 0x15, 0x06, 0x0b, 0x33, 0x37, 0xc6, 0x4a, 0x8b, 0x03, 0x4d, 0xca, 0x2a, 0xd1,
	0xa9, 0x67, 0x06, 0x3c, 0x73, 0x37, 0x5c, 0x86, 0x1c, 0x4a, 0x53, 0x0f, 0x46, 0x08, 0x6b, 0xfb,
	0xa4, 0xb4, 0x32, 0x72, 0xfa, 0x51, 0x9a, 0x63, 0xb1, 0x03, 0x81, 0xae, 0xf7, 0x49, 0x9e, 0x86,
	0x4e, 0xcf, 0xe9, 0xfb, 0x31, 0x34, 0xa5, 0x51, 0x2a, 0xb6, 0xa1, 0x65, 0xa5, 0x39, 0x2e, 0x9b,
	0x2e, 0x37, 0x57, 0xcb, 0xed, 0x28, 0x15, 0xf7, 0xc0, 0x9f, 0x10, 0x4a, 0x8b, 0x89, 0xb4, 0xe1,
	0xad, 0x9e, 0xd3, 0xf7, 0xe2, 0x76, 0x55, 0xd8, 0xb3, 0xd1, 0x1f, 0x17, 0x36, 0xc7, 0x94, 0x35,
	0x54, 0x07, 0xa5, 0x54, 0x71, 0x07, 0xda, 0xc6, 0x4a, 0xb2, 0x25, 0xc0, 0x61, 0x40, 0x8b, 0xf7,
	0x7b, 0x56, 0x3c, 0x82, 0xad, 0x14, 0x65, 0x3a, 0xcd, 0x0b, 0x4c, 0xd2, 0x39, 0x49, 0x9b, 0xab,
	0x82, 0xf9, 0xbc, 0x78, 0xb3, 0x69, 0xbc, 0xab, 0xeb, 0x57, 0x32, 0x8b, 0x27, 0xe0, 0xb3, 0x5e,
	0x52, 0x53, 0x0c, 0xbd, 0x9e, 0xd3, 0x5f, 0x1f, 0x6e, 0x0f, 0x96, 0xdc, 0x19, 0x94, 0x07, 0x8f,
	0xd5, 0x14, 0xe3, 0xb6, 0xad, 0x57, 0xe2, 0x05, 0xf0, 0x3a, 0x51, 0x94, 0x85, 0x2b, 0x3d, 0xa7,
	0x1f, 0x0c, 0x77, 0x2e, 0x01, 0x8d, 0x29, 0x93, 0x45, 0xfe, 0x95, 0x55, 0xc4, 0x6c, 0xcb, 0x98,
	0x32, 0x71, 0x1f, 0x40, 0x23, 0xe5, 0x2a, 0x4d, 0x8a, 0xf9, 0x2c, 0x5c, 0xed, 0x39, 0xfd, 0x4e,
	0xec, 0x57, 0x95, 0x0f, 0xf3, 0xd9, 0x79, 0x03, 0x5b, 0x4b, 0x06, 0xbe, 0x86, 0x80, 0x1b, 0x06,
	0x8b, 0x14, 0x29, 0x6c, 0xdf, 0x8c, 0x16, 0x4a, 0xcc, 0x01, 0x43, 0xa2, 0x14, 0x6e, 0xef, 0x13,
	0x6a, 0x49, 0xf8, 0x49, 0x59, 0x8c, 0xd1, 0xa8, 0x39, 0x4d, 0x50, 0xac, 0x83, 0xbb, 0x88, 0xd2,
	0xcd, 0x53, 0xde, 0xeb, 0x3a, 0x3d, 0x37, 0xd7, 0x42, 0x80, 0xa7, 0x15, 0x55, 0xd6, 0xf9, 0x31,
	0xaf, 0xcb, 0x6c, 0xb4, 0x24, 0x7b, 0x5a, 0xca, 0xf4, 0xb8, 0xde, 0xe2, 0xfd, 0x28, 0x8d, 0xbe,
	0xbb, 0xe0, 0xbf, 0x37, 0xd9, 0x58, 0xb3, 0xf9, 0xd7, 0x5e, 0x98, 0xe7, 0x10, 0x54, 0x27, 0xaa,
	0x22, 0x70, 0xaf, 0x8e, 0x00, 0xaa, 0x59, 0x0e, 0xe1, 0x01, 0x6c, 0xd4, 0xc8, 0x85, 0x94, 0x4a,
	0x62, 0xa7, 0x2a, 0xef, 0x57, 0x82, 0xc4, 0x4b, 0xe8, 0x10, 0x4e, 0x30, 0x3f, 0x69, 0x38, 0xae,
	0x89, 0x79, 0xad, 0x99, 0x66, 0x96, 0x87, 0xb0, 0xb5, 0x40, 0x2f, 0x78, 0x56, 0x98, 0x67, 0xa3,
	0x69, 0x34, 0x4c, 0x4f, 0x61, 0x45, 0x7d, 0x29, 0x90, 0x38, 0xd5, 0x1b, 0x84, 0x53, 0x4d, 0x47,
	0xbf, 0x1c, 0x08, 0xce, 0x05, 0x23, 0x9e, 0x01, 0xcc, 0x4c, 0x96, 0x28, 0x76, 0x90, 0x2d, 0x0b,
	0x86, 0xe1, 0x85, 0x6f, 0x2d, 0x1c, 0x8e, 0xfd, 0xd9, 0x79, 0xb3, 0x4f, 0x94, 0xc5, 0x06, 0xe9,
	0xf2, 0xdd, 0x82, 0xb2, 0x54, 0x0f, 0xbc, 0x02, 0x5f, 0x23, 0x52, 0x92, 0x17, 0x47, 0x8a, 0xcd,
	0x0a, 0x86, 0xd1, 0x85, 0x0f, 0x5f, 0x72, 0x43, 0xe2, 0x76, 0x09, 0x1a, 0x15, 0x47, 0x6a, 0xf9,
	0x2d, 0x79, 0x17, 0xde, 0x92, 0x00, 0xcf, 0xe4, 0x59, 0xc1, 0xee, 0xac, 0xc5, 0xbc, 0x8e, 0xbe,
	0x39, 0x10, 0xbc, 0x55, 0xc5, 0x51, 0x4e, 0xb3, 0xff, 0x7c, 0xb6, 0x2b, 0x9f, 0x79, 0x23, 0xcd,
	0xfb, 0x27, 0xed, 0x4d, 0xf7, 0xc7, 0x59, 0xd7, 0xf9, 0x79, 0xd6, 0x75, 0x7e, 0x9f, 0x75, 0x9d,
	0xcf, 0x9b, 0xfa, 0x70, 0x77, 0xe9, 0x37, 0x78, 0xb8, 0xca, 0xbf, 0xc0, 0xc7, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xbf, 0xa0, 0x15, 0x14, 0x51, 0x05, 0x00, 0x00,
}

func (m *ProposalTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrgProposalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrgProposalState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrgProposalState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskSender != nil {
		{
			size, err := m.TaskSender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PeriodNum != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.PeriodNum))
		i--
		dAtA[i] = 0x30
	}
	if m.TaskOrg != nil {
		{
			size, err := m.TaskOrg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskRole != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.TaskRole))
		i--
		dAtA[i] = 0x20
	}
	if m.CreateAt != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if m.DeadlineDuration != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.DeadlineDuration))
		i--
		dAtA[i] = 0x10
	}
	if m.StartAt != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrepareVoteResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareVoteResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareVoteResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PartyId) > 0 {
		i -= len(m.PartyId)
		copy(dAtA[i:], m.PartyId)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.PartyId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ReceiverPartyId) > 0 {
		i -= len(m.ReceiverPartyId)
		copy(dAtA[i:], m.ReceiverPartyId)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.ReceiverPartyId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReceiverRole != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.ReceiverRole))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SenderPartyId) > 0 {
		i -= len(m.SenderPartyId)
		copy(dAtA[i:], m.SenderPartyId)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.SenderPartyId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderRole != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.SenderRole))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrepareVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreateAt != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x20
	}
	if m.PeerInfo != nil {
		{
			size, err := m.PeerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VoteOption != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.VoteOption))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintConsensusstate(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreateAt != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if m.VoteOption != 0 {
		i = encodeVarintConsensusstate(dAtA, i, uint64(m.VoteOption))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgOption != nil {
		{
			size, err := m.MsgOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConsensusstate(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsensusstate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposalTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovConsensusstate(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrgProposalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartAt != 0 {
		n += 1 + sovConsensusstate(uint64(m.StartAt))
	}
	if m.DeadlineDuration != 0 {
		n += 1 + sovConsensusstate(uint64(m.DeadlineDuration))
	}
	if m.CreateAt != 0 {
		n += 1 + sovConsensusstate(uint64(m.CreateAt))
	}
	if m.TaskRole != 0 {
		n += 1 + sovConsensusstate(uint64(m.TaskRole))
	}
	if m.TaskOrg != nil {
		l = m.TaskOrg.Size()
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.PeriodNum != 0 {
		n += 1 + sovConsensusstate(uint64(m.PeriodNum))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.TaskSender != nil {
		l = m.TaskSender.Size()
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrepareVoteResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	l = len(m.PartyId)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.SenderRole != 0 {
		n += 1 + sovConsensusstate(uint64(m.SenderRole))
	}
	l = len(m.SenderPartyId)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.ReceiverRole != 0 {
		n += 1 + sovConsensusstate(uint64(m.ReceiverRole))
	}
	l = len(m.ReceiverPartyId)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrepareVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.VoteOption != 0 {
		n += 1 + sovConsensusstate(uint64(m.VoteOption))
	}
	if m.PeerInfo != nil {
		l = m.PeerInfo.Size()
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovConsensusstate(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfirmVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgOption != nil {
		l = m.MsgOption.Size()
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.VoteOption != 0 {
		n += 1 + sovConsensusstate(uint64(m.VoteOption))
	}
	if m.CreateAt != 0 {
		n += 1 + sovConsensusstate(uint64(m.CreateAt))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovConsensusstate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConsensusstate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsensusstate(x uint64) (n int) {
	return sovConsensusstate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrgProposalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgProposalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgProposalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadlineDuration", wireType)
			}
			m.DeadlineDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeadlineDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRole", wireType)
			}
			m.TaskRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskRole |= TaskRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskOrg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskOrg == nil {
				m.TaskOrg = &TaskOrganization{}
			}
			if err := m.TaskOrg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodNum", wireType)
			}
			m.PeriodNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskSender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskSender == nil {
				m.TaskSender = &TaskOrganization{}
			}
			if err := m.TaskSender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareVoteResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareVoteResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareVoteResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderRole", wireType)
			}
			m.SenderRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderRole |= TaskRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderPartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverRole", wireType)
			}
			m.ReceiverRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverRole |= TaskRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverPartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverPartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TaskOrganization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			m.VoteOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteOption |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerInfo == nil {
				m.PeerInfo = &PrepareVoteResource{}
			}
			if err := m.PeerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgOption == nil {
				m.MsgOption = &MsgOption{}
			}
			if err := m.MsgOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			m.VoteOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteOption |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusstate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsensusstate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsensusstate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensusstate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsensusstate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsensusstate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsensusstate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsensusstate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsensusstate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsensusstate = fmt.Errorf("proto: unexpected end of group")
)
