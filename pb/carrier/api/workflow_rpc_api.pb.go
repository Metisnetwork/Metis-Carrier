// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carrier/api/workflow_rpc_api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/datumtechs/datum-network-carrier/pb/carrier/types"
	constant "github.com/datumtechs/datum-network-carrier/pb/common/constant"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PublishWorkFlowDeclareRequest struct {
	Desc                 string                       `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	WorkflowName         string                       `protobuf:"bytes,2,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	PolicyType           constant.WorkFlowPolicyType  `protobuf:"varint,3,opt,name=policy_type,json=policyType,proto3,enum=common.constant.WorkFlowPolicyType" json:"policy_type,omitempty"`
	Policy               string                       `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	TaskList             []*PublishTaskDeclareRequest `protobuf:"bytes,5,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	User                 string                       `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	UserType             constant.UserType            `protobuf:"varint,7,opt,name=user_type,json=userType,proto3,enum=common.constant.UserType" json:"user_type,omitempty"`
	Sign                 []byte                       `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PublishWorkFlowDeclareRequest) Reset()         { *m = PublishWorkFlowDeclareRequest{} }
func (m *PublishWorkFlowDeclareRequest) String() string { return proto.CompactTextString(m) }
func (*PublishWorkFlowDeclareRequest) ProtoMessage()    {}
func (*PublishWorkFlowDeclareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e841b4f8d26773f4, []int{0}
}
func (m *PublishWorkFlowDeclareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishWorkFlowDeclareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishWorkFlowDeclareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishWorkFlowDeclareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishWorkFlowDeclareRequest.Merge(m, src)
}
func (m *PublishWorkFlowDeclareRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishWorkFlowDeclareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishWorkFlowDeclareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishWorkFlowDeclareRequest proto.InternalMessageInfo

func (m *PublishWorkFlowDeclareRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *PublishWorkFlowDeclareRequest) GetWorkflowName() string {
	if m != nil {
		return m.WorkflowName
	}
	return ""
}

func (m *PublishWorkFlowDeclareRequest) GetPolicyType() constant.WorkFlowPolicyType {
	if m != nil {
		return m.PolicyType
	}
	return constant.WorkFlowPolicyType_Unknown_Policy
}

func (m *PublishWorkFlowDeclareRequest) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *PublishWorkFlowDeclareRequest) GetTaskList() []*PublishTaskDeclareRequest {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *PublishWorkFlowDeclareRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *PublishWorkFlowDeclareRequest) GetUserType() constant.UserType {
	if m != nil {
		return m.UserType
	}
	return constant.UserType_User_Unknown
}

func (m *PublishWorkFlowDeclareRequest) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type PublishWorkFlowDeclareResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishWorkFlowDeclareResponse) Reset()         { *m = PublishWorkFlowDeclareResponse{} }
func (m *PublishWorkFlowDeclareResponse) String() string { return proto.CompactTextString(m) }
func (*PublishWorkFlowDeclareResponse) ProtoMessage()    {}
func (*PublishWorkFlowDeclareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e841b4f8d26773f4, []int{1}
}
func (m *PublishWorkFlowDeclareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishWorkFlowDeclareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishWorkFlowDeclareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishWorkFlowDeclareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishWorkFlowDeclareResponse.Merge(m, src)
}
func (m *PublishWorkFlowDeclareResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishWorkFlowDeclareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishWorkFlowDeclareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishWorkFlowDeclareResponse proto.InternalMessageInfo

func (m *PublishWorkFlowDeclareResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PublishWorkFlowDeclareResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PublishWorkFlowDeclareResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type WorkFlowTaskStatus struct {
	TaskId               string             `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status               constant.TaskState `protobuf:"varint,2,opt,name=status,proto3,enum=common.constant.TaskState" json:"status,omitempty"`
	TaskName             string             `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	StartAt              uint64             `protobuf:"varint,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt                uint64             `protobuf:"varint,5,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WorkFlowTaskStatus) Reset()         { *m = WorkFlowTaskStatus{} }
func (m *WorkFlowTaskStatus) String() string { return proto.CompactTextString(m) }
func (*WorkFlowTaskStatus) ProtoMessage()    {}
func (*WorkFlowTaskStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e841b4f8d26773f4, []int{2}
}
func (m *WorkFlowTaskStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkFlowTaskStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkFlowTaskStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkFlowTaskStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkFlowTaskStatus.Merge(m, src)
}
func (m *WorkFlowTaskStatus) XXX_Size() int {
	return m.Size()
}
func (m *WorkFlowTaskStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkFlowTaskStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkFlowTaskStatus proto.InternalMessageInfo

func (m *WorkFlowTaskStatus) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *WorkFlowTaskStatus) GetStatus() constant.TaskState {
	if m != nil {
		return m.Status
	}
	return constant.TaskState_TaskState_Unknown
}

func (m *WorkFlowTaskStatus) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *WorkFlowTaskStatus) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *WorkFlowTaskStatus) GetEndAt() uint64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

type QueryWorkStatusRequest struct {
	WorkflowIds          []string `protobuf:"bytes,1,rep,name=workflow_ids,json=workflowIds,proto3" json:"workflow_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryWorkStatusRequest) Reset()         { *m = QueryWorkStatusRequest{} }
func (m *QueryWorkStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkStatusRequest) ProtoMessage()    {}
func (*QueryWorkStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e841b4f8d26773f4, []int{3}
}
func (m *QueryWorkStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkStatusRequest.Merge(m, src)
}
func (m *QueryWorkStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkStatusRequest proto.InternalMessageInfo

func (m *QueryWorkStatusRequest) GetWorkflowIds() []string {
	if m != nil {
		return m.WorkflowIds
	}
	return nil
}

type WorkFlowStatus struct {
	Status               constant.WorkFlowState `protobuf:"varint,1,opt,name=status,proto3,enum=common.constant.WorkFlowState" json:"status,omitempty"`
	TaskList             []*WorkFlowTaskStatus  `protobuf:"bytes,2,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *WorkFlowStatus) Reset()         { *m = WorkFlowStatus{} }
func (m *WorkFlowStatus) String() string { return proto.CompactTextString(m) }
func (*WorkFlowStatus) ProtoMessage()    {}
func (*WorkFlowStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e841b4f8d26773f4, []int{4}
}
func (m *WorkFlowStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkFlowStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkFlowStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkFlowStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkFlowStatus.Merge(m, src)
}
func (m *WorkFlowStatus) XXX_Size() int {
	return m.Size()
}
func (m *WorkFlowStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkFlowStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkFlowStatus proto.InternalMessageInfo

func (m *WorkFlowStatus) GetStatus() constant.WorkFlowState {
	if m != nil {
		return m.Status
	}
	return constant.WorkFlowState_WorkFlowState_Unknown
}

func (m *WorkFlowStatus) GetTaskList() []*WorkFlowTaskStatus {
	if m != nil {
		return m.TaskList
	}
	return nil
}

type QueryWorkStatusResponse struct {
	Status               int32             `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	WorkflowStatusList   []*WorkFlowStatus `protobuf:"bytes,3,rep,name=workflow_status_list,json=workflowStatusList,proto3" json:"workflow_status_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *QueryWorkStatusResponse) Reset()         { *m = QueryWorkStatusResponse{} }
func (m *QueryWorkStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkStatusResponse) ProtoMessage()    {}
func (*QueryWorkStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e841b4f8d26773f4, []int{5}
}
func (m *QueryWorkStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkStatusResponse.Merge(m, src)
}
func (m *QueryWorkStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkStatusResponse proto.InternalMessageInfo

func (m *QueryWorkStatusResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryWorkStatusResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *QueryWorkStatusResponse) GetWorkflowStatusList() []*WorkFlowStatus {
	if m != nil {
		return m.WorkflowStatusList
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishWorkFlowDeclareRequest)(nil), "carrier.api.PublishWorkFlowDeclareRequest")
	proto.RegisterType((*PublishWorkFlowDeclareResponse)(nil), "carrier.api.PublishWorkFlowDeclareResponse")
	proto.RegisterType((*WorkFlowTaskStatus)(nil), "carrier.api.WorkFlowTaskStatus")
	proto.RegisterType((*QueryWorkStatusRequest)(nil), "carrier.api.QueryWorkStatusRequest")
	proto.RegisterType((*WorkFlowStatus)(nil), "carrier.api.WorkFlowStatus")
	proto.RegisterType((*QueryWorkStatusResponse)(nil), "carrier.api.QueryWorkStatusResponse")
}

func init() {
	proto.RegisterFile("carrier/api/workflow_rpc_api.proto", fileDescriptor_e841b4f8d26773f4)
}

var fileDescriptor_e841b4f8d26773f4 = []byte{
	// 712 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xd5, 0x38, 0x4d, 0x9a, 0x4c, 0xfa, 0xe5, 0x43, 0x03, 0xb4, 0x69, 0x5a, 0x42, 0xea, 0x20,
	0x08, 0x45, 0x8d, 0x45, 0x90, 0xba, 0x28, 0x6c, 0x0a, 0x15, 0xa2, 0x12, 0xa0, 0x62, 0x8a, 0x90,
	0xba, 0x89, 0x26, 0xf6, 0x90, 0x8e, 0x62, 0x7b, 0x8c, 0x67, 0xdc, 0x2a, 0x5b, 0x16, 0x6c, 0xd8,
	0xc1, 0x8e, 0xa7, 0xe0, 0x01, 0x78, 0x00, 0x96, 0x48, 0x2c, 0xd9, 0xa0, 0x8a, 0x07, 0x41, 0xf3,
	0x63, 0x93, 0x28, 0x29, 0x82, 0x55, 0xee, 0xf5, 0xfd, 0x3b, 0xe7, 0xdc, 0x9b, 0x81, 0xb6, 0x87,
	0x93, 0x84, 0x92, 0xc4, 0xc1, 0x31, 0x75, 0x4e, 0x59, 0x32, 0x7a, 0x15, 0xb0, 0xd3, 0x7e, 0x12,
	0x7b, 0x7d, 0x1c, 0xd3, 0x6e, 0x9c, 0x30, 0xc1, 0x50, 0xd5, 0xe4, 0x74, 0x71, 0x4c, 0x1b, 0xb6,
	0xc7, 0xc2, 0x90, 0x45, 0x8e, 0xc7, 0x22, 0x2e, 0x70, 0x24, 0x1c, 0x13, 0xec, 0x93, 0x28, 0x0d,
	0x75, 0x41, 0xa3, 0x91, 0x35, 0x15, 0xe3, 0x98, 0x70, 0x47, 0x57, 0x98, 0xd8, 0xfa, 0x90, 0xb1,
	0x61, 0x40, 0xd4, 0x3c, 0x1c, 0x45, 0x4c, 0x60, 0x41, 0x59, 0xc4, 0x4d, 0xb4, 0x39, 0x09, 0x47,
	0x60, 0x3e, 0x9a, 0x86, 0x62, 0x7f, 0xb7, 0xe0, 0x95, 0x83, 0x74, 0x10, 0x50, 0x7e, 0xfc, 0x92,
	0x25, 0xa3, 0x87, 0x01, 0x3b, 0xdd, 0x23, 0x5e, 0x80, 0x13, 0xe2, 0x92, 0xd7, 0x29, 0xe1, 0x02,
	0x21, 0xb8, 0xe0, 0x13, 0xee, 0xd5, 0x41, 0x0b, 0x74, 0x2a, 0xae, 0xb2, 0x51, 0x1b, 0xfe, 0x97,
	0x53, 0x8b, 0x70, 0x48, 0xea, 0x96, 0x0a, 0x2e, 0x65, 0x1f, 0x9f, 0xe2, 0x90, 0xa0, 0x3d, 0x58,
	0x8d, 0x59, 0x40, 0xbd, 0x71, 0x5f, 0xa2, 0xae, 0x17, 0x5a, 0xa0, 0x53, 0xeb, 0xb5, 0xbb, 0x06,
	0x7c, 0x46, 0xb7, 0x9b, 0x8d, 0x3d, 0x50, 0xb9, 0x87, 0xe3, 0x98, 0xb8, 0x30, 0xce, 0x6d, 0xb4,
	0x0c, 0x4b, 0xda, 0xab, 0x2f, 0xa8, 0x19, 0xc6, 0x43, 0x0f, 0x60, 0x45, 0xd1, 0x09, 0x28, 0x17,
	0xf5, 0x62, 0xab, 0xd0, 0xa9, 0xf6, 0xae, 0x77, 0x27, 0x74, 0xed, 0x1a, 0x56, 0x87, 0x98, 0x8f,
	0xa6, 0x19, 0xb9, 0x65, 0x59, 0xf8, 0x98, 0x6a, 0x6e, 0x29, 0x27, 0x49, 0xbd, 0xa4, 0xb9, 0x49,
	0x1b, 0x6d, 0xc3, 0x8a, 0xfc, 0xd5, 0xa0, 0x17, 0x15, 0xe8, 0xd5, 0x19, 0xd0, 0x2f, 0x38, 0x49,
	0x14, 0xd4, 0x72, 0x6a, 0x2c, 0xd9, 0x8b, 0xd3, 0x61, 0x54, 0x2f, 0xb7, 0x40, 0x67, 0xc9, 0x55,
	0xb6, 0x7d, 0x04, 0x9b, 0xe7, 0x89, 0xcb, 0x63, 0x16, 0x71, 0x45, 0x8f, 0x0b, 0x2c, 0x52, 0xae,
	0xf4, 0x2d, 0xba, 0xc6, 0x43, 0x17, 0x60, 0x21, 0xe4, 0x43, 0xa3, 0xab, 0x34, 0x51, 0x0d, 0x5a,
	0xd4, 0x57, 0x2a, 0x56, 0x5c, 0x8b, 0xfa, 0xf6, 0x27, 0x00, 0x51, 0xd6, 0x55, 0x92, 0x7c, 0xae,
	0x0b, 0x57, 0xe0, 0xa2, 0xd2, 0x85, 0xfa, 0x66, 0x63, 0x25, 0xe9, 0xee, 0xfb, 0xa8, 0x97, 0x4f,
	0xb2, 0x14, 0xa9, 0xc6, 0x0c, 0xa9, 0xac, 0x0b, 0xc9, 0x51, 0xac, 0x19, 0x91, 0xd5, 0x8e, 0xf5,
	0x68, 0x25, 0x9e, 0xda, 0xef, 0x2a, 0x2c, 0x73, 0x81, 0x13, 0xd1, 0xc7, 0x42, 0xed, 0x66, 0xc1,
	0x5d, 0x54, 0xfe, 0xae, 0x40, 0x97, 0x61, 0x89, 0x44, 0xbe, 0x0c, 0x14, 0x55, 0xa0, 0x48, 0x22,
	0x7f, 0x57, 0xd8, 0x77, 0xe1, 0xf2, 0xb3, 0x94, 0x24, 0x63, 0x09, 0x5b, 0xc3, 0xcd, 0x8e, 0x6c,
	0x03, 0xe6, 0xb7, 0xd3, 0xa7, 0xbe, 0x14, 0xa3, 0xd0, 0xa9, 0xb8, 0xd5, 0xec, 0xdb, 0xbe, 0xcf,
	0xed, 0xb7, 0x00, 0xd6, 0x32, 0xbe, 0x86, 0xeb, 0xf6, 0x94, 0x78, 0xb5, 0x5e, 0xf3, 0xdc, 0xe3,
	0x9a, 0xa6, 0x75, 0x6f, 0xf2, 0x76, 0x2c, 0x75, 0x3b, 0x57, 0xa7, 0x6e, 0x67, 0x56, 0xd7, 0xdf,
	0x47, 0x63, 0xbf, 0x07, 0x70, 0x65, 0x86, 0xc6, 0x3f, 0xaf, 0xf3, 0x09, 0xbc, 0x94, 0x33, 0xd6,
	0x49, 0x1a, 0x4e, 0x41, 0xc1, 0x59, 0x9b, 0x0b, 0xc7, 0x0c, 0x43, 0x59, 0xa1, 0xf6, 0x25, 0xa8,
	0xde, 0x67, 0x0b, 0xfe, 0x9f, 0xa7, 0x91, 0xe4, 0x84, 0x7a, 0x04, 0x7d, 0x04, 0x70, 0x79, 0xfe,
	0xf9, 0xa1, 0xcd, 0x79, 0x7f, 0x95, 0xf9, 0x0f, 0x40, 0xe3, 0xd6, 0x5f, 0xe5, 0x6a, 0x01, 0xec,
	0x1b, 0x6f, 0xbe, 0xfd, 0xfc, 0x60, 0x6d, 0xd8, 0xeb, 0xd9, 0x33, 0xe6, 0x9c, 0xdc, 0xce, 0x9f,
	0x41, 0x27, 0xd6, 0xc5, 0x3b, 0x60, 0x13, 0xbd, 0x03, 0xf0, 0x62, 0xae, 0xe2, 0xc4, 0x4e, 0xdb,
	0x53, 0xd3, 0xe6, 0x9f, 0x4b, 0xe3, 0xda, 0x9f, 0x93, 0x0c, 0x96, 0x9b, 0x0a, 0x4b, 0xdb, 0x6e,
	0xce, 0xc5, 0x32, 0x24, 0x42, 0xe7, 0xef, 0x80, 0xcd, 0xfb, 0x8f, 0xbe, 0x9c, 0x35, 0xc1, 0xd7,
	0xb3, 0x26, 0xf8, 0x71, 0xd6, 0x04, 0x47, 0x3b, 0x43, 0x2a, 0x8e, 0xd3, 0x81, 0xbc, 0x26, 0xc7,
	0xc7, 0x22, 0x0d, 0x05, 0xf1, 0x8e, 0xb9, 0x36, 0xb7, 0x22, 0x22, 0x64, 0x8f, 0xad, 0xac, 0x67,
	0x3c, 0x70, 0x26, 0xde, 0xd8, 0x41, 0x49, 0xbd, 0xab, 0x77, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff,
	0xf2, 0x03, 0x66, 0x87, 0x08, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkFlowServiceClient is the client API for WorkFlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkFlowServiceClient interface {
	//发布工作流
	PublishWorkFlowDeclare(ctx context.Context, in *PublishWorkFlowDeclareRequest, opts ...grpc.CallOption) (*PublishWorkFlowDeclareResponse, error)
	//查询工作流状态
	QueryWorkFlowStatus(ctx context.Context, in *QueryWorkStatusRequest, opts ...grpc.CallOption) (*QueryWorkStatusResponse, error)
}

type workFlowServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkFlowServiceClient(cc *grpc.ClientConn) WorkFlowServiceClient {
	return &workFlowServiceClient{cc}
}

func (c *workFlowServiceClient) PublishWorkFlowDeclare(ctx context.Context, in *PublishWorkFlowDeclareRequest, opts ...grpc.CallOption) (*PublishWorkFlowDeclareResponse, error) {
	out := new(PublishWorkFlowDeclareResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.WorkFlowService/PublishWorkFlowDeclare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowServiceClient) QueryWorkFlowStatus(ctx context.Context, in *QueryWorkStatusRequest, opts ...grpc.CallOption) (*QueryWorkStatusResponse, error) {
	out := new(QueryWorkStatusResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.WorkFlowService/QueryWorkFlowStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkFlowServiceServer is the server API for WorkFlowService service.
type WorkFlowServiceServer interface {
	//发布工作流
	PublishWorkFlowDeclare(context.Context, *PublishWorkFlowDeclareRequest) (*PublishWorkFlowDeclareResponse, error)
	//查询工作流状态
	QueryWorkFlowStatus(context.Context, *QueryWorkStatusRequest) (*QueryWorkStatusResponse, error)
}

// UnimplementedWorkFlowServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkFlowServiceServer struct {
}

func (*UnimplementedWorkFlowServiceServer) PublishWorkFlowDeclare(ctx context.Context, req *PublishWorkFlowDeclareRequest) (*PublishWorkFlowDeclareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishWorkFlowDeclare not implemented")
}
func (*UnimplementedWorkFlowServiceServer) QueryWorkFlowStatus(ctx context.Context, req *QueryWorkStatusRequest) (*QueryWorkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWorkFlowStatus not implemented")
}

func RegisterWorkFlowServiceServer(s *grpc.Server, srv WorkFlowServiceServer) {
	s.RegisterService(&_WorkFlowService_serviceDesc, srv)
}

func _WorkFlowService_PublishWorkFlowDeclare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishWorkFlowDeclareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServiceServer).PublishWorkFlowDeclare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.WorkFlowService/PublishWorkFlowDeclare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServiceServer).PublishWorkFlowDeclare(ctx, req.(*PublishWorkFlowDeclareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlowService_QueryWorkFlowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServiceServer).QueryWorkFlowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.WorkFlowService/QueryWorkFlowStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServiceServer).QueryWorkFlowStatus(ctx, req.(*QueryWorkStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkFlowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carrier.api.WorkFlowService",
	HandlerType: (*WorkFlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishWorkFlowDeclare",
			Handler:    _WorkFlowService_PublishWorkFlowDeclare_Handler,
		},
		{
			MethodName: "QueryWorkFlowStatus",
			Handler:    _WorkFlowService_QueryWorkFlowStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carrier/api/workflow_rpc_api.proto",
}

func (m *PublishWorkFlowDeclareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishWorkFlowDeclareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishWorkFlowDeclareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x42
	}
	if m.UserType != 0 {
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TaskList) > 0 {
		for iNdEx := len(m.TaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Policy) > 0 {
		i -= len(m.Policy)
		copy(dAtA[i:], m.Policy)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.Policy)))
		i--
		dAtA[i] = 0x22
	}
	if m.PolicyType != 0 {
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(m.PolicyType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.WorkflowName) > 0 {
		i -= len(m.WorkflowName)
		copy(dAtA[i:], m.WorkflowName)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.WorkflowName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishWorkFlowDeclareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishWorkFlowDeclareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishWorkFlowDeclareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkFlowTaskStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkFlowTaskStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkFlowTaskStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndAt != 0 {
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x28
	}
	if m.StartAt != 0 {
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TaskName) > 0 {
		i -= len(m.TaskName)
		copy(dAtA[i:], m.TaskName)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.TaskName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WorkflowIds) > 0 {
		for iNdEx := len(m.WorkflowIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkflowIds[iNdEx])
			copy(dAtA[i:], m.WorkflowIds[iNdEx])
			i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.WorkflowIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkFlowStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkFlowStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkFlowStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskList) > 0 {
		for iNdEx := len(m.TaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Status != 0 {
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WorkflowStatusList) > 0 {
		for iNdEx := len(m.WorkflowStatusList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkflowStatusList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintWorkflowRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflowRpcApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflowRpcApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PublishWorkFlowDeclareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	l = len(m.WorkflowName)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	if m.PolicyType != 0 {
		n += 1 + sovWorkflowRpcApi(uint64(m.PolicyType))
	}
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	if len(m.TaskList) > 0 {
		for _, e := range m.TaskList {
			l = e.Size()
			n += 1 + l + sovWorkflowRpcApi(uint64(l))
		}
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovWorkflowRpcApi(uint64(m.UserType))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishWorkFlowDeclareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovWorkflowRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkFlowTaskStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWorkflowRpcApi(uint64(m.Status))
	}
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	if m.StartAt != 0 {
		n += 1 + sovWorkflowRpcApi(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovWorkflowRpcApi(uint64(m.EndAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryWorkStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkflowIds) > 0 {
		for _, s := range m.WorkflowIds {
			l = len(s)
			n += 1 + l + sovWorkflowRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkFlowStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovWorkflowRpcApi(uint64(m.Status))
	}
	if len(m.TaskList) > 0 {
		for _, e := range m.TaskList {
			l = e.Size()
			n += 1 + l + sovWorkflowRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryWorkStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovWorkflowRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovWorkflowRpcApi(uint64(l))
	}
	if len(m.WorkflowStatusList) > 0 {
		for _, e := range m.WorkflowStatusList {
			l = e.Size()
			n += 1 + l + sovWorkflowRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkflowRpcApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflowRpcApi(x uint64) (n int) {
	return sovWorkflowRpcApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PublishWorkFlowDeclareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishWorkFlowDeclareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishWorkFlowDeclareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyType", wireType)
			}
			m.PolicyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyType |= constant.WorkFlowPolicyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = append(m.TaskList, &PublishTaskDeclareRequest{})
			if err := m.TaskList[len(m.TaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= constant.UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishWorkFlowDeclareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishWorkFlowDeclareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishWorkFlowDeclareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkFlowTaskStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkFlowTaskStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkFlowTaskStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= constant.TaskState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowIds = append(m.WorkflowIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkFlowStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkFlowStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkFlowStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= constant.WorkFlowState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = append(m.TaskList, &WorkFlowTaskStatus{})
			if err := m.TaskList[len(m.TaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowStatusList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowStatusList = append(m.WorkflowStatusList, &WorkFlowStatus{})
			if err := m.WorkflowStatusList[len(m.WorkflowStatusList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflowRpcApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflowRpcApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflowRpcApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflowRpcApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflowRpcApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflowRpcApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflowRpcApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflowRpcApi = fmt.Errorf("proto: unexpected end of group")
)
