// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carrier/api/vc_rpc_api.proto

package api

import (
	context "context"
	fmt "fmt"
	types "github.com/datumtechs/datum-network-carrier/pb/carrier/types"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApplyVCReq struct {
	IssuerDid            string   `protobuf:"bytes,1,opt,name=issuer_did,json=issuerDid,proto3" json:"issuer_did,omitempty"`
	ApplicantDid         string   `protobuf:"bytes,2,opt,name=applicant_did,json=applicantDid,proto3" json:"applicant_did,omitempty"`
	Context              string   `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	PctId                uint64   `protobuf:"varint,4,opt,name=pct_id,json=pctId,proto3" json:"pct_id,omitempty"`
	Claim                string   `protobuf:"bytes,5,opt,name=claim,proto3" json:"claim,omitempty"`
	ExpirationDate       string   `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	ExtInfo              string   `protobuf:"bytes,7,opt,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty"`
	ReqDigest            string   `protobuf:"bytes,8,opt,name=req_digest,json=reqDigest,proto3" json:"req_digest,omitempty"`
	ReqSignature         string   `protobuf:"bytes,9,opt,name=req_signature,json=reqSignature,proto3" json:"req_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyVCReq) Reset()         { *m = ApplyVCReq{} }
func (m *ApplyVCReq) String() string { return proto.CompactTextString(m) }
func (*ApplyVCReq) ProtoMessage()    {}
func (*ApplyVCReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5abf640613f2d70, []int{0}
}
func (m *ApplyVCReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyVCReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyVCReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyVCReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyVCReq.Merge(m, src)
}
func (m *ApplyVCReq) XXX_Size() int {
	return m.Size()
}
func (m *ApplyVCReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyVCReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyVCReq proto.InternalMessageInfo

func (m *ApplyVCReq) GetIssuerDid() string {
	if m != nil {
		return m.IssuerDid
	}
	return ""
}

func (m *ApplyVCReq) GetApplicantDid() string {
	if m != nil {
		return m.ApplicantDid
	}
	return ""
}

func (m *ApplyVCReq) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *ApplyVCReq) GetPctId() uint64 {
	if m != nil {
		return m.PctId
	}
	return 0
}

func (m *ApplyVCReq) GetClaim() string {
	if m != nil {
		return m.Claim
	}
	return ""
}

func (m *ApplyVCReq) GetExpirationDate() string {
	if m != nil {
		return m.ExpirationDate
	}
	return ""
}

func (m *ApplyVCReq) GetExtInfo() string {
	if m != nil {
		return m.ExtInfo
	}
	return ""
}

func (m *ApplyVCReq) GetReqDigest() string {
	if m != nil {
		return m.ReqDigest
	}
	return ""
}

func (m *ApplyVCReq) GetReqSignature() string {
	if m != nil {
		return m.ReqSignature
	}
	return ""
}

type CreateVCRequest struct {
	ApplicantDid         string   `protobuf:"bytes,1,opt,name=applicant_did,json=applicantDid,proto3" json:"applicant_did,omitempty"`
	Context              string   `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	PctId                uint64   `protobuf:"varint,3,opt,name=pct_id,json=pctId,proto3" json:"pct_id,omitempty"`
	Claim                string   `protobuf:"bytes,4,opt,name=claim,proto3" json:"claim,omitempty"`
	ExpirationDate       string   `protobuf:"bytes,5,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVCRequest) Reset()         { *m = CreateVCRequest{} }
func (m *CreateVCRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVCRequest) ProtoMessage()    {}
func (*CreateVCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5abf640613f2d70, []int{1}
}
func (m *CreateVCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateVCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateVCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateVCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVCRequest.Merge(m, src)
}
func (m *CreateVCRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateVCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVCRequest proto.InternalMessageInfo

func (m *CreateVCRequest) GetApplicantDid() string {
	if m != nil {
		return m.ApplicantDid
	}
	return ""
}

func (m *CreateVCRequest) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *CreateVCRequest) GetPctId() uint64 {
	if m != nil {
		return m.PctId
	}
	return 0
}

func (m *CreateVCRequest) GetClaim() string {
	if m != nil {
		return m.Claim
	}
	return ""
}

func (m *CreateVCRequest) GetExpirationDate() string {
	if m != nil {
		return m.ExpirationDate
	}
	return ""
}

type CreateVCResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Vc                   string   `protobuf:"bytes,3,opt,name=vc,proto3" json:"vc,omitempty"`
	TxInfo               *TxInfo  `protobuf:"bytes,4,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVCResponse) Reset()         { *m = CreateVCResponse{} }
func (m *CreateVCResponse) String() string { return proto.CompactTextString(m) }
func (*CreateVCResponse) ProtoMessage()    {}
func (*CreateVCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5abf640613f2d70, []int{2}
}
func (m *CreateVCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateVCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateVCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateVCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVCResponse.Merge(m, src)
}
func (m *CreateVCResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateVCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVCResponse proto.InternalMessageInfo

func (m *CreateVCResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CreateVCResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CreateVCResponse) GetVc() string {
	if m != nil {
		return m.Vc
	}
	return ""
}

func (m *CreateVCResponse) GetTxInfo() *TxInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

type DownloadVCReq struct {
	IssuerDid            string   `protobuf:"bytes,1,opt,name=issuer_did,json=issuerDid,proto3" json:"issuer_did,omitempty"`
	ApplicantDid         string   `protobuf:"bytes,2,opt,name=applicant_did,json=applicantDid,proto3" json:"applicant_did,omitempty"`
	ReqDigest            string   `protobuf:"bytes,3,opt,name=req_digest,json=reqDigest,proto3" json:"req_digest,omitempty"`
	ReqSignature         string   `protobuf:"bytes,4,opt,name=req_signature,json=reqSignature,proto3" json:"req_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadVCReq) Reset()         { *m = DownloadVCReq{} }
func (m *DownloadVCReq) String() string { return proto.CompactTextString(m) }
func (*DownloadVCReq) ProtoMessage()    {}
func (*DownloadVCReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5abf640613f2d70, []int{3}
}
func (m *DownloadVCReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadVCReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadVCReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadVCReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadVCReq.Merge(m, src)
}
func (m *DownloadVCReq) XXX_Size() int {
	return m.Size()
}
func (m *DownloadVCReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadVCReq.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadVCReq proto.InternalMessageInfo

func (m *DownloadVCReq) GetIssuerDid() string {
	if m != nil {
		return m.IssuerDid
	}
	return ""
}

func (m *DownloadVCReq) GetApplicantDid() string {
	if m != nil {
		return m.ApplicantDid
	}
	return ""
}

func (m *DownloadVCReq) GetReqDigest() string {
	if m != nil {
		return m.ReqDigest
	}
	return ""
}

func (m *DownloadVCReq) GetReqSignature() string {
	if m != nil {
		return m.ReqSignature
	}
	return ""
}

type DownloadVCResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Vc                   string   `protobuf:"bytes,3,opt,name=vc,proto3" json:"vc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadVCResponse) Reset()         { *m = DownloadVCResponse{} }
func (m *DownloadVCResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadVCResponse) ProtoMessage()    {}
func (*DownloadVCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5abf640613f2d70, []int{4}
}
func (m *DownloadVCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadVCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadVCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadVCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadVCResponse.Merge(m, src)
}
func (m *DownloadVCResponse) XXX_Size() int {
	return m.Size()
}
func (m *DownloadVCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadVCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadVCResponse proto.InternalMessageInfo

func (m *DownloadVCResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DownloadVCResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *DownloadVCResponse) GetVc() string {
	if m != nil {
		return m.Vc
	}
	return ""
}

func init() {
	proto.RegisterType((*ApplyVCReq)(nil), "carrier.api.ApplyVCReq")
	proto.RegisterType((*CreateVCRequest)(nil), "carrier.api.CreateVCRequest")
	proto.RegisterType((*CreateVCResponse)(nil), "carrier.api.CreateVCResponse")
	proto.RegisterType((*DownloadVCReq)(nil), "carrier.api.DownloadVCReq")
	proto.RegisterType((*DownloadVCResponse)(nil), "carrier.api.DownloadVCResponse")
}

func init() { proto.RegisterFile("carrier/api/vc_rpc_api.proto", fileDescriptor_c5abf640613f2d70) }

var fileDescriptor_c5abf640613f2d70 = []byte{
	// 677 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0xe5, 0xfc, 0xb5, 0x99, 0xfe, 0x6a, 0xbe, 0x0f, 0x70, 0x43, 0x52, 0x8a, 0x0b, 0x6a,
	0x55, 0x68, 0x2c, 0xca, 0xae, 0x3b, 0x68, 0x16, 0x54, 0x42, 0x2c, 0x52, 0xd4, 0x05, 0x1b, 0x6b,
	0x32, 0x9e, 0xa6, 0x23, 0x6c, 0xcf, 0x64, 0x7c, 0x9c, 0xba, 0x5d, 0x72, 0x0b, 0x2c, 0x58, 0xb2,
	0xe3, 0x5a, 0x58, 0x22, 0xf5, 0x06, 0x50, 0xc5, 0x85, 0x20, 0x8f, 0xed, 0xc4, 0xae, 0x5a, 0x22,
	0x51, 0x56, 0xf1, 0xcc, 0x7b, 0x72, 0x9e, 0x73, 0xde, 0x99, 0x33, 0xa8, 0x4d, 0x89, 0x52, 0x9c,
	0x29, 0x9b, 0x48, 0x6e, 0x8f, 0xa9, 0xa3, 0x24, 0x75, 0x88, 0xe4, 0x5d, 0xa9, 0x04, 0x08, 0xbc,
	0x90, 0xa9, 0x5d, 0x22, 0x79, 0xab, 0x3d, 0x14, 0x62, 0xe8, 0x31, 0x1d, 0x49, 0x82, 0x40, 0x00,
	0x01, 0x2e, 0x82, 0x30, 0x0d, 0x6d, 0x3d, 0xcc, 0x54, 0xbd, 0x1a, 0x44, 0x27, 0x36, 0xf3, 0x25,
	0x9c, 0x67, 0xe2, 0x5a, 0x91, 0x02, 0xb1, 0xc3, 0x83, 0x13, 0x91, 0x49, 0xad, 0x5c, 0x82, 0x73,
	0xc9, 0x42, 0x9b, 0x0a, 0xdf, 0x17, 0x41, 0xaa, 0x59, 0x5f, 0x2b, 0x08, 0xbd, 0x92, 0xd2, 0x3b,
	0x3f, 0x3e, 0xe8, 0xb3, 0x11, 0xee, 0x20, 0xc4, 0xc3, 0x30, 0x62, 0xca, 0x71, 0xb9, 0x6b, 0x1a,
	0x1b, 0xc6, 0x76, 0xb3, 0xdf, 0x4c, 0x77, 0x7a, 0xdc, 0xc5, 0x9b, 0x68, 0x89, 0x48, 0xe9, 0x71,
	0x4a, 0x02, 0xd0, 0x11, 0x15, 0x1d, 0xb1, 0x38, 0xd9, 0x4c, 0x82, 0x4c, 0x34, 0x47, 0x45, 0x00,
	0x2c, 0x06, 0xb3, 0xaa, 0xe5, 0x7c, 0x89, 0xef, 0xa1, 0x86, 0xa4, 0xe0, 0x70, 0xd7, 0xac, 0x6d,
	0x18, 0xdb, 0xb5, 0x7e, 0x5d, 0x52, 0x38, 0x74, 0xf1, 0xff, 0xa8, 0x4e, 0x3d, 0xc2, 0x7d, 0xb3,
	0xae, 0xc3, 0xd3, 0x05, 0xde, 0x42, 0x2b, 0x2c, 0x96, 0x5c, 0x69, 0x0b, 0x1c, 0x97, 0x00, 0x33,
	0x1b, 0x5a, 0x5f, 0x9e, 0x6e, 0xf7, 0x08, 0x30, 0xbc, 0x86, 0xe6, 0x59, 0x0c, 0xba, 0x61, 0x73,
	0x2e, 0x05, 0xb2, 0x18, 0x0e, 0x83, 0x13, 0x91, 0xb4, 0xa3, 0xd8, 0xc8, 0x71, 0xf9, 0x90, 0x85,
	0x60, 0xce, 0xa7, 0xed, 0x28, 0x36, 0xea, 0xe9, 0x8d, 0xa4, 0x9d, 0x44, 0x0e, 0xf9, 0x30, 0x20,
	0x10, 0x29, 0x66, 0x36, 0xd3, 0x76, 0x14, 0x1b, 0x1d, 0xe5, 0x7b, 0xd6, 0x37, 0x03, 0xad, 0x1c,
	0x28, 0x46, 0x80, 0x69, 0x8b, 0xa2, 0xec, 0x8f, 0x65, 0x1f, 0x8c, 0x3f, 0xfb, 0x50, 0xb9, 0xcd,
	0x87, 0xea, 0x8d, 0x3e, 0xd4, 0x66, 0xf8, 0x50, 0xbf, 0xc9, 0x07, 0xeb, 0x02, 0xad, 0x4e, 0xeb,
	0x0c, 0xa5, 0x08, 0x42, 0x86, 0xef, 0xa3, 0x46, 0x08, 0x04, 0xa2, 0x50, 0x57, 0x58, 0xef, 0x67,
	0x2b, 0xbc, 0x8a, 0xaa, 0x7e, 0x38, 0xcc, 0xea, 0x4a, 0x3e, 0xf1, 0x32, 0xaa, 0x8c, 0x69, 0x76,
	0x60, 0x95, 0x31, 0xc5, 0xcf, 0xd1, 0x5c, 0x76, 0x8b, 0x74, 0x39, 0x0b, 0x7b, 0xff, 0x75, 0x0b,
	0x37, 0xb5, 0xfb, 0x3e, 0x4e, 0x0c, 0xee, 0x37, 0x40, 0xff, 0x5a, 0x5f, 0x0c, 0xb4, 0xd4, 0x13,
	0x67, 0x81, 0x27, 0x88, 0xfb, 0xef, 0x6e, 0x52, 0xf9, 0xf8, 0xaa, 0x33, 0x8f, 0xaf, 0x76, 0xc3,
	0xf1, 0xbd, 0x43, 0xb8, 0x58, 0xd8, 0x5d, 0x7d, 0xd9, 0xbb, 0xac, 0xa1, 0xe6, 0x31, 0x3d, 0x62,
	0x6a, 0xcc, 0x29, 0xc3, 0x02, 0x2d, 0x66, 0xd3, 0xf3, 0x56, 0x50, 0xe2, 0xe1, 0x07, 0x25, 0x93,
	0xa6, 0x83, 0xd5, 0xea, 0x4c, 0x04, 0x3d, 0x84, 0xdd, 0x23, 0xee, 0x4b, 0x8f, 0xe5, 0xf5, 0x58,
	0x5b, 0x9f, 0x2e, 0x7f, 0x7d, 0xae, 0x3c, 0xb6, 0xda, 0x76, 0x3e, 0xab, 0xe3, 0x17, 0xb6, 0xcb,
	0x5d, 0x9b, 0x14, 0xb2, 0xef, 0x1b, 0x3b, 0x78, 0x84, 0x96, 0x26, 0x59, 0x7d, 0x01, 0xec, 0xaf,
	0x89, 0xdb, 0x9a, 0x68, 0x59, 0x9d, 0x5b, 0x88, 0x69, 0xfa, 0x04, 0xe9, 0xa1, 0xf9, 0xfc, 0x5e,
	0xe1, 0x76, 0x89, 0x76, 0x6d, 0x2c, 0x0a, 0xc8, 0xb2, 0x9a, 0x21, 0x37, 0x35, 0xb2, 0x63, 0x99,
	0xd7, 0x91, 0x34, 0x8b, 0x4c, 0x68, 0x31, 0x5a, 0x99, 0x9e, 0x57, 0x6a, 0x6a, 0xab, 0x94, 0xb6,
	0x74, 0xcd, 0x66, 0x75, 0xb9, 0xa3, 0x91, 0x4f, 0xac, 0x47, 0xd7, 0x91, 0x6e, 0x99, 0x91, 0x90,
	0x2f, 0xd0, 0x6a, 0x31, 0xb7, 0x76, 0xf7, 0x0e, 0xe8, 0x67, 0x1a, 0xfd, 0xd4, 0xda, 0xb8, 0x1d,
	0x3d, 0xf1, 0xf8, 0xf5, 0x9b, 0xef, 0x57, 0xeb, 0xc6, 0x8f, 0xab, 0x75, 0xe3, 0xe7, 0xd5, 0xba,
	0xf1, 0x61, 0x7f, 0xc8, 0xe1, 0x34, 0x1a, 0x74, 0xa9, 0xf0, 0x6d, 0x97, 0x40, 0xe4, 0x03, 0xa3,
	0xa7, 0x61, 0xfa, 0xb9, 0x1b, 0x30, 0x38, 0x13, 0xea, 0xe3, 0x6e, 0x9e, 0x55, 0x0e, 0xec, 0xc2,
	0xd3, 0x3f, 0x68, 0xe8, 0x77, 0xfd, 0xe5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x9f, 0xb5,
	0x1b, 0x76, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VcServiceClient is the client API for VcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VcServiceClient interface {
	ApplyVCLocal(ctx context.Context, in *ApplyVCReq, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	ApplyVCRemote(ctx context.Context, in *ApplyVCReq, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	CreateVC(ctx context.Context, in *CreateVCRequest, opts ...grpc.CallOption) (*CreateVCResponse, error)
	DownloadVCLocal(ctx context.Context, in *DownloadVCReq, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	DownloadVCRemote(ctx context.Context, in *DownloadVCReq, opts ...grpc.CallOption) (*types.SimpleResponse, error)
}

type vcServiceClient struct {
	cc *grpc.ClientConn
}

func NewVcServiceClient(cc *grpc.ClientConn) VcServiceClient {
	return &vcServiceClient{cc}
}

func (c *vcServiceClient) ApplyVCLocal(ctx context.Context, in *ApplyVCReq, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.VcService/ApplyVCLocal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vcServiceClient) ApplyVCRemote(ctx context.Context, in *ApplyVCReq, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.VcService/ApplyVCRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vcServiceClient) CreateVC(ctx context.Context, in *CreateVCRequest, opts ...grpc.CallOption) (*CreateVCResponse, error) {
	out := new(CreateVCResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.VcService/CreateVC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vcServiceClient) DownloadVCLocal(ctx context.Context, in *DownloadVCReq, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.VcService/DownloadVCLocal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vcServiceClient) DownloadVCRemote(ctx context.Context, in *DownloadVCReq, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.VcService/DownloadVCRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VcServiceServer is the server API for VcService service.
type VcServiceServer interface {
	ApplyVCLocal(context.Context, *ApplyVCReq) (*types.SimpleResponse, error)
	ApplyVCRemote(context.Context, *ApplyVCReq) (*types.SimpleResponse, error)
	CreateVC(context.Context, *CreateVCRequest) (*CreateVCResponse, error)
	DownloadVCLocal(context.Context, *DownloadVCReq) (*types.SimpleResponse, error)
	DownloadVCRemote(context.Context, *DownloadVCReq) (*types.SimpleResponse, error)
}

// UnimplementedVcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVcServiceServer struct {
}

func (*UnimplementedVcServiceServer) ApplyVCLocal(ctx context.Context, req *ApplyVCReq) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyVCLocal not implemented")
}
func (*UnimplementedVcServiceServer) ApplyVCRemote(ctx context.Context, req *ApplyVCReq) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyVCRemote not implemented")
}
func (*UnimplementedVcServiceServer) CreateVC(ctx context.Context, req *CreateVCRequest) (*CreateVCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVC not implemented")
}
func (*UnimplementedVcServiceServer) DownloadVCLocal(ctx context.Context, req *DownloadVCReq) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadVCLocal not implemented")
}
func (*UnimplementedVcServiceServer) DownloadVCRemote(ctx context.Context, req *DownloadVCReq) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadVCRemote not implemented")
}

func RegisterVcServiceServer(s *grpc.Server, srv VcServiceServer) {
	s.RegisterService(&_VcService_serviceDesc, srv)
}

func _VcService_ApplyVCLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyVCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VcServiceServer).ApplyVCLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.VcService/ApplyVCLocal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VcServiceServer).ApplyVCLocal(ctx, req.(*ApplyVCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VcService_ApplyVCRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyVCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VcServiceServer).ApplyVCRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.VcService/ApplyVCRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VcServiceServer).ApplyVCRemote(ctx, req.(*ApplyVCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VcService_CreateVC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VcServiceServer).CreateVC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.VcService/CreateVC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VcServiceServer).CreateVC(ctx, req.(*CreateVCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VcService_DownloadVCLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadVCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VcServiceServer).DownloadVCLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.VcService/DownloadVCLocal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VcServiceServer).DownloadVCLocal(ctx, req.(*DownloadVCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VcService_DownloadVCRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadVCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VcServiceServer).DownloadVCRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.VcService/DownloadVCRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VcServiceServer).DownloadVCRemote(ctx, req.(*DownloadVCReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _VcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carrier.api.VcService",
	HandlerType: (*VcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyVCLocal",
			Handler:    _VcService_ApplyVCLocal_Handler,
		},
		{
			MethodName: "ApplyVCRemote",
			Handler:    _VcService_ApplyVCRemote_Handler,
		},
		{
			MethodName: "CreateVC",
			Handler:    _VcService_CreateVC_Handler,
		},
		{
			MethodName: "DownloadVCLocal",
			Handler:    _VcService_DownloadVCLocal_Handler,
		},
		{
			MethodName: "DownloadVCRemote",
			Handler:    _VcService_DownloadVCRemote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carrier/api/vc_rpc_api.proto",
}

func (m *ApplyVCReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyVCReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyVCReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReqSignature) > 0 {
		i -= len(m.ReqSignature)
		copy(dAtA[i:], m.ReqSignature)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ReqSignature)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ReqDigest) > 0 {
		i -= len(m.ReqDigest)
		copy(dAtA[i:], m.ReqDigest)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ReqDigest)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExtInfo) > 0 {
		i -= len(m.ExtInfo)
		copy(dAtA[i:], m.ExtInfo)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ExtInfo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExpirationDate) > 0 {
		i -= len(m.ExpirationDate)
		copy(dAtA[i:], m.ExpirationDate)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ExpirationDate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Claim) > 0 {
		i -= len(m.Claim)
		copy(dAtA[i:], m.Claim)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.Claim)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PctId != 0 {
		i = encodeVarintVcRpcApi(dAtA, i, uint64(m.PctId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApplicantDid) > 0 {
		i -= len(m.ApplicantDid)
		copy(dAtA[i:], m.ApplicantDid)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ApplicantDid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateVCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateVCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateVCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExpirationDate) > 0 {
		i -= len(m.ExpirationDate)
		copy(dAtA[i:], m.ExpirationDate)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ExpirationDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Claim) > 0 {
		i -= len(m.Claim)
		copy(dAtA[i:], m.Claim)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.Claim)))
		i--
		dAtA[i] = 0x22
	}
	if m.PctId != 0 {
		i = encodeVarintVcRpcApi(dAtA, i, uint64(m.PctId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApplicantDid) > 0 {
		i -= len(m.ApplicantDid)
		copy(dAtA[i:], m.ApplicantDid)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ApplicantDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateVCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateVCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateVCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TxInfo != nil {
		{
			size, err := m.TxInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVcRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vc) > 0 {
		i -= len(m.Vc)
		copy(dAtA[i:], m.Vc)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.Vc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintVcRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownloadVCReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadVCReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadVCReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReqSignature) > 0 {
		i -= len(m.ReqSignature)
		copy(dAtA[i:], m.ReqSignature)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ReqSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReqDigest) > 0 {
		i -= len(m.ReqDigest)
		copy(dAtA[i:], m.ReqDigest)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ReqDigest)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApplicantDid) > 0 {
		i -= len(m.ApplicantDid)
		copy(dAtA[i:], m.ApplicantDid)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.ApplicantDid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownloadVCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadVCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadVCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vc) > 0 {
		i -= len(m.Vc)
		copy(dAtA[i:], m.Vc)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.Vc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintVcRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintVcRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVcRpcApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovVcRpcApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplyVCReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.ApplicantDid)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	if m.PctId != 0 {
		n += 1 + sovVcRpcApi(uint64(m.PctId))
	}
	l = len(m.Claim)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.ExpirationDate)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.ExtInfo)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.ReqDigest)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.ReqSignature)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateVCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicantDid)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	if m.PctId != 0 {
		n += 1 + sovVcRpcApi(uint64(m.PctId))
	}
	l = len(m.Claim)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.ExpirationDate)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateVCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovVcRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.Vc)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	if m.TxInfo != nil {
		l = m.TxInfo.Size()
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownloadVCReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.ApplicantDid)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.ReqDigest)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.ReqSignature)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownloadVCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovVcRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	l = len(m.Vc)
	if l > 0 {
		n += 1 + l + sovVcRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVcRpcApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVcRpcApi(x uint64) (n int) {
	return sovVcRpcApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplyVCReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVcRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyVCReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyVCReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicantDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicantDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PctId", wireType)
			}
			m.PctId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PctId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVcRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVcRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicantDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicantDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PctId", wireType)
			}
			m.PctId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PctId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVcRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVcRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxInfo == nil {
				m.TxInfo = &TxInfo{}
			}
			if err := m.TxInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVcRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadVCReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVcRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadVCReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadVCReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicantDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicantDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVcRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadVCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVcRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadVCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadVCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVcRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVcRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVcRpcApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVcRpcApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVcRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVcRpcApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVcRpcApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVcRpcApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVcRpcApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVcRpcApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVcRpcApi = fmt.Errorf("proto: unexpected end of group")
)
