// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carrier/api/power_rpc_api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
	types "pb/carrier/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 单个组织的总算力信息
type GetGlobalPowerSummary struct {
	Owner                *types.Organization     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Information          *types.PowerUsageDetail `protobuf:"bytes,2,opt,name=information,proto3" json:"information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetGlobalPowerSummary) Reset()         { *m = GetGlobalPowerSummary{} }
func (m *GetGlobalPowerSummary) String() string { return proto.CompactTextString(m) }
func (*GetGlobalPowerSummary) ProtoMessage()    {}
func (*GetGlobalPowerSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{0}
}
func (m *GetGlobalPowerSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGlobalPowerSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGlobalPowerSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGlobalPowerSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGlobalPowerSummary.Merge(m, src)
}
func (m *GetGlobalPowerSummary) XXX_Size() int {
	return m.Size()
}
func (m *GetGlobalPowerSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGlobalPowerSummary.DiscardUnknown(m)
}

var xxx_messageInfo_GetGlobalPowerSummary proto.InternalMessageInfo

func (m *GetGlobalPowerSummary) GetOwner() *types.Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetGlobalPowerSummary) GetInformation() *types.PowerUsageDetail {
	if m != nil {
		return m.Information
	}
	return nil
}

// 查看全网各个组织的总算力(累加)详情列表 resp
type GetGlobalPowerSummaryListResponse struct {
	Status               int32                    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Powers               []*GetGlobalPowerSummary `protobuf:"bytes,3,rep,name=powers,proto3" json:"powers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetGlobalPowerSummaryListResponse) Reset()         { *m = GetGlobalPowerSummaryListResponse{} }
func (m *GetGlobalPowerSummaryListResponse) String() string { return proto.CompactTextString(m) }
func (*GetGlobalPowerSummaryListResponse) ProtoMessage()    {}
func (*GetGlobalPowerSummaryListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{1}
}
func (m *GetGlobalPowerSummaryListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGlobalPowerSummaryListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGlobalPowerSummaryListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGlobalPowerSummaryListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGlobalPowerSummaryListResponse.Merge(m, src)
}
func (m *GetGlobalPowerSummaryListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGlobalPowerSummaryListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGlobalPowerSummaryListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGlobalPowerSummaryListResponse proto.InternalMessageInfo

func (m *GetGlobalPowerSummaryListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetGlobalPowerSummaryListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetGlobalPowerSummaryListResponse) GetPowers() []*GetGlobalPowerSummary {
	if m != nil {
		return m.Powers
	}
	return nil
}

// 单个组织的各个算力信息
type GetGlobalPowerDetail struct {
	Owner                *types.Organization     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Information          *types.PowerUsageDetail `protobuf:"bytes,2,opt,name=information,proto3" json:"information,omitempty"`
	PowerId              string                  `protobuf:"bytes,3,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetGlobalPowerDetail) Reset()         { *m = GetGlobalPowerDetail{} }
func (m *GetGlobalPowerDetail) String() string { return proto.CompactTextString(m) }
func (*GetGlobalPowerDetail) ProtoMessage()    {}
func (*GetGlobalPowerDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{2}
}
func (m *GetGlobalPowerDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGlobalPowerDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGlobalPowerDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGlobalPowerDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGlobalPowerDetail.Merge(m, src)
}
func (m *GetGlobalPowerDetail) XXX_Size() int {
	return m.Size()
}
func (m *GetGlobalPowerDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGlobalPowerDetail.DiscardUnknown(m)
}

var xxx_messageInfo_GetGlobalPowerDetail proto.InternalMessageInfo

func (m *GetGlobalPowerDetail) GetOwner() *types.Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetGlobalPowerDetail) GetInformation() *types.PowerUsageDetail {
	if m != nil {
		return m.Information
	}
	return nil
}

func (m *GetGlobalPowerDetail) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

type GetGlobalPowerDetailListRequest struct {
	LastUpdated          uint64   `protobuf:"varint,1,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	PageSize             uint64   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGlobalPowerDetailListRequest) Reset()         { *m = GetGlobalPowerDetailListRequest{} }
func (m *GetGlobalPowerDetailListRequest) String() string { return proto.CompactTextString(m) }
func (*GetGlobalPowerDetailListRequest) ProtoMessage()    {}
func (*GetGlobalPowerDetailListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{3}
}
func (m *GetGlobalPowerDetailListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGlobalPowerDetailListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGlobalPowerDetailListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGlobalPowerDetailListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGlobalPowerDetailListRequest.Merge(m, src)
}
func (m *GetGlobalPowerDetailListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGlobalPowerDetailListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGlobalPowerDetailListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGlobalPowerDetailListRequest proto.InternalMessageInfo

func (m *GetGlobalPowerDetailListRequest) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *GetGlobalPowerDetailListRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// 全网各个组织的各个算力列表 resp
type GetGlobalPowerDetailListResponse struct {
	Status               int32                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Powers               []*GetGlobalPowerDetail `protobuf:"bytes,3,rep,name=powers,proto3" json:"powers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetGlobalPowerDetailListResponse) Reset()         { *m = GetGlobalPowerDetailListResponse{} }
func (m *GetGlobalPowerDetailListResponse) String() string { return proto.CompactTextString(m) }
func (*GetGlobalPowerDetailListResponse) ProtoMessage()    {}
func (*GetGlobalPowerDetailListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{4}
}
func (m *GetGlobalPowerDetailListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGlobalPowerDetailListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGlobalPowerDetailListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGlobalPowerDetailListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGlobalPowerDetailListResponse.Merge(m, src)
}
func (m *GetGlobalPowerDetailListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGlobalPowerDetailListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGlobalPowerDetailListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGlobalPowerDetailListResponse proto.InternalMessageInfo

func (m *GetGlobalPowerDetailListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetGlobalPowerDetailListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetGlobalPowerDetailListResponse) GetPowers() []*GetGlobalPowerDetail {
	if m != nil {
		return m.Powers
	}
	return nil
}

// 本组织的单个(宿主机)算力信息 (包含【未发布】和【已发布】的) resp
type GetLocalPowerDetail struct {
	Owner                *types.Organization     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Power                *types.PowerUsageDetail `protobuf:"bytes,2,opt,name=power,proto3" json:"power,omitempty"`
	JobNodeId            string                  `protobuf:"bytes,3,opt,name=job_node_id,json=jobNodeId,proto3" json:"job_node_id,omitempty"`
	PowerId              string                  `protobuf:"bytes,4,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetLocalPowerDetail) Reset()         { *m = GetLocalPowerDetail{} }
func (m *GetLocalPowerDetail) String() string { return proto.CompactTextString(m) }
func (*GetLocalPowerDetail) ProtoMessage()    {}
func (*GetLocalPowerDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{5}
}
func (m *GetLocalPowerDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLocalPowerDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLocalPowerDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLocalPowerDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLocalPowerDetail.Merge(m, src)
}
func (m *GetLocalPowerDetail) XXX_Size() int {
	return m.Size()
}
func (m *GetLocalPowerDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLocalPowerDetail.DiscardUnknown(m)
}

var xxx_messageInfo_GetLocalPowerDetail proto.InternalMessageInfo

func (m *GetLocalPowerDetail) GetOwner() *types.Organization {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *GetLocalPowerDetail) GetPower() *types.PowerUsageDetail {
	if m != nil {
		return m.Power
	}
	return nil
}

func (m *GetLocalPowerDetail) GetJobNodeId() string {
	if m != nil {
		return m.JobNodeId
	}
	return ""
}

func (m *GetLocalPowerDetail) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

type GetLocalPowerDetailListRequest struct {
	LastUpdated          uint64   `protobuf:"varint,1,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	PageSize             uint64   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLocalPowerDetailListRequest) Reset()         { *m = GetLocalPowerDetailListRequest{} }
func (m *GetLocalPowerDetailListRequest) String() string { return proto.CompactTextString(m) }
func (*GetLocalPowerDetailListRequest) ProtoMessage()    {}
func (*GetLocalPowerDetailListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{6}
}
func (m *GetLocalPowerDetailListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLocalPowerDetailListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLocalPowerDetailListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLocalPowerDetailListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLocalPowerDetailListRequest.Merge(m, src)
}
func (m *GetLocalPowerDetailListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLocalPowerDetailListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLocalPowerDetailListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLocalPowerDetailListRequest proto.InternalMessageInfo

func (m *GetLocalPowerDetailListRequest) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *GetLocalPowerDetailListRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// 本组织的多个(宿主机)算力信息 (包含【未发布】和【已发布】的)
type GetLocalPowerDetailListResponse struct {
	Status               int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Powers               []*GetLocalPowerDetail `protobuf:"bytes,3,rep,name=powers,proto3" json:"powers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetLocalPowerDetailListResponse) Reset()         { *m = GetLocalPowerDetailListResponse{} }
func (m *GetLocalPowerDetailListResponse) String() string { return proto.CompactTextString(m) }
func (*GetLocalPowerDetailListResponse) ProtoMessage()    {}
func (*GetLocalPowerDetailListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{7}
}
func (m *GetLocalPowerDetailListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLocalPowerDetailListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLocalPowerDetailListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLocalPowerDetailListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLocalPowerDetailListResponse.Merge(m, src)
}
func (m *GetLocalPowerDetailListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLocalPowerDetailListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLocalPowerDetailListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLocalPowerDetailListResponse proto.InternalMessageInfo

func (m *GetLocalPowerDetailListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetLocalPowerDetailListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetLocalPowerDetailListResponse) GetPowers() []*GetLocalPowerDetail {
	if m != nil {
		return m.Powers
	}
	return nil
}

// 启用算力 req
type PublishPowerRequest struct {
	JobNodeId            string   `protobuf:"bytes,1,opt,name=job_node_id,json=jobNodeId,proto3" json:"job_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishPowerRequest) Reset()         { *m = PublishPowerRequest{} }
func (m *PublishPowerRequest) String() string { return proto.CompactTextString(m) }
func (*PublishPowerRequest) ProtoMessage()    {}
func (*PublishPowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{8}
}
func (m *PublishPowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishPowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishPowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishPowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishPowerRequest.Merge(m, src)
}
func (m *PublishPowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishPowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishPowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishPowerRequest proto.InternalMessageInfo

func (m *PublishPowerRequest) GetJobNodeId() string {
	if m != nil {
		return m.JobNodeId
	}
	return ""
}

// 启用算力 resp
type PublishPowerResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PowerId              string   `protobuf:"bytes,3,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishPowerResponse) Reset()         { *m = PublishPowerResponse{} }
func (m *PublishPowerResponse) String() string { return proto.CompactTextString(m) }
func (*PublishPowerResponse) ProtoMessage()    {}
func (*PublishPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{9}
}
func (m *PublishPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishPowerResponse.Merge(m, src)
}
func (m *PublishPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishPowerResponse proto.InternalMessageInfo

func (m *PublishPowerResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PublishPowerResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PublishPowerResponse) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

// 停用算力 req
type RevokePowerRequest struct {
	PowerId              string   `protobuf:"bytes,1,opt,name=power_id,json=powerId,proto3" json:"power_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokePowerRequest) Reset()         { *m = RevokePowerRequest{} }
func (m *RevokePowerRequest) String() string { return proto.CompactTextString(m) }
func (*RevokePowerRequest) ProtoMessage()    {}
func (*RevokePowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d4c7bdb4c45cdc, []int{10}
}
func (m *RevokePowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokePowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokePowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokePowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokePowerRequest.Merge(m, src)
}
func (m *RevokePowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RevokePowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokePowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevokePowerRequest proto.InternalMessageInfo

func (m *RevokePowerRequest) GetPowerId() string {
	if m != nil {
		return m.PowerId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetGlobalPowerSummary)(nil), "carrier.api.GetGlobalPowerSummary")
	proto.RegisterType((*GetGlobalPowerSummaryListResponse)(nil), "carrier.api.GetGlobalPowerSummaryListResponse")
	proto.RegisterType((*GetGlobalPowerDetail)(nil), "carrier.api.GetGlobalPowerDetail")
	proto.RegisterType((*GetGlobalPowerDetailListRequest)(nil), "carrier.api.GetGlobalPowerDetailListRequest")
	proto.RegisterType((*GetGlobalPowerDetailListResponse)(nil), "carrier.api.GetGlobalPowerDetailListResponse")
	proto.RegisterType((*GetLocalPowerDetail)(nil), "carrier.api.GetLocalPowerDetail")
	proto.RegisterType((*GetLocalPowerDetailListRequest)(nil), "carrier.api.GetLocalPowerDetailListRequest")
	proto.RegisterType((*GetLocalPowerDetailListResponse)(nil), "carrier.api.GetLocalPowerDetailListResponse")
	proto.RegisterType((*PublishPowerRequest)(nil), "carrier.api.PublishPowerRequest")
	proto.RegisterType((*PublishPowerResponse)(nil), "carrier.api.PublishPowerResponse")
	proto.RegisterType((*RevokePowerRequest)(nil), "carrier.api.RevokePowerRequest")
}

func init() { proto.RegisterFile("carrier/api/power_rpc_api.proto", fileDescriptor_18d4c7bdb4c45cdc) }

var fileDescriptor_18d4c7bdb4c45cdc = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x4f, 0xd4, 0x40,
	0x1c, 0xcd, 0xb0, 0x2c, 0xc2, 0x2c, 0x31, 0x66, 0x40, 0x2c, 0x0b, 0xec, 0x9f, 0x82, 0x09, 0x22,
	0xb6, 0x01, 0x43, 0xa2, 0xdc, 0x34, 0x1a, 0x42, 0x42, 0x94, 0x94, 0x70, 0xd1, 0xc3, 0x3a, 0xdd,
	0x0e, 0x75, 0xb0, 0xdb, 0x19, 0x67, 0xa6, 0x90, 0xe5, 0x68, 0x62, 0x8c, 0x26, 0x26, 0x26, 0x7e,
	0x04, 0x0f, 0x7e, 0x07, 0xaf, 0x5e, 0x3c, 0x9a, 0xf8, 0x05, 0x0c, 0xf1, 0x83, 0x98, 0x9d, 0x76,
	0xb1, 0xed, 0xee, 0xf2, 0x27, 0x9a, 0x78, 0x63, 0x66, 0xde, 0x6f, 0xde, 0xeb, 0xef, 0xbd, 0xf9,
	0xb1, 0xb0, 0xda, 0xc4, 0x42, 0x50, 0x22, 0x6c, 0xcc, 0xa9, 0xcd, 0xd9, 0x21, 0x11, 0x0d, 0xc1,
	0x9b, 0x0d, 0xcc, 0xa9, 0xc5, 0x05, 0x53, 0x0c, 0x95, 0x12, 0x80, 0x85, 0x39, 0x2d, 0x1b, 0x5d,
	0xb4, 0x6a, 0x73, 0x22, 0x6d, 0x17, 0x4b, 0x12, 0xc3, 0xca, 0xb5, 0xec, 0x89, 0x20, 0x92, 0x45,
	0xa2, 0x49, 0x3c, 0xac, 0x70, 0x82, 0x98, 0xf5, 0x19, 0xf3, 0x03, 0xa2, 0x89, 0x70, 0x18, 0x32,
	0x85, 0x15, 0x65, 0xa1, 0x4c, 0x4e, 0x67, 0x92, 0x53, 0xbd, 0x72, 0xa3, 0x3d, 0x9b, 0xb4, 0xb8,
	0x6a, 0xc7, 0x87, 0xe6, 0x7b, 0x00, 0xaf, 0x6e, 0x10, 0xb5, 0x11, 0x30, 0x17, 0x07, 0xdb, 0x1d,
	0x91, 0x3b, 0x51, 0xab, 0x85, 0x45, 0x1b, 0xad, 0xc0, 0x22, 0x3b, 0x0c, 0x89, 0x30, 0x40, 0x0d,
	0x2c, 0x96, 0x56, 0x67, 0xac, 0xae, 0x5a, 0x2d, 0xc3, 0x7a, 0x2c, 0x7c, 0x1c, 0xd2, 0x23, 0xcd,
	0xe4, 0xc4, 0x48, 0x74, 0x0f, 0x96, 0x68, 0xb8, 0xc7, 0x44, 0x4b, 0xef, 0x1a, 0x43, 0xba, 0xb0,
	0x9a, 0x2b, 0xd4, 0x24, 0xbb, 0x12, 0xfb, 0xe4, 0x01, 0x51, 0x98, 0x06, 0x4e, 0xba, 0xc6, 0x7c,
	0x0b, 0x60, 0xbd, 0xaf, 0x9e, 0x2d, 0x2a, 0x95, 0x43, 0x24, 0x67, 0xa1, 0x24, 0x68, 0x0a, 0x8e,
	0x48, 0x85, 0x55, 0x24, 0xb5, 0xb8, 0xa2, 0x93, 0xac, 0xd0, 0x15, 0x58, 0x68, 0x49, 0x5f, 0x13,
	0x8f, 0x39, 0x9d, 0x3f, 0xd1, 0x3a, 0x1c, 0xd1, 0xad, 0x97, 0x46, 0xa1, 0x56, 0x58, 0x2c, 0xad,
	0x9a, 0x56, 0xaa, 0xe9, 0x56, 0x5f, 0x26, 0x27, 0xa9, 0x30, 0x3f, 0x03, 0x38, 0x99, 0x45, 0xc4,
	0x8a, 0xff, 0x4f, 0x6b, 0xd0, 0x34, 0x1c, 0x8d, 0x53, 0x44, 0x3d, 0xa3, 0xa0, 0xbf, 0xf0, 0x92,
	0x5e, 0x6f, 0x7a, 0x26, 0x86, 0xd5, 0x7e, 0x42, 0xe3, 0x9e, 0xbd, 0x8c, 0x88, 0x54, 0xa8, 0x0e,
	0xc7, 0x03, 0x2c, 0x55, 0x23, 0xe2, 0x1e, 0x56, 0xc4, 0xd3, 0xd2, 0x87, 0x9d, 0x52, 0x67, 0x6f,
	0x37, 0xde, 0x42, 0x33, 0x70, 0x8c, 0x63, 0x9f, 0x34, 0x24, 0x3d, 0x22, 0x5a, 0xe1, 0xb0, 0x33,
	0xda, 0xd9, 0xd8, 0xa1, 0x47, 0xc4, 0x7c, 0x03, 0x60, 0x6d, 0x30, 0xc7, 0x85, 0x7d, 0xb9, 0x9b,
	0xf3, 0xa5, 0x7e, 0x8a, 0x2f, 0x49, 0x33, 0xba, 0xb6, 0x7c, 0x01, 0x70, 0x62, 0x83, 0xa8, 0x2d,
	0xd6, 0xfc, 0x6b, 0x57, 0xd6, 0x60, 0x51, 0x5f, 0x7a, 0x5e, 0x3f, 0x62, 0x34, 0xaa, 0xc0, 0xd2,
	0x3e, 0x73, 0x1b, 0x21, 0xf3, 0xc8, 0x1f, 0x33, 0xc6, 0xf6, 0x99, 0xfb, 0x88, 0x79, 0x64, 0xd3,
	0xcb, 0x38, 0x35, 0x9c, 0x75, 0xea, 0x19, 0xac, 0xf4, 0xd1, 0xfe, 0x2f, 0x8d, 0x7a, 0x0d, 0x74,
	0x18, 0xfa, 0x53, 0x5c, 0xd8, 0xa7, 0x3b, 0x39, 0x9f, 0x6a, 0x79, 0x9f, 0xf2, 0x3c, 0x27, 0x36,
	0xad, 0xc1, 0x89, 0xed, 0xc8, 0x0d, 0xa8, 0x7c, 0xae, 0x4f, 0xbb, 0x9f, 0x97, 0xeb, 0x1d, 0xc8,
	0xf5, 0xce, 0x7c, 0x0a, 0x27, 0xb3, 0x65, 0x17, 0x96, 0x7c, 0xca, 0x3b, 0xb1, 0x21, 0x72, 0xc8,
	0x01, 0x7b, 0x41, 0x32, 0x92, 0xd2, 0x05, 0x20, 0x53, 0xb0, 0xfa, 0xb5, 0x08, 0xc7, 0xe3, 0xd9,
	0x40, 0xc4, 0x01, 0x6d, 0x12, 0xf4, 0x01, 0xc0, 0xe9, 0x81, 0xf3, 0x09, 0x4d, 0x59, 0xf1, 0xac,
	0xb5, 0xba, 0xb3, 0xd6, 0x7a, 0xd8, 0x99, 0xb5, 0x65, 0xeb, 0xec, 0xa9, 0x93, 0xf6, 0xc7, 0xbc,
	0xf9, 0xea, 0xc7, 0xaf, 0x8f, 0x43, 0xd7, 0xd1, 0xbc, 0xdd, 0x9d, 0xfd, 0x07, 0x2b, 0xf1, 0xbf,
	0x10, 0xdb, 0xd7, 0x95, 0x69, 0xd2, 0x4f, 0x00, 0x1a, 0x83, 0x5e, 0x26, 0x5a, 0x3e, 0xf3, 0x5d,
	0xa5, 0xb2, 0x57, 0xbe, 0x75, 0x4e, 0x74, 0x22, 0x73, 0x49, 0xcb, 0x5c, 0x40, 0xe6, 0x20, 0x99,
	0x29, 0x21, 0xef, 0x00, 0xbc, 0x36, 0x20, 0x96, 0x03, 0xdb, 0xb6, 0x7c, 0x56, 0xd8, 0x32, 0x6a,
	0x6e, 0x68, 0x35, 0xf3, 0xa8, 0xde, 0xab, 0x26, 0xe8, 0xd4, 0xa5, 0x08, 0xdb, 0x70, 0x3c, 0x1d,
	0x32, 0x94, 0x4d, 0x75, 0x9f, 0xd8, 0x96, 0xeb, 0xa7, 0x20, 0x12, 0xfe, 0x05, 0xcd, 0x5f, 0x31,
	0xa7, 0x7b, 0xf9, 0x79, 0x8c, 0x5f, 0x07, 0x4b, 0x48, 0xc0, 0x52, 0x2a, 0x82, 0xa8, 0x9a, 0xb9,
	0xb7, 0x37, 0x9c, 0xe5, 0xb9, 0xdc, 0x4c, 0xda, 0xa1, 0x2d, 0x1e, 0x90, 0x13, 0xd2, 0x79, 0x4d,
	0x3a, 0x67, 0x1a, 0xbd, 0xa4, 0x42, 0x5f, 0xb6, 0x0e, 0x96, 0xee, 0xcf, 0x7e, 0x3b, 0xae, 0x80,
	0xef, 0xc7, 0x15, 0xf0, 0xf3, 0xb8, 0x02, 0x9e, 0x5c, 0xe6, 0xae, 0x9d, 0xfa, 0x69, 0xe2, 0x8e,
	0xe8, 0xae, 0xdf, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x43, 0x7d, 0xf2, 0xb0, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PowerServiceClient is the client API for PowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PowerServiceClient interface {
	// 查看全网各个组织的总算力(累加)详情列表
	GetGlobalPowerSummaryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGlobalPowerSummaryListResponse, error)
	// 查看全网各个组织的各个算力详情列表
	GetGlobalPowerDetailList(ctx context.Context, in *GetGlobalPowerDetailListRequest, opts ...grpc.CallOption) (*GetGlobalPowerDetailListResponse, error)
	// 本组织的所有(宿主机)算力信息列表 (包含【未发布】和【已发布】的)
	GetLocalPowerDetailList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLocalPowerDetailListResponse, error)
	// 启用算力 (发布算力)
	PublishPower(ctx context.Context, in *PublishPowerRequest, opts ...grpc.CallOption) (*PublishPowerResponse, error)
	// 停用算力 (撤销算力)
	RevokePower(ctx context.Context, in *RevokePowerRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
}

type powerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPowerServiceClient(cc *grpc.ClientConn) PowerServiceClient {
	return &powerServiceClient{cc}
}

func (c *powerServiceClient) GetGlobalPowerSummaryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGlobalPowerSummaryListResponse, error) {
	out := new(GetGlobalPowerSummaryListResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.PowerService/GetGlobalPowerSummaryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) GetGlobalPowerDetailList(ctx context.Context, in *GetGlobalPowerDetailListRequest, opts ...grpc.CallOption) (*GetGlobalPowerDetailListResponse, error) {
	out := new(GetGlobalPowerDetailListResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.PowerService/GetGlobalPowerDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) GetLocalPowerDetailList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLocalPowerDetailListResponse, error) {
	out := new(GetLocalPowerDetailListResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.PowerService/GetLocalPowerDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) PublishPower(ctx context.Context, in *PublishPowerRequest, opts ...grpc.CallOption) (*PublishPowerResponse, error) {
	out := new(PublishPowerResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.PowerService/PublishPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) RevokePower(ctx context.Context, in *RevokePowerRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.PowerService/RevokePower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerServiceServer is the server API for PowerService service.
type PowerServiceServer interface {
	// 查看全网各个组织的总算力(累加)详情列表
	GetGlobalPowerSummaryList(context.Context, *emptypb.Empty) (*GetGlobalPowerSummaryListResponse, error)
	// 查看全网各个组织的各个算力详情列表
	GetGlobalPowerDetailList(context.Context, *GetGlobalPowerDetailListRequest) (*GetGlobalPowerDetailListResponse, error)
	// 本组织的所有(宿主机)算力信息列表 (包含【未发布】和【已发布】的)
	GetLocalPowerDetailList(context.Context, *emptypb.Empty) (*GetLocalPowerDetailListResponse, error)
	// 启用算力 (发布算力)
	PublishPower(context.Context, *PublishPowerRequest) (*PublishPowerResponse, error)
	// 停用算力 (撤销算力)
	RevokePower(context.Context, *RevokePowerRequest) (*types.SimpleResponse, error)
}

// UnimplementedPowerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPowerServiceServer struct {
}

func (*UnimplementedPowerServiceServer) GetGlobalPowerSummaryList(ctx context.Context, req *emptypb.Empty) (*GetGlobalPowerSummaryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalPowerSummaryList not implemented")
}
func (*UnimplementedPowerServiceServer) GetGlobalPowerDetailList(ctx context.Context, req *GetGlobalPowerDetailListRequest) (*GetGlobalPowerDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalPowerDetailList not implemented")
}
func (*UnimplementedPowerServiceServer) GetLocalPowerDetailList(ctx context.Context, req *emptypb.Empty) (*GetLocalPowerDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalPowerDetailList not implemented")
}
func (*UnimplementedPowerServiceServer) PublishPower(ctx context.Context, req *PublishPowerRequest) (*PublishPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPower not implemented")
}
func (*UnimplementedPowerServiceServer) RevokePower(ctx context.Context, req *RevokePowerRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePower not implemented")
}

func RegisterPowerServiceServer(s *grpc.Server, srv PowerServiceServer) {
	s.RegisterService(&_PowerService_serviceDesc, srv)
}

func _PowerService_GetGlobalPowerSummaryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).GetGlobalPowerSummaryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.PowerService/GetGlobalPowerSummaryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).GetGlobalPowerSummaryList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_GetGlobalPowerDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalPowerDetailListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).GetGlobalPowerDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.PowerService/GetGlobalPowerDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).GetGlobalPowerDetailList(ctx, req.(*GetGlobalPowerDetailListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_GetLocalPowerDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).GetLocalPowerDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.PowerService/GetLocalPowerDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).GetLocalPowerDetailList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_PublishPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).PublishPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.PowerService/PublishPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).PublishPower(ctx, req.(*PublishPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_RevokePower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).RevokePower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.PowerService/RevokePower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).RevokePower(ctx, req.(*RevokePowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PowerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carrier.api.PowerService",
	HandlerType: (*PowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGlobalPowerSummaryList",
			Handler:    _PowerService_GetGlobalPowerSummaryList_Handler,
		},
		{
			MethodName: "GetGlobalPowerDetailList",
			Handler:    _PowerService_GetGlobalPowerDetailList_Handler,
		},
		{
			MethodName: "GetLocalPowerDetailList",
			Handler:    _PowerService_GetLocalPowerDetailList_Handler,
		},
		{
			MethodName: "PublishPower",
			Handler:    _PowerService_PublishPower_Handler,
		},
		{
			MethodName: "RevokePower",
			Handler:    _PowerService_RevokePower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carrier/api/power_rpc_api.proto",
}

func (m *GetGlobalPowerSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGlobalPowerSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGlobalPowerSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetGlobalPowerSummaryListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGlobalPowerSummaryListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGlobalPowerSummaryListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Powers) > 0 {
		for iNdEx := len(m.Powers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Powers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGlobalPowerDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGlobalPowerDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGlobalPowerDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetGlobalPowerDetailListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGlobalPowerDetailListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGlobalPowerDetailListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.LastUpdated != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.LastUpdated))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGlobalPowerDetailListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGlobalPowerDetailListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGlobalPowerDetailListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Powers) > 0 {
		for iNdEx := len(m.Powers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Powers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLocalPowerDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocalPowerDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLocalPowerDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.JobNodeId) > 0 {
		i -= len(m.JobNodeId)
		copy(dAtA[i:], m.JobNodeId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.JobNodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Power != nil {
		{
			size, err := m.Power.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLocalPowerDetailListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocalPowerDetailListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLocalPowerDetailListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.LastUpdated != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.LastUpdated))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLocalPowerDetailListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocalPowerDetailListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLocalPowerDetailListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Powers) > 0 {
		for iNdEx := len(m.Powers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Powers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPowerRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishPowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishPowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishPowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JobNodeId) > 0 {
		i -= len(m.JobNodeId)
		copy(dAtA[i:], m.JobNodeId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.JobNodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RevokePowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokePowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokePowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PowerId) > 0 {
		i -= len(m.PowerId)
		copy(dAtA[i:], m.PowerId)
		i = encodeVarintPowerRpcApi(dAtA, i, uint64(len(m.PowerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPowerRpcApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPowerRpcApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetGlobalPowerSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetGlobalPowerSummaryListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if len(m.Powers) > 0 {
		for _, e := range m.Powers {
			l = e.Size()
			n += 1 + l + sovPowerRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetGlobalPowerDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetGlobalPowerDetailListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastUpdated != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.LastUpdated))
	}
	if m.PageSize != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetGlobalPowerDetailListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if len(m.Powers) > 0 {
		for _, e := range m.Powers {
			l = e.Size()
			n += 1 + l + sovPowerRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLocalPowerDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.Power != nil {
		l = m.Power.Size()
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	l = len(m.JobNodeId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLocalPowerDetailListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastUpdated != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.LastUpdated))
	}
	if m.PageSize != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLocalPowerDetailListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if len(m.Powers) > 0 {
		for _, e := range m.Powers {
			l = e.Size()
			n += 1 + l + sovPowerRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishPowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobNodeId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPowerRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RevokePowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PowerId)
	if l > 0 {
		n += 1 + l + sovPowerRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPowerRpcApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPowerRpcApi(x uint64) (n int) {
	return sovPowerRpcApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetGlobalPowerSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGlobalPowerSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGlobalPowerSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &types.Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &types.PowerUsageDetail{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGlobalPowerSummaryListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGlobalPowerSummaryListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGlobalPowerSummaryListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Powers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Powers = append(m.Powers, &GetGlobalPowerSummary{})
			if err := m.Powers[len(m.Powers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGlobalPowerDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGlobalPowerDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGlobalPowerDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &types.Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &types.PowerUsageDetail{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGlobalPowerDetailListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGlobalPowerDetailListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGlobalPowerDetailListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGlobalPowerDetailListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGlobalPowerDetailListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGlobalPowerDetailListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Powers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Powers = append(m.Powers, &GetGlobalPowerDetail{})
			if err := m.Powers[len(m.Powers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocalPowerDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocalPowerDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocalPowerDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &types.Organization{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Power == nil {
				m.Power = &types.PowerUsageDetail{}
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocalPowerDetailListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocalPowerDetailListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocalPowerDetailListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocalPowerDetailListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocalPowerDetailListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocalPowerDetailListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Powers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Powers = append(m.Powers, &GetLocalPowerDetail{})
			if err := m.Powers[len(m.Powers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishPowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishPowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishPowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokePowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokePowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokePowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPowerRpcApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPowerRpcApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPowerRpcApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPowerRpcApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPowerRpcApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPowerRpcApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPowerRpcApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPowerRpcApi = fmt.Errorf("proto: unexpected end of group")
)
