// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carrier/api/sys_rpc_api.proto

package api

import (
	context "context"
	fmt "fmt"
	types "github.com/datumtechs/datum-network-carrier/pb/carrier/types"
	constant "github.com/datumtechs/datum-network-carrier/pb/common/constant"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 节点进程类型
type NodeType int32

const (
	NodeType_NodeType_Unknown  NodeType = 0
	NodeType_NodeType_SeedNode NodeType = 1
	NodeType_NodeType_JobNode  NodeType = 2
	NodeType_NodeType_DataNode NodeType = 3
	NodeType_NodeType_YarnNode NodeType = 4
)

var NodeType_name = map[int32]string{
	0: "NodeType_Unknown",
	1: "NodeType_SeedNode",
	2: "NodeType_JobNode",
	3: "NodeType_DataNode",
	4: "NodeType_YarnNode",
}

var NodeType_value = map[string]int32{
	"NodeType_Unknown":  0,
	"NodeType_SeedNode": 1,
	"NodeType_JobNode":  2,
	"NodeType_DataNode": 3,
	"NodeType_YarnNode": 4,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}

func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{0}
}

// 调度服务节点的状态
type YarnNodeState int32

const (
	YarnNodeState_State_Unknown  YarnNodeState = 0
	YarnNodeState_State_Active   YarnNodeState = 1
	YarnNodeState_State_Leave    YarnNodeState = 2
	YarnNodeState_State_Join     YarnNodeState = 3
	YarnNodeState_State_Unuseful YarnNodeState = 4
)

var YarnNodeState_name = map[int32]string{
	0: "State_Unknown",
	1: "State_Active",
	2: "State_Leave",
	3: "State_Join",
	4: "State_Unuseful",
}

var YarnNodeState_value = map[string]int32{
	"State_Unknown":  0,
	"State_Active":   1,
	"State_Leave":    2,
	"State_Join":     3,
	"State_Unuseful": 4,
}

func (x YarnNodeState) String() string {
	return proto.EnumName(YarnNodeState_name, int32(x))
}

func (YarnNodeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{1}
}

// 调度服务和 种子节点 or 计算服务 or 数据服务 的连接状态
// 调度服务自身的状态信息 (0: 未被调度服务连接上; 1: 连接上; )
type ConnState int32

const (
	ConnState_ConnState_UnConnected ConnState = 0
	ConnState_ConnState_Connected   ConnState = 1
)

var ConnState_name = map[int32]string{
	0: "ConnState_UnConnected",
	1: "ConnState_Connected",
}

var ConnState_value = map[string]int32{
	"ConnState_UnConnected": 0,
	"ConnState_Connected":   1,
}

func (x ConnState) String() string {
	return proto.EnumName(ConnState_name, int32(x))
}

func (ConnState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{2}
}

// 调度服务的信息
type YarnNodeInfo struct {
	NodeType                   NodeType                     `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=carrier.api.NodeType" json:"node_type,omitempty"`
	NodeId                     string                       `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	InternalIp                 string                       `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp                 string                       `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort               string                       `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort               string                       `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	IdentityType               string                       `protobuf:"bytes,7,opt,name=identity_type,json=identityType,proto3" json:"identity_type,omitempty"`
	IdentityId                 string                       `protobuf:"bytes,8,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
	ResourceUsed               *types.ResourceUsageOverview `protobuf:"bytes,9,opt,name=resource_used,json=resourceUsed,proto3" json:"resource_used,omitempty"`
	State                      YarnNodeState                `protobuf:"varint,10,opt,name=state,proto3,enum=carrier.api.YarnNodeState" json:"state,omitempty"`
	Name                       string                       `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	RelatePeers                uint32                       `protobuf:"varint,13,opt,name=relate_peers,json=relatePeers,proto3" json:"relate_peers,omitempty"`
	LocalBootstrapNode         string                       `protobuf:"bytes,14,opt,name=local_bootstrap_node,json=localBootstrapNode,proto3" json:"local_bootstrap_node,omitempty"`
	LocalMultiAddr             string                       `protobuf:"bytes,15,opt,name=local_multi_addr,json=localMultiAddr,proto3" json:"local_multi_addr,omitempty"`
	ObserverProxyWalletAddress string                       `protobuf:"bytes,16,opt,name=observer_proxy_wallet_address,json=observerProxyWalletAddress,proto3" json:"observer_proxy_wallet_address,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                     `json:"-"`
	XXX_unrecognized           []byte                       `json:"-"`
	XXX_sizecache              int32                        `json:"-"`
}

func (m *YarnNodeInfo) Reset()         { *m = YarnNodeInfo{} }
func (m *YarnNodeInfo) String() string { return proto.CompactTextString(m) }
func (*YarnNodeInfo) ProtoMessage()    {}
func (*YarnNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{0}
}
func (m *YarnNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnNodeInfo.Merge(m, src)
}
func (m *YarnNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *YarnNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_YarnNodeInfo proto.InternalMessageInfo

func (m *YarnNodeInfo) GetNodeType() NodeType {
	if m != nil {
		return m.NodeType
	}
	return NodeType_NodeType_Unknown
}

func (m *YarnNodeInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *YarnNodeInfo) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *YarnNodeInfo) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *YarnNodeInfo) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *YarnNodeInfo) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

func (m *YarnNodeInfo) GetIdentityType() string {
	if m != nil {
		return m.IdentityType
	}
	return ""
}

func (m *YarnNodeInfo) GetIdentityId() string {
	if m != nil {
		return m.IdentityId
	}
	return ""
}

func (m *YarnNodeInfo) GetResourceUsed() *types.ResourceUsageOverview {
	if m != nil {
		return m.ResourceUsed
	}
	return nil
}

func (m *YarnNodeInfo) GetState() YarnNodeState {
	if m != nil {
		return m.State
	}
	return YarnNodeState_State_Unknown
}

func (m *YarnNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *YarnNodeInfo) GetRelatePeers() uint32 {
	if m != nil {
		return m.RelatePeers
	}
	return 0
}

func (m *YarnNodeInfo) GetLocalBootstrapNode() string {
	if m != nil {
		return m.LocalBootstrapNode
	}
	return ""
}

func (m *YarnNodeInfo) GetLocalMultiAddr() string {
	if m != nil {
		return m.LocalMultiAddr
	}
	return ""
}

func (m *YarnNodeInfo) GetObserverProxyWalletAddress() string {
	if m != nil {
		return m.ObserverProxyWalletAddress
	}
	return ""
}

// 调度服务上被注册的资源节点信息
type YarnRegisteredPeer struct {
	NodeType             NodeType                  `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=carrier.api.NodeType" json:"node_type,omitempty"`
	NodeDetail           *YarnRegisteredPeerDetail `protobuf:"bytes,2,opt,name=node_detail,json=nodeDetail,proto3" json:"node_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *YarnRegisteredPeer) Reset()         { *m = YarnRegisteredPeer{} }
func (m *YarnRegisteredPeer) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredPeer) ProtoMessage()    {}
func (*YarnRegisteredPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{1}
}
func (m *YarnRegisteredPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredPeer.Merge(m, src)
}
func (m *YarnRegisteredPeer) XXX_Size() int {
	return m.Size()
}
func (m *YarnRegisteredPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredPeer.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredPeer proto.InternalMessageInfo

func (m *YarnRegisteredPeer) GetNodeType() NodeType {
	if m != nil {
		return m.NodeType
	}
	return NodeType_NodeType_Unknown
}

func (m *YarnRegisteredPeer) GetNodeDetail() *YarnRegisteredPeerDetail {
	if m != nil {
		return m.NodeDetail
	}
	return nil
}

type YarnRegisteredPeerDetail struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string    `protobuf:"bytes,2,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string    `protobuf:"bytes,3,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string    `protobuf:"bytes,4,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string    `protobuf:"bytes,5,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	ConnState            ConnState `protobuf:"varint,6,opt,name=conn_state,json=connState,proto3,enum=carrier.api.ConnState" json:"conn_state,omitempty"`
	Duration             uint64    `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	TaskCount            uint32    `protobuf:"varint,8,opt,name=task_count,json=taskCount,proto3" json:"task_count,omitempty"`
	TaskIdList           []string  `protobuf:"bytes,9,rep,name=task_id_list,json=taskIdList,proto3" json:"task_id_list,omitempty"`
	FileCount            uint32    `protobuf:"varint,10,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	FileTotalSize        uint32    `protobuf:"varint,11,opt,name=file_total_size,json=fileTotalSize,proto3" json:"file_total_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *YarnRegisteredPeerDetail) Reset()         { *m = YarnRegisteredPeerDetail{} }
func (m *YarnRegisteredPeerDetail) String() string { return proto.CompactTextString(m) }
func (*YarnRegisteredPeerDetail) ProtoMessage()    {}
func (*YarnRegisteredPeerDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{2}
}
func (m *YarnRegisteredPeerDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YarnRegisteredPeerDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YarnRegisteredPeerDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YarnRegisteredPeerDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YarnRegisteredPeerDetail.Merge(m, src)
}
func (m *YarnRegisteredPeerDetail) XXX_Size() int {
	return m.Size()
}
func (m *YarnRegisteredPeerDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_YarnRegisteredPeerDetail.DiscardUnknown(m)
}

var xxx_messageInfo_YarnRegisteredPeerDetail proto.InternalMessageInfo

func (m *YarnRegisteredPeerDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

func (m *YarnRegisteredPeerDetail) GetConnState() ConnState {
	if m != nil {
		return m.ConnState
	}
	return ConnState_ConnState_UnConnected
}

func (m *YarnRegisteredPeerDetail) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *YarnRegisteredPeerDetail) GetTaskCount() uint32 {
	if m != nil {
		return m.TaskCount
	}
	return 0
}

func (m *YarnRegisteredPeerDetail) GetTaskIdList() []string {
	if m != nil {
		return m.TaskIdList
	}
	return nil
}

func (m *YarnRegisteredPeerDetail) GetFileCount() uint32 {
	if m != nil {
		return m.FileCount
	}
	return 0
}

func (m *YarnRegisteredPeerDetail) GetFileTotalSize() uint32 {
	if m != nil {
		return m.FileTotalSize
	}
	return 0
}

type SeedPeer struct {
	Addr                 string    `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	IsDefault            bool      `protobuf:"varint,2,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	ConnState            ConnState `protobuf:"varint,3,opt,name=conn_state,json=connState,proto3,enum=carrier.api.ConnState" json:"conn_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SeedPeer) Reset()         { *m = SeedPeer{} }
func (m *SeedPeer) String() string { return proto.CompactTextString(m) }
func (*SeedPeer) ProtoMessage()    {}
func (*SeedPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{3}
}
func (m *SeedPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeedPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeedPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeedPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedPeer.Merge(m, src)
}
func (m *SeedPeer) XXX_Size() int {
	return m.Size()
}
func (m *SeedPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedPeer.DiscardUnknown(m)
}

var xxx_messageInfo_SeedPeer proto.InternalMessageInfo

func (m *SeedPeer) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *SeedPeer) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *SeedPeer) GetConnState() ConnState {
	if m != nil {
		return m.ConnState
	}
	return ConnState_ConnState_UnConnected
}

// 查看自身调度服务信息 resp
type GetNodeInfoResponse struct {
	Status               int32         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Information          *YarnNodeInfo `protobuf:"bytes,3,opt,name=information,proto3" json:"information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetNodeInfoResponse) Reset()         { *m = GetNodeInfoResponse{} }
func (m *GetNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeInfoResponse) ProtoMessage()    {}
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{4}
}
func (m *GetNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInfoResponse.Merge(m, src)
}
func (m *GetNodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInfoResponse proto.InternalMessageInfo

func (m *GetNodeInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetNodeInfoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetNodeInfoResponse) GetInformation() *YarnNodeInfo {
	if m != nil {
		return m.Information
	}
	return nil
}

// 删除种子or计算or数据服务node信息 req
type DeleteRegisteredNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRegisteredNodeRequest) Reset()         { *m = DeleteRegisteredNodeRequest{} }
func (m *DeleteRegisteredNodeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRegisteredNodeRequest) ProtoMessage()    {}
func (*DeleteRegisteredNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{5}
}
func (m *DeleteRegisteredNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRegisteredNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRegisteredNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRegisteredNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRegisteredNodeRequest.Merge(m, src)
}
func (m *DeleteRegisteredNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRegisteredNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRegisteredNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRegisteredNodeRequest proto.InternalMessageInfo

func (m *DeleteRegisteredNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// 新增种子节点信息 req
type SetSeedNodeRequest struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetSeedNodeRequest) Reset()         { *m = SetSeedNodeRequest{} }
func (m *SetSeedNodeRequest) String() string { return proto.CompactTextString(m) }
func (*SetSeedNodeRequest) ProtoMessage()    {}
func (*SetSeedNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{6}
}
func (m *SetSeedNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSeedNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSeedNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSeedNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSeedNodeRequest.Merge(m, src)
}
func (m *SetSeedNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetSeedNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSeedNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetSeedNodeRequest proto.InternalMessageInfo

func (m *SetSeedNodeRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

// 删除种子节点信息 req
type DeleteSeedNodeRequest struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSeedNodeRequest) Reset()         { *m = DeleteSeedNodeRequest{} }
func (m *DeleteSeedNodeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSeedNodeRequest) ProtoMessage()    {}
func (*DeleteSeedNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{7}
}
func (m *DeleteSeedNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSeedNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSeedNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSeedNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSeedNodeRequest.Merge(m, src)
}
func (m *DeleteSeedNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSeedNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSeedNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSeedNodeRequest proto.InternalMessageInfo

func (m *DeleteSeedNodeRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

// 新增 种子节点信息 resp
type SetSeedNodeResponse struct {
	Status               int32     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Node                 *SeedPeer `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SetSeedNodeResponse) Reset()         { *m = SetSeedNodeResponse{} }
func (m *SetSeedNodeResponse) String() string { return proto.CompactTextString(m) }
func (*SetSeedNodeResponse) ProtoMessage()    {}
func (*SetSeedNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{8}
}
func (m *SetSeedNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSeedNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSeedNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSeedNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSeedNodeResponse.Merge(m, src)
}
func (m *SetSeedNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetSeedNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSeedNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetSeedNodeResponse proto.InternalMessageInfo

func (m *SetSeedNodeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SetSeedNodeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SetSeedNodeResponse) GetNode() *SeedPeer {
	if m != nil {
		return m.Node
	}
	return nil
}

// 查询种子节点列表 resp
type GetSeedNodeListResponse struct {
	Status               int32       `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Nodes                []*SeedPeer `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetSeedNodeListResponse) Reset()         { *m = GetSeedNodeListResponse{} }
func (m *GetSeedNodeListResponse) String() string { return proto.CompactTextString(m) }
func (*GetSeedNodeListResponse) ProtoMessage()    {}
func (*GetSeedNodeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{9}
}
func (m *GetSeedNodeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeedNodeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeedNodeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeedNodeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeedNodeListResponse.Merge(m, src)
}
func (m *GetSeedNodeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSeedNodeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeedNodeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeedNodeListResponse proto.InternalMessageInfo

func (m *GetSeedNodeListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetSeedNodeListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetSeedNodeListResponse) GetNodes() []*SeedPeer {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// 新增数据服务信息 req
type SetDataNodeRequest struct {
	InternalIp           string   `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string   `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string   `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDataNodeRequest) Reset()         { *m = SetDataNodeRequest{} }
func (m *SetDataNodeRequest) String() string { return proto.CompactTextString(m) }
func (*SetDataNodeRequest) ProtoMessage()    {}
func (*SetDataNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{10}
}
func (m *SetDataNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDataNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDataNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDataNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDataNodeRequest.Merge(m, src)
}
func (m *SetDataNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetDataNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDataNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDataNodeRequest proto.InternalMessageInfo

func (m *SetDataNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *SetDataNodeRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *SetDataNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *SetDataNodeRequest) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

// 新增|修改 数据服务信息 resp
type SetDataNodeResponse struct {
	Status               int32                     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Node                 *YarnRegisteredPeerDetail `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SetDataNodeResponse) Reset()         { *m = SetDataNodeResponse{} }
func (m *SetDataNodeResponse) String() string { return proto.CompactTextString(m) }
func (*SetDataNodeResponse) ProtoMessage()    {}
func (*SetDataNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{11}
}
func (m *SetDataNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDataNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDataNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDataNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDataNodeResponse.Merge(m, src)
}
func (m *SetDataNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetDataNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDataNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetDataNodeResponse proto.InternalMessageInfo

func (m *SetDataNodeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SetDataNodeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SetDataNodeResponse) GetNode() *YarnRegisteredPeerDetail {
	if m != nil {
		return m.Node
	}
	return nil
}

// 修改数据服务信息 req
type UpdateDataNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string   `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string   `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string   `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDataNodeRequest) Reset()         { *m = UpdateDataNodeRequest{} }
func (m *UpdateDataNodeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDataNodeRequest) ProtoMessage()    {}
func (*UpdateDataNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{12}
}
func (m *UpdateDataNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDataNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDataNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDataNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDataNodeRequest.Merge(m, src)
}
func (m *UpdateDataNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDataNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDataNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDataNodeRequest proto.InternalMessageInfo

func (m *UpdateDataNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateDataNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *UpdateDataNodeRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *UpdateDataNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *UpdateDataNodeRequest) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

// 查询数据 or 计算 服务列表 resp
type GetRegisteredNodeListResponse struct {
	Status               int32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Nodes                []*YarnRegisteredPeer `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetRegisteredNodeListResponse) Reset()         { *m = GetRegisteredNodeListResponse{} }
func (m *GetRegisteredNodeListResponse) String() string { return proto.CompactTextString(m) }
func (*GetRegisteredNodeListResponse) ProtoMessage()    {}
func (*GetRegisteredNodeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{13}
}
func (m *GetRegisteredNodeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegisteredNodeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegisteredNodeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegisteredNodeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegisteredNodeListResponse.Merge(m, src)
}
func (m *GetRegisteredNodeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRegisteredNodeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegisteredNodeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegisteredNodeListResponse proto.InternalMessageInfo

func (m *GetRegisteredNodeListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetRegisteredNodeListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetRegisteredNodeListResponse) GetNodes() []*YarnRegisteredPeer {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// 新增计算服务信息 req
type SetJobNodeRequest struct {
	InternalIp           string   `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string   `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string   `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetJobNodeRequest) Reset()         { *m = SetJobNodeRequest{} }
func (m *SetJobNodeRequest) String() string { return proto.CompactTextString(m) }
func (*SetJobNodeRequest) ProtoMessage()    {}
func (*SetJobNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{14}
}
func (m *SetJobNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetJobNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetJobNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetJobNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetJobNodeRequest.Merge(m, src)
}
func (m *SetJobNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetJobNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetJobNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetJobNodeRequest proto.InternalMessageInfo

func (m *SetJobNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *SetJobNodeRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *SetJobNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *SetJobNodeRequest) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

// 新增|修改 计算服务信息 resp
type SetJobNodeResponse struct {
	Status               int32                     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Node                 *YarnRegisteredPeerDetail `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SetJobNodeResponse) Reset()         { *m = SetJobNodeResponse{} }
func (m *SetJobNodeResponse) String() string { return proto.CompactTextString(m) }
func (*SetJobNodeResponse) ProtoMessage()    {}
func (*SetJobNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{15}
}
func (m *SetJobNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetJobNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetJobNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetJobNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetJobNodeResponse.Merge(m, src)
}
func (m *SetJobNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetJobNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetJobNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetJobNodeResponse proto.InternalMessageInfo

func (m *SetJobNodeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SetJobNodeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SetJobNodeResponse) GetNode() *YarnRegisteredPeerDetail {
	if m != nil {
		return m.Node
	}
	return nil
}

// 修改计算服务信息 req
type UpdateJobNodeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalIp           string   `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	ExternalIp           string   `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	InternalPort         string   `protobuf:"bytes,5,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort         string   `protobuf:"bytes,6,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateJobNodeRequest) Reset()         { *m = UpdateJobNodeRequest{} }
func (m *UpdateJobNodeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateJobNodeRequest) ProtoMessage()    {}
func (*UpdateJobNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{16}
}
func (m *UpdateJobNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateJobNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateJobNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateJobNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobNodeRequest.Merge(m, src)
}
func (m *UpdateJobNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateJobNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobNodeRequest proto.InternalMessageInfo

func (m *UpdateJobNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateJobNodeRequest) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *UpdateJobNodeRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *UpdateJobNodeRequest) GetInternalPort() string {
	if m != nil {
		return m.InternalPort
	}
	return ""
}

func (m *UpdateJobNodeRequest) GetExternalPort() string {
	if m != nil {
		return m.ExternalPort
	}
	return ""
}

// 数据/计算服务 上报任务事件 req
type ReportTaskEventRequest struct {
	TaskEvent            *types.TaskEvent `protobuf:"bytes,1,opt,name=task_event,json=taskEvent,proto3" json:"task_event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReportTaskEventRequest) Reset()         { *m = ReportTaskEventRequest{} }
func (m *ReportTaskEventRequest) String() string { return proto.CompactTextString(m) }
func (*ReportTaskEventRequest) ProtoMessage()    {}
func (*ReportTaskEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{17}
}
func (m *ReportTaskEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportTaskEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportTaskEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportTaskEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportTaskEventRequest.Merge(m, src)
}
func (m *ReportTaskEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportTaskEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportTaskEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportTaskEventRequest proto.InternalMessageInfo

func (m *ReportTaskEventRequest) GetTaskEvent() *types.TaskEvent {
	if m != nil {
		return m.TaskEvent
	}
	return nil
}

// 数据/计算服务 上报任务资源使用实况 req
type ReportTaskResourceUsageRequest struct {
	TaskId               string                       `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	PartyId              string                       `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	NodeType             NodeType                     `protobuf:"varint,3,opt,name=node_type,json=nodeType,proto3,enum=carrier.api.NodeType" json:"node_type,omitempty"`
	Ip                   string                       `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string                       `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
	Usage                *types.ResourceUsageOverview `protobuf:"bytes,6,opt,name=usage,proto3" json:"usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ReportTaskResourceUsageRequest) Reset()         { *m = ReportTaskResourceUsageRequest{} }
func (m *ReportTaskResourceUsageRequest) String() string { return proto.CompactTextString(m) }
func (*ReportTaskResourceUsageRequest) ProtoMessage()    {}
func (*ReportTaskResourceUsageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{18}
}
func (m *ReportTaskResourceUsageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportTaskResourceUsageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportTaskResourceUsageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportTaskResourceUsageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportTaskResourceUsageRequest.Merge(m, src)
}
func (m *ReportTaskResourceUsageRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportTaskResourceUsageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportTaskResourceUsageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportTaskResourceUsageRequest proto.InternalMessageInfo

func (m *ReportTaskResourceUsageRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ReportTaskResourceUsageRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *ReportTaskResourceUsageRequest) GetNodeType() NodeType {
	if m != nil {
		return m.NodeType
	}
	return NodeType_NodeType_Unknown
}

func (m *ReportTaskResourceUsageRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReportTaskResourceUsageRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ReportTaskResourceUsageRequest) GetUsage() *types.ResourceUsageOverview {
	if m != nil {
		return m.Usage
	}
	return nil
}

// 上报 成功上传的原始文件Id req
type ReportUpFileSummaryRequest struct {
	OriginId             string                  `protobuf:"bytes,1,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	Ip                   string                  `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string                  `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	DataHash             string                  `protobuf:"bytes,4,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	DataType             constant.OrigindataType `protobuf:"varint,5,opt,name=data_type,json=dataType,proto3,enum=common.constant.OrigindataType" json:"data_type,omitempty"`
	MetadataOption       string                  `protobuf:"bytes,6,opt,name=metadata_option,json=metadataOption,proto3" json:"metadata_option,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReportUpFileSummaryRequest) Reset()         { *m = ReportUpFileSummaryRequest{} }
func (m *ReportUpFileSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*ReportUpFileSummaryRequest) ProtoMessage()    {}
func (*ReportUpFileSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{19}
}
func (m *ReportUpFileSummaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportUpFileSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportUpFileSummaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportUpFileSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportUpFileSummaryRequest.Merge(m, src)
}
func (m *ReportUpFileSummaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportUpFileSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportUpFileSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportUpFileSummaryRequest proto.InternalMessageInfo

func (m *ReportUpFileSummaryRequest) GetOriginId() string {
	if m != nil {
		return m.OriginId
	}
	return ""
}

func (m *ReportUpFileSummaryRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReportUpFileSummaryRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ReportUpFileSummaryRequest) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *ReportUpFileSummaryRequest) GetDataType() constant.OrigindataType {
	if m != nil {
		return m.DataType
	}
	return constant.OrigindataType_OrigindataType_Unknown
}

func (m *ReportUpFileSummaryRequest) GetMetadataOption() string {
	if m != nil {
		return m.MetadataOption
	}
	return ""
}

// 上报 任务结果文件摘要 req
type ReportTaskResultFileSummaryRequest struct {
	TaskId               string                  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	OriginId             string                  `protobuf:"bytes,2,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	Ip                   string                  `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string                  `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	Extra                string                  `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	DataHash             string                  `protobuf:"bytes,6,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	DataType             constant.OrigindataType `protobuf:"varint,7,opt,name=data_type,json=dataType,proto3,enum=common.constant.OrigindataType" json:"data_type,omitempty"`
	MetadataOption       string                  `protobuf:"bytes,8,opt,name=metadata_option,json=metadataOption,proto3" json:"metadata_option,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReportTaskResultFileSummaryRequest) Reset()         { *m = ReportTaskResultFileSummaryRequest{} }
func (m *ReportTaskResultFileSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*ReportTaskResultFileSummaryRequest) ProtoMessage()    {}
func (*ReportTaskResultFileSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{20}
}
func (m *ReportTaskResultFileSummaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportTaskResultFileSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportTaskResultFileSummaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportTaskResultFileSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportTaskResultFileSummaryRequest.Merge(m, src)
}
func (m *ReportTaskResultFileSummaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportTaskResultFileSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportTaskResultFileSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportTaskResultFileSummaryRequest proto.InternalMessageInfo

func (m *ReportTaskResultFileSummaryRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ReportTaskResultFileSummaryRequest) GetOriginId() string {
	if m != nil {
		return m.OriginId
	}
	return ""
}

func (m *ReportTaskResultFileSummaryRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ReportTaskResultFileSummaryRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ReportTaskResultFileSummaryRequest) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *ReportTaskResultFileSummaryRequest) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *ReportTaskResultFileSummaryRequest) GetDataType() constant.OrigindataType {
	if m != nil {
		return m.DataType
	}
	return constant.OrigindataType_OrigindataType_Unknown
}

func (m *ReportTaskResultFileSummaryRequest) GetMetadataOption() string {
	if m != nil {
		return m.MetadataOption
	}
	return ""
}

// 查询可用数据服务资源目标 ip:port 信息 req
type QueryAvailableDataNodeRequest struct {
	DataSize             uint64                  `protobuf:"varint,1,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	DataType             constant.OrigindataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=common.constant.OrigindataType" json:"data_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *QueryAvailableDataNodeRequest) Reset()         { *m = QueryAvailableDataNodeRequest{} }
func (m *QueryAvailableDataNodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAvailableDataNodeRequest) ProtoMessage()    {}
func (*QueryAvailableDataNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{21}
}
func (m *QueryAvailableDataNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvailableDataNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvailableDataNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvailableDataNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvailableDataNodeRequest.Merge(m, src)
}
func (m *QueryAvailableDataNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvailableDataNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvailableDataNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvailableDataNodeRequest proto.InternalMessageInfo

func (m *QueryAvailableDataNodeRequest) GetDataSize() uint64 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

func (m *QueryAvailableDataNodeRequest) GetDataType() constant.OrigindataType {
	if m != nil {
		return m.DataType
	}
	return constant.OrigindataType_OrigindataType_Unknown
}

// 查询可用数据服务资源目标 ip:port 信息 resp
type QueryAvailableDataNode struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryAvailableDataNode) Reset()         { *m = QueryAvailableDataNode{} }
func (m *QueryAvailableDataNode) String() string { return proto.CompactTextString(m) }
func (*QueryAvailableDataNode) ProtoMessage()    {}
func (*QueryAvailableDataNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{22}
}
func (m *QueryAvailableDataNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvailableDataNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvailableDataNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvailableDataNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvailableDataNode.Merge(m, src)
}
func (m *QueryAvailableDataNode) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvailableDataNode) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvailableDataNode.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvailableDataNode proto.InternalMessageInfo

func (m *QueryAvailableDataNode) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryAvailableDataNode) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type QueryAvailableDataNodeResponse struct {
	Status               int32                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Information          *QueryAvailableDataNode `protobuf:"bytes,3,opt,name=information,proto3" json:"information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *QueryAvailableDataNodeResponse) Reset()         { *m = QueryAvailableDataNodeResponse{} }
func (m *QueryAvailableDataNodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAvailableDataNodeResponse) ProtoMessage()    {}
func (*QueryAvailableDataNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{23}
}
func (m *QueryAvailableDataNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAvailableDataNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAvailableDataNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAvailableDataNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAvailableDataNodeResponse.Merge(m, src)
}
func (m *QueryAvailableDataNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAvailableDataNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAvailableDataNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAvailableDataNodeResponse proto.InternalMessageInfo

func (m *QueryAvailableDataNodeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryAvailableDataNodeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *QueryAvailableDataNodeResponse) GetInformation() *QueryAvailableDataNode {
	if m != nil {
		return m.Information
	}
	return nil
}

// 查询需要下载的目标原始文件所在的 数据服务信息和文件的完整相对路径 req
type QueryFilePositionRequest struct {
	OriginId             string   `protobuf:"bytes,1,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryFilePositionRequest) Reset()         { *m = QueryFilePositionRequest{} }
func (m *QueryFilePositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFilePositionRequest) ProtoMessage()    {}
func (*QueryFilePositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{24}
}
func (m *QueryFilePositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFilePositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFilePositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFilePositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFilePositionRequest.Merge(m, src)
}
func (m *QueryFilePositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFilePositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFilePositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFilePositionRequest proto.InternalMessageInfo

func (m *QueryFilePositionRequest) GetOriginId() string {
	if m != nil {
		return m.OriginId
	}
	return ""
}

// 查询需要下载的目标原始文件所在的 数据服务信息和文件的完整相对路径 resp
type QueryFilePosition struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	DataPath             string   `protobuf:"bytes,3,opt,name=data_path,json=dataPath,proto3" json:"data_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryFilePosition) Reset()         { *m = QueryFilePosition{} }
func (m *QueryFilePosition) String() string { return proto.CompactTextString(m) }
func (*QueryFilePosition) ProtoMessage()    {}
func (*QueryFilePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{25}
}
func (m *QueryFilePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFilePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFilePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFilePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFilePosition.Merge(m, src)
}
func (m *QueryFilePosition) XXX_Size() int {
	return m.Size()
}
func (m *QueryFilePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFilePosition.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFilePosition proto.InternalMessageInfo

func (m *QueryFilePosition) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueryFilePosition) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *QueryFilePosition) GetDataPath() string {
	if m != nil {
		return m.DataPath
	}
	return ""
}

type QueryFilePositionResponse struct {
	Status               int32              `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Information          *QueryFilePosition `protobuf:"bytes,3,opt,name=information,proto3" json:"information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *QueryFilePositionResponse) Reset()         { *m = QueryFilePositionResponse{} }
func (m *QueryFilePositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFilePositionResponse) ProtoMessage()    {}
func (*QueryFilePositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{26}
}
func (m *QueryFilePositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFilePositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFilePositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFilePositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFilePositionResponse.Merge(m, src)
}
func (m *QueryFilePositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFilePositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFilePositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFilePositionResponse proto.InternalMessageInfo

func (m *QueryFilePositionResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryFilePositionResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *QueryFilePositionResponse) GetInformation() *QueryFilePosition {
	if m != nil {
		return m.Information
	}
	return nil
}

// 查询 任务结果文件摘要 req
type GetTaskResultFileSummaryRequest struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskResultFileSummaryRequest) Reset()         { *m = GetTaskResultFileSummaryRequest{} }
func (m *GetTaskResultFileSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskResultFileSummaryRequest) ProtoMessage()    {}
func (*GetTaskResultFileSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{27}
}
func (m *GetTaskResultFileSummaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskResultFileSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskResultFileSummaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskResultFileSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskResultFileSummaryRequest.Merge(m, src)
}
func (m *GetTaskResultFileSummaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskResultFileSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskResultFileSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskResultFileSummaryRequest proto.InternalMessageInfo

func (m *GetTaskResultFileSummaryRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// 查询 任务结果文件摘要 resp
type GetTaskResultFileSummary struct {
	TaskId               string                  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	MetadataName         string                  `protobuf:"bytes,2,opt,name=metadata_name,json=metadataName,proto3" json:"metadata_name,omitempty"`
	MetadataId           string                  `protobuf:"bytes,3,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	OriginId             string                  `protobuf:"bytes,4,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	Ip                   string                  `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string                  `protobuf:"bytes,6,opt,name=port,proto3" json:"port,omitempty"`
	Extra                string                  `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`
	DataHash             string                  `protobuf:"bytes,8,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	DataType             constant.OrigindataType `protobuf:"varint,9,opt,name=data_type,json=dataType,proto3,enum=common.constant.OrigindataType" json:"data_type,omitempty"`
	MetadataOption       string                  `protobuf:"bytes,10,opt,name=metadata_option,json=metadataOption,proto3" json:"metadata_option,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetTaskResultFileSummary) Reset()         { *m = GetTaskResultFileSummary{} }
func (m *GetTaskResultFileSummary) String() string { return proto.CompactTextString(m) }
func (*GetTaskResultFileSummary) ProtoMessage()    {}
func (*GetTaskResultFileSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{28}
}
func (m *GetTaskResultFileSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskResultFileSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskResultFileSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskResultFileSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskResultFileSummary.Merge(m, src)
}
func (m *GetTaskResultFileSummary) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskResultFileSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskResultFileSummary.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskResultFileSummary proto.InternalMessageInfo

func (m *GetTaskResultFileSummary) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *GetTaskResultFileSummary) GetMetadataName() string {
	if m != nil {
		return m.MetadataName
	}
	return ""
}

func (m *GetTaskResultFileSummary) GetMetadataId() string {
	if m != nil {
		return m.MetadataId
	}
	return ""
}

func (m *GetTaskResultFileSummary) GetOriginId() string {
	if m != nil {
		return m.OriginId
	}
	return ""
}

func (m *GetTaskResultFileSummary) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetTaskResultFileSummary) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *GetTaskResultFileSummary) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *GetTaskResultFileSummary) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *GetTaskResultFileSummary) GetDataType() constant.OrigindataType {
	if m != nil {
		return m.DataType
	}
	return constant.OrigindataType_OrigindataType_Unknown
}

func (m *GetTaskResultFileSummary) GetMetadataOption() string {
	if m != nil {
		return m.MetadataOption
	}
	return ""
}

type GetTaskResultFileSummaryResponse struct {
	Status               int32                     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Information          *GetTaskResultFileSummary `protobuf:"bytes,3,opt,name=information,proto3" json:"information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetTaskResultFileSummaryResponse) Reset()         { *m = GetTaskResultFileSummaryResponse{} }
func (m *GetTaskResultFileSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*GetTaskResultFileSummaryResponse) ProtoMessage()    {}
func (*GetTaskResultFileSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{29}
}
func (m *GetTaskResultFileSummaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskResultFileSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskResultFileSummaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskResultFileSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskResultFileSummaryResponse.Merge(m, src)
}
func (m *GetTaskResultFileSummaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskResultFileSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskResultFileSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskResultFileSummaryResponse proto.InternalMessageInfo

func (m *GetTaskResultFileSummaryResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetTaskResultFileSummaryResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetTaskResultFileSummaryResponse) GetInformation() *GetTaskResultFileSummary {
	if m != nil {
		return m.Information
	}
	return nil
}

// 查询当前组织参与的所有任务结果文件摘要 resp
type GetTaskResultFileSummaryListResponse struct {
	Status               int32                       `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskResultFiles      []*GetTaskResultFileSummary `protobuf:"bytes,3,rep,name=task_result_files,json=taskResultFiles,proto3" json:"task_result_files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetTaskResultFileSummaryListResponse) Reset()         { *m = GetTaskResultFileSummaryListResponse{} }
func (m *GetTaskResultFileSummaryListResponse) String() string { return proto.CompactTextString(m) }
func (*GetTaskResultFileSummaryListResponse) ProtoMessage()    {}
func (*GetTaskResultFileSummaryListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{30}
}
func (m *GetTaskResultFileSummaryListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskResultFileSummaryListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskResultFileSummaryListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskResultFileSummaryListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskResultFileSummaryListResponse.Merge(m, src)
}
func (m *GetTaskResultFileSummaryListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskResultFileSummaryListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskResultFileSummaryListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskResultFileSummaryListResponse proto.InternalMessageInfo

func (m *GetTaskResultFileSummaryListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetTaskResultFileSummaryListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetTaskResultFileSummaryListResponse) GetTaskResultFiles() []*GetTaskResultFileSummary {
	if m != nil {
		return m.TaskResultFiles
	}
	return nil
}

type GenerateObServerProxyWalletAddressResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateObServerProxyWalletAddressResponse) Reset() {
	*m = GenerateObServerProxyWalletAddressResponse{}
}
func (m *GenerateObServerProxyWalletAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GenerateObServerProxyWalletAddressResponse) ProtoMessage() {}
func (*GenerateObServerProxyWalletAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abed06584bb4f9d5, []int{31}
}
func (m *GenerateObServerProxyWalletAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateObServerProxyWalletAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateObServerProxyWalletAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateObServerProxyWalletAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateObServerProxyWalletAddressResponse.Merge(m, src)
}
func (m *GenerateObServerProxyWalletAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenerateObServerProxyWalletAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateObServerProxyWalletAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateObServerProxyWalletAddressResponse proto.InternalMessageInfo

func (m *GenerateObServerProxyWalletAddressResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GenerateObServerProxyWalletAddressResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GenerateObServerProxyWalletAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterEnum("carrier.api.NodeType", NodeType_name, NodeType_value)
	proto.RegisterEnum("carrier.api.YarnNodeState", YarnNodeState_name, YarnNodeState_value)
	proto.RegisterEnum("carrier.api.ConnState", ConnState_name, ConnState_value)
	proto.RegisterType((*YarnNodeInfo)(nil), "carrier.api.YarnNodeInfo")
	proto.RegisterType((*YarnRegisteredPeer)(nil), "carrier.api.YarnRegisteredPeer")
	proto.RegisterType((*YarnRegisteredPeerDetail)(nil), "carrier.api.YarnRegisteredPeerDetail")
	proto.RegisterType((*SeedPeer)(nil), "carrier.api.SeedPeer")
	proto.RegisterType((*GetNodeInfoResponse)(nil), "carrier.api.GetNodeInfoResponse")
	proto.RegisterType((*DeleteRegisteredNodeRequest)(nil), "carrier.api.DeleteRegisteredNodeRequest")
	proto.RegisterType((*SetSeedNodeRequest)(nil), "carrier.api.SetSeedNodeRequest")
	proto.RegisterType((*DeleteSeedNodeRequest)(nil), "carrier.api.DeleteSeedNodeRequest")
	proto.RegisterType((*SetSeedNodeResponse)(nil), "carrier.api.SetSeedNodeResponse")
	proto.RegisterType((*GetSeedNodeListResponse)(nil), "carrier.api.GetSeedNodeListResponse")
	proto.RegisterType((*SetDataNodeRequest)(nil), "carrier.api.SetDataNodeRequest")
	proto.RegisterType((*SetDataNodeResponse)(nil), "carrier.api.SetDataNodeResponse")
	proto.RegisterType((*UpdateDataNodeRequest)(nil), "carrier.api.UpdateDataNodeRequest")
	proto.RegisterType((*GetRegisteredNodeListResponse)(nil), "carrier.api.GetRegisteredNodeListResponse")
	proto.RegisterType((*SetJobNodeRequest)(nil), "carrier.api.SetJobNodeRequest")
	proto.RegisterType((*SetJobNodeResponse)(nil), "carrier.api.SetJobNodeResponse")
	proto.RegisterType((*UpdateJobNodeRequest)(nil), "carrier.api.UpdateJobNodeRequest")
	proto.RegisterType((*ReportTaskEventRequest)(nil), "carrier.api.ReportTaskEventRequest")
	proto.RegisterType((*ReportTaskResourceUsageRequest)(nil), "carrier.api.ReportTaskResourceUsageRequest")
	proto.RegisterType((*ReportUpFileSummaryRequest)(nil), "carrier.api.ReportUpFileSummaryRequest")
	proto.RegisterType((*ReportTaskResultFileSummaryRequest)(nil), "carrier.api.ReportTaskResultFileSummaryRequest")
	proto.RegisterType((*QueryAvailableDataNodeRequest)(nil), "carrier.api.QueryAvailableDataNodeRequest")
	proto.RegisterType((*QueryAvailableDataNode)(nil), "carrier.api.QueryAvailableDataNode")
	proto.RegisterType((*QueryAvailableDataNodeResponse)(nil), "carrier.api.QueryAvailableDataNodeResponse")
	proto.RegisterType((*QueryFilePositionRequest)(nil), "carrier.api.QueryFilePositionRequest")
	proto.RegisterType((*QueryFilePosition)(nil), "carrier.api.QueryFilePosition")
	proto.RegisterType((*QueryFilePositionResponse)(nil), "carrier.api.QueryFilePositionResponse")
	proto.RegisterType((*GetTaskResultFileSummaryRequest)(nil), "carrier.api.GetTaskResultFileSummaryRequest")
	proto.RegisterType((*GetTaskResultFileSummary)(nil), "carrier.api.GetTaskResultFileSummary")
	proto.RegisterType((*GetTaskResultFileSummaryResponse)(nil), "carrier.api.GetTaskResultFileSummaryResponse")
	proto.RegisterType((*GetTaskResultFileSummaryListResponse)(nil), "carrier.api.GetTaskResultFileSummaryListResponse")
	proto.RegisterType((*GenerateObServerProxyWalletAddressResponse)(nil), "carrier.api.GenerateObServerProxyWalletAddressResponse")
}

func init() { proto.RegisterFile("carrier/api/sys_rpc_api.proto", fileDescriptor_abed06584bb4f9d5) }

var fileDescriptor_abed06584bb4f9d5 = []byte{
	// 2305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdf, 0x6f, 0x1c, 0x49,
	0xf1, 0xbf, 0xd9, 0xf5, 0x8f, 0xdd, 0x5a, 0xaf, 0xbd, 0xe9, 0x24, 0xce, 0x64, 0x1d, 0xdb, 0x9b,
	0x8e, 0x93, 0x38, 0x76, 0xbc, 0x7b, 0xf1, 0x7d, 0x4f, 0xd1, 0x37, 0x9c, 0x04, 0xb9, 0x4b, 0xce,
	0xe7, 0xd3, 0x71, 0x49, 0xd6, 0x89, 0x10, 0xbc, 0x8c, 0xda, 0x3b, 0x6d, 0x7b, 0x92, 0xd9, 0x99,
	0xb9, 0x99, 0x1e, 0x27, 0xeb, 0x3b, 0xa1, 0x53, 0x10, 0xe2, 0x0d, 0x11, 0x21, 0x24, 0x84, 0x84,
	0x40, 0x42, 0xf0, 0x00, 0x6f, 0xf0, 0x4f, 0xf0, 0x88, 0x04, 0x7f, 0x00, 0x44, 0x3c, 0xf0, 0xce,
	0x3f, 0x80, 0xba, 0x7b, 0x7a, 0x77, 0xe7, 0x97, 0x77, 0x6d, 0x45, 0x90, 0xb7, 0xde, 0xea, 0xea,
	0xaa, 0x4f, 0x7f, 0xaa, 0x7a, 0xba, 0xaa, 0x6d, 0x58, 0xec, 0x10, 0xdf, 0xb7, 0xa8, 0xdf, 0x22,
	0x9e, 0xd5, 0x0a, 0x7a, 0x81, 0xe1, 0x7b, 0x1d, 0x83, 0x78, 0x56, 0xd3, 0xf3, 0x5d, 0xe6, 0xa2,
	0x4a, 0x34, 0xdd, 0x24, 0x9e, 0x55, 0xc7, 0x1d, 0xb7, 0xdb, 0x75, 0x9d, 0x56, 0xc7, 0x75, 0x02,
	0x46, 0x1c, 0xd6, 0x8a, 0x26, 0x0d, 0xea, 0x84, 0x5d, 0xb9, 0xa0, 0x5e, 0x57, 0xf6, 0x58, 0xcf,
	0xa3, 0x41, 0x4b, 0xae, 0x88, 0xe6, 0x1a, 0xf1, 0x39, 0xcb, 0xa4, 0x0e, 0xb3, 0x58, 0xcf, 0x24,
	0x8c, 0x44, 0x1a, 0x97, 0xe2, 0x1a, 0x8c, 0x04, 0xcf, 0x86, 0x66, 0x13, 0xeb, 0x7d, 0x1a, 0xb8,
	0xa1, 0xdf, 0xa1, 0xc3, 0xeb, 0xf7, 0x5d, 0x77, 0xdf, 0xa6, 0x62, 0x33, 0xc4, 0x71, 0x5c, 0x46,
	0x98, 0xe5, 0x3a, 0x41, 0x34, 0xbb, 0x10, 0xcd, 0x8a, 0x5f, 0xbb, 0xe1, 0x5e, 0x8b, 0x76, 0x3d,
	0xd6, 0x93, 0x93, 0xf8, 0xeb, 0x49, 0x98, 0xf9, 0x2e, 0xf1, 0x9d, 0xcf, 0x5d, 0x93, 0x6e, 0x3b,
	0x7b, 0x2e, 0xda, 0x84, 0xb2, 0xe3, 0x9a, 0xd4, 0xe0, 0xce, 0x74, 0xad, 0xa1, 0xad, 0xce, 0x6e,
	0x9e, 0x6f, 0x0e, 0xd1, 0xd1, 0xe4, 0x9a, 0x8f, 0x7b, 0x1e, 0x6d, 0x97, 0x9c, 0x68, 0x84, 0x2e,
	0xc0, 0xb4, 0x58, 0x63, 0x99, 0x7a, 0xa1, 0xa1, 0xad, 0x96, 0xdb, 0x53, 0xfc, 0xe7, 0xb6, 0x89,
	0x96, 0xa1, 0x62, 0x39, 0x8c, 0xfa, 0x0e, 0xb1, 0x0d, 0xcb, 0xd3, 0x8b, 0x62, 0x12, 0x94, 0x68,
	0xdb, 0xe3, 0x0a, 0xf4, 0xc5, 0x40, 0x61, 0x42, 0x2a, 0x28, 0xd1, 0xb6, 0x87, 0xae, 0x40, 0xb5,
	0x6f, 0xc1, 0x73, 0x7d, 0xa6, 0x4f, 0x0a, 0x95, 0x19, 0x25, 0x7c, 0xe8, 0xfa, 0x8c, 0x2b, 0xf5,
	0xad, 0x08, 0xa5, 0x29, 0xa9, 0xa4, 0x84, 0x4a, 0x49, 0x51, 0x2f, 0x37, 0x37, 0x1d, 0x59, 0x8a,
	0x84, 0x62, 0x27, 0x1c, 0xb0, 0x52, 0xb2, 0x4c, 0xbd, 0x14, 0x01, 0x8e, 0x44, 0xdb, 0x26, 0xda,
	0x86, 0xaa, 0x0a, 0x80, 0x11, 0x06, 0xd4, 0xd4, 0xcb, 0x0d, 0x6d, 0xb5, 0xb2, 0xb9, 0xd2, 0xa7,
	0x48, 0x04, 0xa9, 0xd9, 0x8e, 0x74, 0x9e, 0x04, 0x64, 0x9f, 0x3e, 0x38, 0xa4, 0xfe, 0xa1, 0x45,
	0x9f, 0xb7, 0x67, 0xfc, 0xbe, 0x98, 0x9a, 0xe8, 0x5d, 0x98, 0x0c, 0x18, 0x61, 0x54, 0x07, 0xc1,
	0x72, 0x3d, 0xc6, 0xb2, 0x8a, 0xc9, 0x0e, 0xd7, 0x68, 0x4b, 0x45, 0x84, 0x60, 0xc2, 0x21, 0x5d,
	0xaa, 0xcf, 0x08, 0x58, 0x62, 0x8c, 0x2e, 0xc3, 0x8c, 0x4f, 0x6d, 0xc2, 0xa8, 0xe1, 0x51, 0xea,
	0x07, 0x7a, 0xb5, 0xa1, 0xad, 0x56, 0xdb, 0x15, 0x29, 0x7b, 0xc8, 0x45, 0xe8, 0x5d, 0x38, 0x67,
	0xbb, 0x1d, 0x62, 0x1b, 0xbb, 0xae, 0xcb, 0x02, 0xe6, 0x13, 0xcf, 0xe0, 0xf1, 0xd1, 0x67, 0x85,
	0x19, 0x24, 0xe6, 0x3e, 0x54, 0x53, 0xdc, 0x29, 0x5a, 0x85, 0x9a, 0x5c, 0xd1, 0x0d, 0x6d, 0x66,
	0x19, 0xc4, 0x34, 0x7d, 0x7d, 0x4e, 0x68, 0xcf, 0x0a, 0xf9, 0xb7, 0xb9, 0xf8, 0xae, 0x69, 0xfa,
	0xe8, 0x2e, 0x2c, 0xba, 0xbb, 0x01, 0xf5, 0x0f, 0xa9, 0x6f, 0x78, 0xbe, 0xfb, 0xa2, 0x67, 0x3c,
	0x27, 0xb6, 0x4d, 0x99, 0x58, 0x43, 0x83, 0x40, 0xaf, 0x89, 0x65, 0x75, 0xa5, 0xf4, 0x90, 0xeb,
	0x7c, 0x47, 0xa8, 0xdc, 0x95, 0x1a, 0xf8, 0x27, 0x1a, 0x20, 0xbe, 0xdd, 0x36, 0xdd, 0xb7, 0x02,
	0x46, 0x7d, 0x6a, 0x72, 0xd8, 0xa7, 0x4a, 0xc4, 0x8f, 0xa1, 0x22, 0xd6, 0x98, 0x94, 0x11, 0xcb,
	0x16, 0xc9, 0x58, 0xd9, 0xbc, 0x9a, 0x22, 0x36, 0xee, 0xe9, 0x9e, 0x50, 0x6e, 0x03, 0x5f, 0x29,
	0xc7, 0xf8, 0x55, 0x11, 0xf4, 0x3c, 0x45, 0x34, 0x0b, 0x05, 0xcb, 0x14, 0x88, 0xca, 0xed, 0x82,
	0x95, 0x4a, 0xf2, 0xc2, 0xa8, 0x24, 0x2f, 0x8e, 0x4e, 0xf2, 0x89, 0x71, 0x92, 0x7c, 0x32, 0x23,
	0xc9, 0xdf, 0x07, 0xe8, 0xb8, 0x8e, 0x63, 0xc8, 0xc4, 0x9a, 0x12, 0xac, 0xcd, 0xc7, 0xf6, 0xff,
	0x91, 0xeb, 0x38, 0x32, 0xa9, 0xca, 0x1d, 0x35, 0x44, 0x75, 0x28, 0x99, 0xa1, 0x2f, 0xbe, 0x1a,
	0xe2, 0x58, 0x4c, 0xb4, 0xfb, 0xbf, 0xd1, 0x22, 0x00, 0xff, 0x20, 0x19, 0x1d, 0x37, 0x74, 0x98,
	0x38, 0x11, 0xd5, 0x76, 0x99, 0x4b, 0x3e, 0xe2, 0x02, 0xd4, 0x80, 0x19, 0x31, 0x6d, 0x99, 0x86,
	0x6d, 0x05, 0x4c, 0x2f, 0x37, 0x8a, 0x7c, 0x77, 0x5c, 0xb6, 0x6d, 0x7e, 0x66, 0x05, 0x8c, 0x1b,
	0xd8, 0xb3, 0x6c, 0x1a, 0x19, 0x00, 0x69, 0x80, 0x4b, 0xa4, 0x81, 0x6b, 0x30, 0x27, 0xa6, 0x99,
	0xcb, 0x88, 0x6d, 0x04, 0xd6, 0x11, 0xd5, 0x2b, 0x42, 0xa7, 0xca, 0xc5, 0x8f, 0xb9, 0x74, 0xc7,
	0x3a, 0xa2, 0x98, 0x41, 0x69, 0x87, 0x46, 0xb9, 0x81, 0x60, 0x42, 0xe4, 0xa4, 0x0c, 0x82, 0x18,
	0x73, 0x37, 0x56, 0x60, 0x98, 0x74, 0x8f, 0x84, 0x36, 0x13, 0x51, 0x28, 0xb5, 0xcb, 0x56, 0x70,
	0x4f, 0x0a, 0x12, 0xcc, 0x14, 0xc7, 0x64, 0x06, 0x7f, 0x05, 0x67, 0xb7, 0x28, 0x53, 0x5f, 0xc7,
	0x36, 0x0d, 0x3c, 0xd7, 0x09, 0x28, 0x9a, 0x87, 0x29, 0x6e, 0x28, 0x0c, 0x04, 0x84, 0xc9, 0x76,
	0xf4, 0x0b, 0xd5, 0xa0, 0xd8, 0x0d, 0xf6, 0xa3, 0x1c, 0xe0, 0x43, 0xf4, 0x0d, 0x9e, 0x1d, 0x7b,
	0xae, 0xdf, 0x95, 0xec, 0x16, 0x45, 0x4a, 0x5e, 0xcc, 0x3c, 0xeb, 0xc2, 0xc3, 0xb0, 0x36, 0xde,
	0x80, 0x85, 0x7b, 0xd4, 0xa6, 0x8c, 0x0e, 0x12, 0x91, 0x2b, 0xb6, 0xe9, 0x17, 0x21, 0x0d, 0x58,
	0x32, 0x13, 0xf1, 0x2a, 0xa0, 0x1d, 0xca, 0x38, 0x4b, 0xc3, 0x5a, 0x19, 0x64, 0xe1, 0x75, 0x38,
	0x2f, 0x0d, 0x8f, 0xa3, 0xfc, 0x14, 0xce, 0xc6, 0xcc, 0x9e, 0x98, 0x83, 0x1b, 0x30, 0x21, 0x3e,
	0x38, 0x72, 0xf3, 0xf1, 0x53, 0xac, 0x62, 0xda, 0x16, 0x2a, 0xd8, 0x83, 0x0b, 0x5b, 0x03, 0x5f,
	0x3c, 0x7f, 0x4e, 0xe1, 0x6f, 0x1d, 0x26, 0xb9, 0xb1, 0x40, 0x2f, 0x36, 0x8a, 0xf9, 0x0e, 0xa5,
	0x0e, 0xfe, 0xb5, 0x26, 0x58, 0xbb, 0x47, 0x18, 0x19, 0x26, 0xe2, 0x2d, 0xba, 0xba, 0xf0, 0x91,
	0x08, 0xc0, 0x00, 0xe1, 0x89, 0x09, 0xf9, 0xff, 0x58, 0x00, 0xc6, 0xfc, 0x20, 0xca, 0x80, 0xfc,
	0x49, 0x83, 0xf3, 0x4f, 0x3c, 0x93, 0x30, 0x9a, 0x64, 0x68, 0xc4, 0x77, 0xf0, 0x7f, 0xca, 0xd8,
	0xd7, 0x1a, 0x2c, 0x6e, 0x51, 0x16, 0x3f, 0x36, 0xa7, 0xcc, 0xa6, 0xf7, 0xe3, 0xd9, 0xb4, 0x3c,
	0x82, 0x3d, 0x95, 0x57, 0xbf, 0xd2, 0xe0, 0xcc, 0x0e, 0x65, 0x9f, 0xba, 0xbb, 0x6f, 0x6b, 0x5a,
	0xf5, 0x44, 0xe2, 0xf7, 0x01, 0xfe, 0x37, 0xb3, 0xea, 0x8f, 0x1a, 0x9c, 0x93, 0x59, 0x95, 0xe0,
	0xe7, 0x6d, 0x4e, 0xaa, 0x47, 0x30, 0xdf, 0xa6, 0x7c, 0xf6, 0x31, 0x09, 0x9e, 0xdd, 0x3f, 0xa4,
	0x0e, 0x53, 0xa8, 0x6f, 0x47, 0x77, 0x24, 0xe5, 0x42, 0x81, 0xbe, 0xb2, 0xa9, 0x27, 0x4a, 0xc2,
	0xc1, 0x22, 0x71, 0x7b, 0x8a, 0x21, 0xfe, 0x97, 0x06, 0x4b, 0x03, 0x9b, 0xb1, 0xaa, 0x51, 0xd9,
	0xbe, 0x00, 0xd3, 0xd1, 0x05, 0x1b, 0xd1, 0x32, 0x25, 0xef, 0x56, 0x74, 0x11, 0x4a, 0x1e, 0xf1,
	0x65, 0xa1, 0x2a, 0xa3, 0x32, 0x2d, 0x7e, 0x6f, 0x9b, 0xf1, 0xda, 0xa9, 0x38, 0x5e, 0xed, 0xc4,
	0x99, 0x57, 0xfc, 0x15, 0x2c, 0x8f, 0xdf, 0x04, 0x43, 0x74, 0x89, 0x31, 0xba, 0x03, 0x93, 0x21,
	0xc7, 0x26, 0xe8, 0x19, 0xb7, 0xea, 0x95, 0x4b, 0xf0, 0x3f, 0x34, 0xa8, 0xcb, 0xad, 0x3e, 0xf1,
	0x3e, 0xb6, 0x6c, 0xba, 0x13, 0x76, 0xbb, 0xc4, 0xef, 0xa9, 0x6d, 0x2e, 0x40, 0xd9, 0xf5, 0xad,
	0x7d, 0xcb, 0x19, 0x6c, 0xb4, 0x24, 0x05, 0xdb, 0x66, 0x84, 0xad, 0x90, 0xc2, 0x56, 0x1c, 0xc2,
	0xb6, 0x00, 0x65, 0xde, 0x12, 0x19, 0x07, 0x24, 0x38, 0x88, 0xb6, 0x51, 0xe2, 0x82, 0x4f, 0x48,
	0x70, 0x80, 0x3e, 0x88, 0x26, 0x05, 0x21, 0x93, 0x82, 0x90, 0xe5, 0x66, 0xd4, 0xa5, 0xa9, 0xbe,
	0xae, 0xf9, 0x40, 0xb8, 0xe3, 0x7a, 0x92, 0x1a, 0x35, 0x42, 0xd7, 0x61, 0xae, 0x4b, 0x19, 0x11,
	0x16, 0x5c, 0x4f, 0xdc, 0xe3, 0x32, 0x3f, 0x66, 0x95, 0xf8, 0x81, 0x90, 0xe2, 0x9f, 0x17, 0x00,
	0xc7, 0xc2, 0x19, 0xda, 0x2c, 0x63, 0xaf, 0xb9, 0x21, 0x8d, 0x91, 0x50, 0xc8, 0x24, 0xa1, 0x98,
	0x22, 0x61, 0x62, 0x88, 0x84, 0x73, 0x30, 0x49, 0x5f, 0x30, 0x9f, 0x44, 0x51, 0x93, 0x3f, 0xe2,
	0xd4, 0x4c, 0x1d, 0x47, 0xcd, 0xf4, 0x1b, 0xa0, 0xa6, 0x94, 0x49, 0xcd, 0x11, 0x2c, 0x3e, 0x0a,
	0xa9, 0xdf, 0xbb, 0x7b, 0x48, 0x2c, 0x9b, 0xec, 0xda, 0xa9, 0xeb, 0x44, 0x81, 0x14, 0x15, 0xa0,
	0x16, 0x15, 0xa1, 0x84, 0x11, 0x5e, 0xfc, 0xc5, 0x41, 0x16, 0x4e, 0x08, 0x12, 0x7f, 0x00, 0xf3,
	0xd9, 0xbe, 0x23, 0x4e, 0xb5, 0x14, 0xa7, 0x85, 0x01, 0xa7, 0xf8, 0x95, 0x06, 0x4b, 0x79, 0xd0,
	0x4f, 0xfc, 0xcd, 0xbc, 0x9f, 0x55, 0x0e, 0x5e, 0x89, 0x9d, 0xcd, 0x1c, 0x5f, 0xb1, 0xc2, 0xf0,
	0x36, 0xe8, 0x42, 0x8d, 0x27, 0xd7, 0x43, 0x37, 0xb0, 0xb8, 0x70, 0x9c, 0x93, 0x84, 0x1f, 0xc3,
	0x99, 0xd4, 0xc2, 0x71, 0x58, 0xe8, 0x87, 0xc7, 0x23, 0xec, 0x20, 0x4a, 0x42, 0x41, 0xf0, 0x43,
	0xc2, 0x0e, 0xf0, 0x8f, 0x34, 0xb8, 0x98, 0x81, 0xe7, 0xc4, 0xec, 0x7c, 0x2b, 0x8b, 0x9d, 0xa5,
	0x34, 0x3b, 0x31, 0x37, 0x31, 0x62, 0xee, 0xc0, 0xf2, 0x16, 0x3d, 0xdd, 0xe9, 0xc3, 0x7f, 0x2b,
	0x80, 0x9e, 0xb7, 0x38, 0xff, 0xcc, 0x5e, 0x81, 0x6a, 0xff, 0x04, 0x88, 0xee, 0x5c, 0xee, 0x67,
	0x46, 0x09, 0x3f, 0xe7, 0x5d, 0xfa, 0x32, 0x54, 0xfa, 0x4a, 0x96, 0xa9, 0xae, 0x31, 0x25, 0x4a,
	0x9e, 0xfc, 0x89, 0xcc, 0x93, 0x3f, 0x99, 0x8a, 0xcf, 0x54, 0xd6, 0xc9, 0x9f, 0xce, 0x3d, 0xf9,
	0xa5, 0xe3, 0x4e, 0x7e, 0xf9, 0x0d, 0x9c, 0x7c, 0xc8, 0x3c, 0xf9, 0x3f, 0xd3, 0xa0, 0x91, 0x1f,
	0x93, 0x13, 0xe7, 0xc8, 0x56, 0x56, 0x8e, 0xc4, 0x8b, 0x8f, 0x5c, 0x6f, 0xb1, 0x54, 0xf9, 0x8d,
	0x06, 0x2b, 0x79, 0x9a, 0xa7, 0x2c, 0x15, 0x1f, 0xc1, 0x19, 0x91, 0x24, 0xbe, 0xb0, 0x67, 0xf0,
	0x06, 0x56, 0x95, 0x8d, 0x63, 0x22, 0x9c, 0x63, 0x31, 0x71, 0x80, 0x3d, 0x58, 0xdb, 0xa2, 0x0e,
	0xf5, 0x09, 0xa3, 0x0f, 0x76, 0x77, 0x72, 0xde, 0x50, 0x4e, 0x01, 0x55, 0x87, 0x69, 0xf5, 0x44,
	0x23, 0xb3, 0x51, 0xfd, 0x5c, 0xfb, 0x12, 0x4a, 0xaa, 0x3c, 0x40, 0xe7, 0xa0, 0xa6, 0xc6, 0xc6,
	0x13, 0xe7, 0x99, 0xe3, 0x3e, 0x77, 0x6a, 0xef, 0xa0, 0xf3, 0x70, 0xa6, 0x2f, 0x55, 0xad, 0x5a,
	0x4d, 0x8b, 0x29, 0x47, 0x65, 0x5d, 0xad, 0x10, 0x53, 0x56, 0x1f, 0xb3, 0x5a, 0x31, 0x26, 0x56,
	0x0d, 0x70, 0x6d, 0x62, 0xcd, 0x82, 0x6a, 0xec, 0xe9, 0x0b, 0x9d, 0x81, 0xaa, 0x18, 0x0c, 0xb9,
	0xaf, 0xc1, 0x8c, 0x14, 0xdd, 0xed, 0x30, 0xeb, 0x90, 0x7b, 0x9e, 0x83, 0x8a, 0x94, 0x7c, 0x46,
	0xc9, 0x21, 0x77, 0x3a, 0x0b, 0x20, 0x05, 0x9f, 0xba, 0x96, 0x53, 0x2b, 0x22, 0x04, 0xb3, 0xca,
	0x4a, 0x18, 0xd0, 0xbd, 0xd0, 0xae, 0x4d, 0xac, 0x7d, 0x13, 0xca, 0xfd, 0x96, 0x1f, 0x5d, 0x84,
	0xf3, 0xfd, 0x1f, 0xc6, 0x13, 0x87, 0x8f, 0x69, 0x87, 0x51, 0xb3, 0xf6, 0x0e, 0xba, 0x00, 0x67,
	0x07, 0x53, 0x83, 0x09, 0x6d, 0xf3, 0xdf, 0xf3, 0x50, 0xe1, 0x60, 0x79, 0x54, 0xac, 0x0e, 0x45,
	0x4f, 0xa1, 0x32, 0xf4, 0x56, 0x80, 0xe6, 0x9b, 0xf2, 0xe1, 0xb5, 0xa9, 0x1e, 0x5e, 0x9b, 0xf7,
	0xbb, 0x1e, 0xeb, 0xd5, 0x1b, 0xc9, 0x4c, 0x48, 0xbe, 0x2e, 0xe0, 0xcb, 0x2f, 0xff, 0xfa, 0xcf,
	0x9f, 0x16, 0x16, 0xd0, 0x45, 0xf5, 0xd4, 0xdc, 0x3a, 0xbc, 0xd5, 0xea, 0x11, 0xdf, 0x69, 0x39,
	0xca, 0x78, 0x08, 0x95, 0xa1, 0x9e, 0x1c, 0x2d, 0x27, 0x5a, 0xdc, 0xe4, 0x23, 0x40, 0xc2, 0x69,
	0x46, 0x3b, 0x8f, 0xaf, 0x08, 0xa7, 0x8b, 0x58, 0x4f, 0x39, 0x0d, 0xa4, 0xf6, 0x1d, 0x6d, 0x0d,
	0x7d, 0x09, 0xb3, 0xf1, 0x77, 0x03, 0x84, 0x63, 0x86, 0x33, 0x1f, 0x15, 0xea, 0x8b, 0x89, 0x3a,
	0x71, 0xc7, 0xea, 0x7a, 0xf6, 0xc0, 0xf3, 0x35, 0xe1, 0xb9, 0x81, 0x17, 0x52, 0x9e, 0xcd, 0xbe,
	0x39, 0xee, 0xdc, 0x87, 0xb9, 0xc4, 0xdb, 0x40, 0x2e, 0xc7, 0x2b, 0x49, 0x8e, 0xb3, 0x5e, 0x14,
	0x8e, 0xe1, 0x39, 0xa0, 0x54, 0x3e, 0x5e, 0xf5, 0x04, 0xcf, 0xfd, 0x7a, 0x21, 0xc5, 0x73, 0xa2,
	0x8a, 0x49, 0xf3, 0x9c, 0xac, 0x15, 0xf0, 0x75, 0xe1, 0xf4, 0x32, 0xbe, 0x94, 0xc5, 0xb3, 0xd2,
	0xe6, 0xdb, 0x7d, 0xa9, 0xc1, 0x6c, 0xbc, 0xf3, 0x4e, 0x90, 0x9d, 0xd9, 0x96, 0x8f, 0x81, 0x60,
	0x4d, 0x20, 0x58, 0xc1, 0xcb, 0x29, 0x04, 0x61, 0xcc, 0x22, 0x07, 0xf1, 0x43, 0x4d, 0x45, 0xbc,
	0x0f, 0x62, 0x35, 0x23, 0xe2, 0x99, 0xef, 0x53, 0xa3, 0xe2, 0x9e, 0x8f, 0xc3, 0x8c, 0x79, 0xe4,
	0x38, 0xbe, 0x12, 0xb1, 0x57, 0x92, 0x63, 0x63, 0xbf, 0x96, 0x8c, 0x7d, 0xfe, 0x2b, 0x00, 0xbe,
	0x2a, 0x20, 0x2c, 0xa3, 0xc5, 0x34, 0x84, 0x61, 0x57, 0x21, 0xc0, 0xa0, 0x53, 0x46, 0x4b, 0x49,
	0x86, 0xe3, 0x3d, 0x6c, 0x7d, 0x39, 0x77, 0x7e, 0x64, 0xc2, 0x07, 0x7d, 0x65, 0xbe, 0xe9, 0xef,
	0x43, 0x35, 0xd6, 0x24, 0xa3, 0xcb, 0x19, 0xf1, 0x3f, 0xa9, 0xf3, 0x1b, 0xc2, 0xf9, 0x15, 0xbc,
	0x94, 0x13, 0xfd, 0x21, 0xff, 0x3f, 0xd0, 0xa0, 0x2a, 0xe3, 0xab, 0x00, 0xbc, 0xb1, 0xd8, 0xe7,
	0xa3, 0x30, 0x87, 0x1d, 0x72, 0x14, 0x47, 0x30, 0xbb, 0xd5, 0xdf, 0xc6, 0x1b, 0x8b, 0xfc, 0x8a,
	0x00, 0xb0, 0x84, 0xd2, 0xc7, 0xf0, 0xe9, 0x90, 0xa7, 0x97, 0x1a, 0xcc, 0x25, 0x7a, 0x7e, 0x14,
	0xaf, 0xd6, 0xb3, 0x5f, 0x04, 0x46, 0x6d, 0x7f, 0x5d, 0x78, 0xbf, 0x8a, 0x1b, 0x29, 0xef, 0x7e,
	0xdc, 0x1e, 0x27, 0xe0, 0x17, 0x1a, 0x5c, 0xc8, 0x79, 0x24, 0x40, 0xeb, 0x39, 0x60, 0xb2, 0x9e,
	0x12, 0x46, 0x81, 0x7a, 0x4f, 0x80, 0xda, 0xc0, 0xab, 0xc7, 0x80, 0x8a, 0xd9, 0xe5, 0xe0, 0x7e,
	0xac, 0xc1, 0xd9, 0x8c, 0xb6, 0x1e, 0x5d, 0xcf, 0x00, 0x96, 0xd5, 0xf8, 0x8f, 0x02, 0xd5, 0x12,
	0xa0, 0x6e, 0xe0, 0x95, 0x1c, 0x50, 0x31, 0x9b, 0x1c, 0xd0, 0xef, 0x34, 0x58, 0x38, 0xa6, 0x07,
	0x47, 0xad, 0x7c, 0xc6, 0x32, 0xfb, 0x85, 0x51, 0x00, 0x6f, 0x0b, 0x80, 0xb7, 0xf0, 0xcd, 0xe3,
	0x59, 0x8b, 0xdb, 0xe6, 0x40, 0x7f, 0xab, 0xe5, 0xb6, 0xa5, 0x6b, 0xe3, 0x34, 0x84, 0x11, 0xbc,
	0xf5, 0xb1, 0x74, 0x23, 0xb0, 0x9b, 0x02, 0xec, 0x4d, 0x7c, 0x3d, 0x05, 0xf6, 0x8b, 0xcc, 0x85,
	0x1c, 0xe7, 0x2b, 0x2d, 0xab, 0x67, 0xbc, 0x3a, 0xa2, 0x2b, 0x8b, 0xd0, 0x5d, 0x1b, 0xa5, 0x16,
	0x01, 0xdb, 0x10, 0xc0, 0xae, 0x63, 0x9c, 0x0d, 0x6c, 0x78, 0x0d, 0xc7, 0xf4, 0x7b, 0xed, 0x98,
	0x56, 0xed, 0xe6, 0x78, 0xa5, 0x76, 0x84, 0x70, 0x63, 0x4c, 0xed, 0x08, 0xe8, 0x2d, 0x01, 0x74,
	0x1d, 0x5f, 0x4b, 0x01, 0x65, 0x79, 0x81, 0xfe, 0xa5, 0x06, 0x97, 0x8e, 0x6b, 0x34, 0x72, 0xbf,
	0x67, 0xb7, 0xc6, 0x82, 0x16, 0xfb, 0xac, 0x45, 0x01, 0x46, 0x6b, 0xe3, 0xc1, 0x13, 0xee, 0xff,
	0xa0, 0x01, 0x1e, 0xdd, 0x63, 0xe4, 0xa2, 0xbc, 0x9d, 0x40, 0x39, 0x6e, 0xb3, 0x82, 0xff, 0x4f,
	0x60, 0x6d, 0xa2, 0xf4, 0xc9, 0xd9, 0xef, 0x1b, 0x49, 0xfd, 0xd5, 0xf8, 0xc3, 0x4f, 0xfe, 0xfc,
	0x7a, 0x49, 0xfb, 0xcb, 0xeb, 0x25, 0xed, 0xef, 0xaf, 0x97, 0xb4, 0xef, 0xdd, 0xd9, 0xb7, 0xd8,
	0x41, 0xb8, 0xcb, 0xdb, 0x56, 0x7e, 0x65, 0x87, 0x5d, 0x46, 0x3b, 0x07, 0x81, 0x1c, 0x6e, 0x38,
	0x94, 0x3d, 0x77, 0xfd, 0x67, 0x1b, 0xca, 0xbc, 0xb7, 0xdb, 0x1a, 0xfa, 0xbf, 0x8f, 0xdd, 0x29,
	0xb1, 0x91, 0xf7, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x11, 0xd9, 0x35, 0x5e, 0x0d, 0x22, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// YarnServiceClient is the client API for YarnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YarnServiceClient interface {
	// Getter YarnNode ...
	// 查看自身调度服务信息
	GetNodeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	// about seed
	// 新增种子节点信息
	SetSeedNode(ctx context.Context, in *SetSeedNodeRequest, opts ...grpc.CallOption) (*SetSeedNodeResponse, error)
	// 删除种子节点信息
	DeleteSeedNode(ctx context.Context, in *DeleteSeedNodeRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	// 查询种子节点列表
	GetSeedNodeList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSeedNodeListResponse, error)
	// about dataNode
	// 新增数据服务信息
	SetDataNode(ctx context.Context, in *SetDataNodeRequest, opts ...grpc.CallOption) (*SetDataNodeResponse, error)
	// 修改数据服务信息
	UpdateDataNode(ctx context.Context, in *UpdateDataNodeRequest, opts ...grpc.CallOption) (*SetDataNodeResponse, error)
	// 删除数据服务信息
	DeleteDataNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	// 查询数据服务列表
	GetDataNodeList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRegisteredNodeListResponse, error)
	// about jobNode
	// 新增计算服务信息
	SetJobNode(ctx context.Context, in *SetJobNodeRequest, opts ...grpc.CallOption) (*SetJobNodeResponse, error)
	// 修改计算服务信息
	UpdateJobNode(ctx context.Context, in *UpdateJobNodeRequest, opts ...grpc.CallOption) (*SetJobNodeResponse, error)
	// 删除计算服务信息
	DeleteJobNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	// 查询计算服务列表 (宿主机的物理信息和网络连接信息)
	GetJobNodeList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRegisteredNodeListResponse, error)
	// about report
	// 数据/计算服务 上报任务事件
	ReportTaskEvent(ctx context.Context, in *ReportTaskEventRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	// 数据/计算服务 上报资源使用实况
	ReportTaskResourceUsage(ctx context.Context, in *ReportTaskResourceUsageRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	// 上报 成功上传的原始文件Id
	ReportUpFileSummary(ctx context.Context, in *ReportUpFileSummaryRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	// 上报 任务结果文件摘要
	ReportTaskResultFileSummary(ctx context.Context, in *ReportTaskResultFileSummaryRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error)
	// 查询可用数据服务资源目标 ip:port 信息
	QueryAvailableDataNode(ctx context.Context, in *QueryAvailableDataNodeRequest, opts ...grpc.CallOption) (*QueryAvailableDataNodeResponse, error)
	// 查询需要下载的目标原始文件所在的 数据服务信息和文件的完整相对路径
	QueryFilePosition(ctx context.Context, in *QueryFilePositionRequest, opts ...grpc.CallOption) (*QueryFilePositionResponse, error)
	// 查询 任务结果文件摘要
	GetTaskResultFileSummary(ctx context.Context, in *GetTaskResultFileSummaryRequest, opts ...grpc.CallOption) (*GetTaskResultFileSummaryResponse, error)
	// 查询当前组织参与的所有任务结果文件摘要
	GetTaskResultFileSummaryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTaskResultFileSummaryListResponse, error)
	// v 0.4.0 生成当前组织内置系统钱包地址 (见证人代理钱包, 全局只有一个)
	GenerateObServerProxyWalletAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateObServerProxyWalletAddressResponse, error)
}

type yarnServiceClient struct {
	cc *grpc.ClientConn
}

func NewYarnServiceClient(cc *grpc.ClientConn) YarnServiceClient {
	return &yarnServiceClient{cc}
}

func (c *yarnServiceClient) GetNodeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) SetSeedNode(ctx context.Context, in *SetSeedNodeRequest, opts ...grpc.CallOption) (*SetSeedNodeResponse, error) {
	out := new(SetSeedNodeResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/SetSeedNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) DeleteSeedNode(ctx context.Context, in *DeleteSeedNodeRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/DeleteSeedNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GetSeedNodeList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSeedNodeListResponse, error) {
	out := new(GetSeedNodeListResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/GetSeedNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) SetDataNode(ctx context.Context, in *SetDataNodeRequest, opts ...grpc.CallOption) (*SetDataNodeResponse, error) {
	out := new(SetDataNodeResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/SetDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) UpdateDataNode(ctx context.Context, in *UpdateDataNodeRequest, opts ...grpc.CallOption) (*SetDataNodeResponse, error) {
	out := new(SetDataNodeResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/UpdateDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) DeleteDataNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/DeleteDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GetDataNodeList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRegisteredNodeListResponse, error) {
	out := new(GetRegisteredNodeListResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/GetDataNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) SetJobNode(ctx context.Context, in *SetJobNodeRequest, opts ...grpc.CallOption) (*SetJobNodeResponse, error) {
	out := new(SetJobNodeResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/SetJobNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) UpdateJobNode(ctx context.Context, in *UpdateJobNodeRequest, opts ...grpc.CallOption) (*SetJobNodeResponse, error) {
	out := new(SetJobNodeResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/UpdateJobNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) DeleteJobNode(ctx context.Context, in *DeleteRegisteredNodeRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/DeleteJobNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GetJobNodeList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRegisteredNodeListResponse, error) {
	out := new(GetRegisteredNodeListResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/GetJobNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) ReportTaskEvent(ctx context.Context, in *ReportTaskEventRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/ReportTaskEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) ReportTaskResourceUsage(ctx context.Context, in *ReportTaskResourceUsageRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/ReportTaskResourceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) ReportUpFileSummary(ctx context.Context, in *ReportUpFileSummaryRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/ReportUpFileSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) ReportTaskResultFileSummary(ctx context.Context, in *ReportTaskResultFileSummaryRequest, opts ...grpc.CallOption) (*types.SimpleResponse, error) {
	out := new(types.SimpleResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/ReportTaskResultFileSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) QueryAvailableDataNode(ctx context.Context, in *QueryAvailableDataNodeRequest, opts ...grpc.CallOption) (*QueryAvailableDataNodeResponse, error) {
	out := new(QueryAvailableDataNodeResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/QueryAvailableDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) QueryFilePosition(ctx context.Context, in *QueryFilePositionRequest, opts ...grpc.CallOption) (*QueryFilePositionResponse, error) {
	out := new(QueryFilePositionResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/QueryFilePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GetTaskResultFileSummary(ctx context.Context, in *GetTaskResultFileSummaryRequest, opts ...grpc.CallOption) (*GetTaskResultFileSummaryResponse, error) {
	out := new(GetTaskResultFileSummaryResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/GetTaskResultFileSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GetTaskResultFileSummaryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTaskResultFileSummaryListResponse, error) {
	out := new(GetTaskResultFileSummaryListResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/GetTaskResultFileSummaryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yarnServiceClient) GenerateObServerProxyWalletAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateObServerProxyWalletAddressResponse, error) {
	out := new(GenerateObServerProxyWalletAddressResponse)
	err := c.cc.Invoke(ctx, "/carrier.api.YarnService/GenerateObServerProxyWalletAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YarnServiceServer is the server API for YarnService service.
type YarnServiceServer interface {
	// Getter YarnNode ...
	// 查看自身调度服务信息
	GetNodeInfo(context.Context, *emptypb.Empty) (*GetNodeInfoResponse, error)
	// about seed
	// 新增种子节点信息
	SetSeedNode(context.Context, *SetSeedNodeRequest) (*SetSeedNodeResponse, error)
	// 删除种子节点信息
	DeleteSeedNode(context.Context, *DeleteSeedNodeRequest) (*types.SimpleResponse, error)
	// 查询种子节点列表
	GetSeedNodeList(context.Context, *emptypb.Empty) (*GetSeedNodeListResponse, error)
	// about dataNode
	// 新增数据服务信息
	SetDataNode(context.Context, *SetDataNodeRequest) (*SetDataNodeResponse, error)
	// 修改数据服务信息
	UpdateDataNode(context.Context, *UpdateDataNodeRequest) (*SetDataNodeResponse, error)
	// 删除数据服务信息
	DeleteDataNode(context.Context, *DeleteRegisteredNodeRequest) (*types.SimpleResponse, error)
	// 查询数据服务列表
	GetDataNodeList(context.Context, *emptypb.Empty) (*GetRegisteredNodeListResponse, error)
	// about jobNode
	// 新增计算服务信息
	SetJobNode(context.Context, *SetJobNodeRequest) (*SetJobNodeResponse, error)
	// 修改计算服务信息
	UpdateJobNode(context.Context, *UpdateJobNodeRequest) (*SetJobNodeResponse, error)
	// 删除计算服务信息
	DeleteJobNode(context.Context, *DeleteRegisteredNodeRequest) (*types.SimpleResponse, error)
	// 查询计算服务列表 (宿主机的物理信息和网络连接信息)
	GetJobNodeList(context.Context, *emptypb.Empty) (*GetRegisteredNodeListResponse, error)
	// about report
	// 数据/计算服务 上报任务事件
	ReportTaskEvent(context.Context, *ReportTaskEventRequest) (*types.SimpleResponse, error)
	// 数据/计算服务 上报资源使用实况
	ReportTaskResourceUsage(context.Context, *ReportTaskResourceUsageRequest) (*types.SimpleResponse, error)
	// 上报 成功上传的原始文件Id
	ReportUpFileSummary(context.Context, *ReportUpFileSummaryRequest) (*types.SimpleResponse, error)
	// 上报 任务结果文件摘要
	ReportTaskResultFileSummary(context.Context, *ReportTaskResultFileSummaryRequest) (*types.SimpleResponse, error)
	// 查询可用数据服务资源目标 ip:port 信息
	QueryAvailableDataNode(context.Context, *QueryAvailableDataNodeRequest) (*QueryAvailableDataNodeResponse, error)
	// 查询需要下载的目标原始文件所在的 数据服务信息和文件的完整相对路径
	QueryFilePosition(context.Context, *QueryFilePositionRequest) (*QueryFilePositionResponse, error)
	// 查询 任务结果文件摘要
	GetTaskResultFileSummary(context.Context, *GetTaskResultFileSummaryRequest) (*GetTaskResultFileSummaryResponse, error)
	// 查询当前组织参与的所有任务结果文件摘要
	GetTaskResultFileSummaryList(context.Context, *emptypb.Empty) (*GetTaskResultFileSummaryListResponse, error)
	// v 0.4.0 生成当前组织内置系统钱包地址 (见证人代理钱包, 全局只有一个)
	GenerateObServerProxyWalletAddress(context.Context, *emptypb.Empty) (*GenerateObServerProxyWalletAddressResponse, error)
}

// UnimplementedYarnServiceServer can be embedded to have forward compatible implementations.
type UnimplementedYarnServiceServer struct {
}

func (*UnimplementedYarnServiceServer) GetNodeInfo(ctx context.Context, req *emptypb.Empty) (*GetNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (*UnimplementedYarnServiceServer) SetSeedNode(ctx context.Context, req *SetSeedNodeRequest) (*SetSeedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSeedNode not implemented")
}
func (*UnimplementedYarnServiceServer) DeleteSeedNode(ctx context.Context, req *DeleteSeedNodeRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeedNode not implemented")
}
func (*UnimplementedYarnServiceServer) GetSeedNodeList(ctx context.Context, req *emptypb.Empty) (*GetSeedNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeedNodeList not implemented")
}
func (*UnimplementedYarnServiceServer) SetDataNode(ctx context.Context, req *SetDataNodeRequest) (*SetDataNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDataNode not implemented")
}
func (*UnimplementedYarnServiceServer) UpdateDataNode(ctx context.Context, req *UpdateDataNodeRequest) (*SetDataNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataNode not implemented")
}
func (*UnimplementedYarnServiceServer) DeleteDataNode(ctx context.Context, req *DeleteRegisteredNodeRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataNode not implemented")
}
func (*UnimplementedYarnServiceServer) GetDataNodeList(ctx context.Context, req *emptypb.Empty) (*GetRegisteredNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataNodeList not implemented")
}
func (*UnimplementedYarnServiceServer) SetJobNode(ctx context.Context, req *SetJobNodeRequest) (*SetJobNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobNode not implemented")
}
func (*UnimplementedYarnServiceServer) UpdateJobNode(ctx context.Context, req *UpdateJobNodeRequest) (*SetJobNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobNode not implemented")
}
func (*UnimplementedYarnServiceServer) DeleteJobNode(ctx context.Context, req *DeleteRegisteredNodeRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobNode not implemented")
}
func (*UnimplementedYarnServiceServer) GetJobNodeList(ctx context.Context, req *emptypb.Empty) (*GetRegisteredNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobNodeList not implemented")
}
func (*UnimplementedYarnServiceServer) ReportTaskEvent(ctx context.Context, req *ReportTaskEventRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskEvent not implemented")
}
func (*UnimplementedYarnServiceServer) ReportTaskResourceUsage(ctx context.Context, req *ReportTaskResourceUsageRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskResourceUsage not implemented")
}
func (*UnimplementedYarnServiceServer) ReportUpFileSummary(ctx context.Context, req *ReportUpFileSummaryRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUpFileSummary not implemented")
}
func (*UnimplementedYarnServiceServer) ReportTaskResultFileSummary(ctx context.Context, req *ReportTaskResultFileSummaryRequest) (*types.SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskResultFileSummary not implemented")
}
func (*UnimplementedYarnServiceServer) QueryAvailableDataNode(ctx context.Context, req *QueryAvailableDataNodeRequest) (*QueryAvailableDataNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableDataNode not implemented")
}
func (*UnimplementedYarnServiceServer) QueryFilePosition(ctx context.Context, req *QueryFilePositionRequest) (*QueryFilePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFilePosition not implemented")
}
func (*UnimplementedYarnServiceServer) GetTaskResultFileSummary(ctx context.Context, req *GetTaskResultFileSummaryRequest) (*GetTaskResultFileSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskResultFileSummary not implemented")
}
func (*UnimplementedYarnServiceServer) GetTaskResultFileSummaryList(ctx context.Context, req *emptypb.Empty) (*GetTaskResultFileSummaryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskResultFileSummaryList not implemented")
}
func (*UnimplementedYarnServiceServer) GenerateObServerProxyWalletAddress(ctx context.Context, req *emptypb.Empty) (*GenerateObServerProxyWalletAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateObServerProxyWalletAddress not implemented")
}

func RegisterYarnServiceServer(s *grpc.Server, srv YarnServiceServer) {
	s.RegisterService(&_YarnService_serviceDesc, srv)
}

func _YarnService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetNodeInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_SetSeedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSeedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).SetSeedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/SetSeedNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).SetSeedNode(ctx, req.(*SetSeedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_DeleteSeedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).DeleteSeedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/DeleteSeedNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).DeleteSeedNode(ctx, req.(*DeleteSeedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GetSeedNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetSeedNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/GetSeedNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetSeedNodeList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_SetDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDataNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).SetDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/SetDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).SetDataNode(ctx, req.(*SetDataNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_UpdateDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).UpdateDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/UpdateDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).UpdateDataNode(ctx, req.(*UpdateDataNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_DeleteDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisteredNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).DeleteDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/DeleteDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).DeleteDataNode(ctx, req.(*DeleteRegisteredNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GetDataNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetDataNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/GetDataNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetDataNodeList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_SetJobNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).SetJobNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/SetJobNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).SetJobNode(ctx, req.(*SetJobNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_UpdateJobNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).UpdateJobNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/UpdateJobNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).UpdateJobNode(ctx, req.(*UpdateJobNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_DeleteJobNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegisteredNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).DeleteJobNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/DeleteJobNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).DeleteJobNode(ctx, req.(*DeleteRegisteredNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GetJobNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetJobNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/GetJobNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetJobNodeList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_ReportTaskEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).ReportTaskEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/ReportTaskEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).ReportTaskEvent(ctx, req.(*ReportTaskEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_ReportTaskResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskResourceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).ReportTaskResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/ReportTaskResourceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).ReportTaskResourceUsage(ctx, req.(*ReportTaskResourceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_ReportUpFileSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUpFileSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).ReportUpFileSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/ReportUpFileSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).ReportUpFileSummary(ctx, req.(*ReportUpFileSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_ReportTaskResultFileSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskResultFileSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).ReportTaskResultFileSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/ReportTaskResultFileSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).ReportTaskResultFileSummary(ctx, req.(*ReportTaskResultFileSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_QueryAvailableDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAvailableDataNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).QueryAvailableDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/QueryAvailableDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).QueryAvailableDataNode(ctx, req.(*QueryAvailableDataNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_QueryFilePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFilePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).QueryFilePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/QueryFilePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).QueryFilePosition(ctx, req.(*QueryFilePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GetTaskResultFileSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskResultFileSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetTaskResultFileSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/GetTaskResultFileSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetTaskResultFileSummary(ctx, req.(*GetTaskResultFileSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GetTaskResultFileSummaryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GetTaskResultFileSummaryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/GetTaskResultFileSummaryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GetTaskResultFileSummaryList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YarnService_GenerateObServerProxyWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YarnServiceServer).GenerateObServerProxyWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrier.api.YarnService/GenerateObServerProxyWalletAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YarnServiceServer).GenerateObServerProxyWalletAddress(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _YarnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carrier.api.YarnService",
	HandlerType: (*YarnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _YarnService_GetNodeInfo_Handler,
		},
		{
			MethodName: "SetSeedNode",
			Handler:    _YarnService_SetSeedNode_Handler,
		},
		{
			MethodName: "DeleteSeedNode",
			Handler:    _YarnService_DeleteSeedNode_Handler,
		},
		{
			MethodName: "GetSeedNodeList",
			Handler:    _YarnService_GetSeedNodeList_Handler,
		},
		{
			MethodName: "SetDataNode",
			Handler:    _YarnService_SetDataNode_Handler,
		},
		{
			MethodName: "UpdateDataNode",
			Handler:    _YarnService_UpdateDataNode_Handler,
		},
		{
			MethodName: "DeleteDataNode",
			Handler:    _YarnService_DeleteDataNode_Handler,
		},
		{
			MethodName: "GetDataNodeList",
			Handler:    _YarnService_GetDataNodeList_Handler,
		},
		{
			MethodName: "SetJobNode",
			Handler:    _YarnService_SetJobNode_Handler,
		},
		{
			MethodName: "UpdateJobNode",
			Handler:    _YarnService_UpdateJobNode_Handler,
		},
		{
			MethodName: "DeleteJobNode",
			Handler:    _YarnService_DeleteJobNode_Handler,
		},
		{
			MethodName: "GetJobNodeList",
			Handler:    _YarnService_GetJobNodeList_Handler,
		},
		{
			MethodName: "ReportTaskEvent",
			Handler:    _YarnService_ReportTaskEvent_Handler,
		},
		{
			MethodName: "ReportTaskResourceUsage",
			Handler:    _YarnService_ReportTaskResourceUsage_Handler,
		},
		{
			MethodName: "ReportUpFileSummary",
			Handler:    _YarnService_ReportUpFileSummary_Handler,
		},
		{
			MethodName: "ReportTaskResultFileSummary",
			Handler:    _YarnService_ReportTaskResultFileSummary_Handler,
		},
		{
			MethodName: "QueryAvailableDataNode",
			Handler:    _YarnService_QueryAvailableDataNode_Handler,
		},
		{
			MethodName: "QueryFilePosition",
			Handler:    _YarnService_QueryFilePosition_Handler,
		},
		{
			MethodName: "GetTaskResultFileSummary",
			Handler:    _YarnService_GetTaskResultFileSummary_Handler,
		},
		{
			MethodName: "GetTaskResultFileSummaryList",
			Handler:    _YarnService_GetTaskResultFileSummaryList_Handler,
		},
		{
			MethodName: "GenerateObServerProxyWalletAddress",
			Handler:    _YarnService_GenerateObServerProxyWalletAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carrier/api/sys_rpc_api.proto",
}

func (m *YarnNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnNodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ObserverProxyWalletAddress) > 0 {
		i -= len(m.ObserverProxyWalletAddress)
		copy(dAtA[i:], m.ObserverProxyWalletAddress)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ObserverProxyWalletAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.LocalMultiAddr) > 0 {
		i -= len(m.LocalMultiAddr)
		copy(dAtA[i:], m.LocalMultiAddr)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.LocalMultiAddr)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.LocalBootstrapNode) > 0 {
		i -= len(m.LocalBootstrapNode)
		copy(dAtA[i:], m.LocalBootstrapNode)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.LocalBootstrapNode)))
		i--
		dAtA[i] = 0x72
	}
	if m.RelatePeers != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.RelatePeers))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x62
	}
	if m.State != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x50
	}
	if m.ResourceUsed != nil {
		{
			size, err := m.ResourceUsed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.IdentityId) > 0 {
		i -= len(m.IdentityId)
		copy(dAtA[i:], m.IdentityId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.IdentityId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IdentityType) > 0 {
		i -= len(m.IdentityType)
		copy(dAtA[i:], m.IdentityType)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.IdentityType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NodeType != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.NodeType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodeDetail != nil {
		{
			size, err := m.NodeDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NodeType != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.NodeType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *YarnRegisteredPeerDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YarnRegisteredPeerDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YarnRegisteredPeerDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FileTotalSize != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.FileTotalSize))
		i--
		dAtA[i] = 0x58
	}
	if m.FileCount != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.FileCount))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TaskIdList) > 0 {
		for iNdEx := len(m.TaskIdList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskIdList[iNdEx])
			copy(dAtA[i:], m.TaskIdList[iNdEx])
			i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.TaskIdList[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.TaskCount != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.TaskCount))
		i--
		dAtA[i] = 0x40
	}
	if m.Duration != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x38
	}
	if m.ConnState != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.ConnState))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeedPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeedPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeedPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConnState != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.ConnState))
		i--
		dAtA[i] = 0x18
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRegisteredNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRegisteredNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRegisteredNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetSeedNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSeedNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSeedNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSeedNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSeedNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSeedNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetSeedNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSeedNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSeedNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSeedNodeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeedNodeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeedNodeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetDataNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDataNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDataNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *SetDataNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDataNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDataNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDataNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDataNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDataNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRegisteredNodeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegisteredNodeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegisteredNodeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetJobNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetJobNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetJobNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *SetJobNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetJobNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetJobNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateJobNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateJobNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateJobNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExternalPort) > 0 {
		i -= len(m.ExternalPort)
		copy(dAtA[i:], m.ExternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalPort)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InternalPort) > 0 {
		i -= len(m.InternalPort)
		copy(dAtA[i:], m.InternalPort)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportTaskEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportTaskEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportTaskEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskEvent != nil {
		{
			size, err := m.TaskEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportTaskResourceUsageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportTaskResourceUsageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportTaskResourceUsageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Usage != nil {
		{
			size, err := m.Usage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x22
	}
	if m.NodeType != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.NodeType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PartyId) > 0 {
		i -= len(m.PartyId)
		copy(dAtA[i:], m.PartyId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.PartyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportUpFileSummaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportUpFileSummaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportUpFileSummaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MetadataOption) > 0 {
		i -= len(m.MetadataOption)
		copy(dAtA[i:], m.MetadataOption)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.MetadataOption)))
		i--
		dAtA[i] = 0x32
	}
	if m.DataType != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OriginId) > 0 {
		i -= len(m.OriginId)
		copy(dAtA[i:], m.OriginId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.OriginId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportTaskResultFileSummaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportTaskResultFileSummaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportTaskResultFileSummaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MetadataOption) > 0 {
		i -= len(m.MetadataOption)
		copy(dAtA[i:], m.MetadataOption)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.MetadataOption)))
		i--
		dAtA[i] = 0x42
	}
	if m.DataType != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginId) > 0 {
		i -= len(m.OriginId)
		copy(dAtA[i:], m.OriginId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.OriginId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvailableDataNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvailableDataNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvailableDataNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DataType != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x10
	}
	if m.DataSize != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.DataSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvailableDataNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvailableDataNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvailableDataNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAvailableDataNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAvailableDataNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAvailableDataNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFilePositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFilePositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFilePositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OriginId) > 0 {
		i -= len(m.OriginId)
		copy(dAtA[i:], m.OriginId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.OriginId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFilePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFilePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFilePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataPath) > 0 {
		i -= len(m.DataPath)
		copy(dAtA[i:], m.DataPath)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.DataPath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFilePositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFilePositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFilePositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskResultFileSummaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskResultFileSummaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskResultFileSummaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskResultFileSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskResultFileSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskResultFileSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MetadataOption) > 0 {
		i -= len(m.MetadataOption)
		copy(dAtA[i:], m.MetadataOption)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.MetadataOption)))
		i--
		dAtA[i] = 0x52
	}
	if m.DataType != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OriginId) > 0 {
		i -= len(m.OriginId)
		copy(dAtA[i:], m.OriginId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.OriginId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MetadataId) > 0 {
		i -= len(m.MetadataId)
		copy(dAtA[i:], m.MetadataId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.MetadataId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MetadataName) > 0 {
		i -= len(m.MetadataName)
		copy(dAtA[i:], m.MetadataName)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.MetadataName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskResultFileSummaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskResultFileSummaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskResultFileSummaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskResultFileSummaryListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskResultFileSummaryListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskResultFileSummaryListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskResultFiles) > 0 {
		for iNdEx := len(m.TaskResultFiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskResultFiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSysRpcApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenerateObServerProxyWalletAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateObServerProxyWalletAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateObServerProxyWalletAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSysRpcApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSysRpcApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSysRpcApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovSysRpcApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *YarnNodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeType != 0 {
		n += 1 + sovSysRpcApi(uint64(m.NodeType))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.IdentityType)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.IdentityId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.ResourceUsed != nil {
		l = m.ResourceUsed.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovSysRpcApi(uint64(m.State))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.RelatePeers != 0 {
		n += 1 + sovSysRpcApi(uint64(m.RelatePeers))
	}
	l = len(m.LocalBootstrapNode)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.LocalMultiAddr)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ObserverProxyWalletAddress)
	if l > 0 {
		n += 2 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YarnRegisteredPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeType != 0 {
		n += 1 + sovSysRpcApi(uint64(m.NodeType))
	}
	if m.NodeDetail != nil {
		l = m.NodeDetail.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YarnRegisteredPeerDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.ConnState != 0 {
		n += 1 + sovSysRpcApi(uint64(m.ConnState))
	}
	if m.Duration != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Duration))
	}
	if m.TaskCount != 0 {
		n += 1 + sovSysRpcApi(uint64(m.TaskCount))
	}
	if len(m.TaskIdList) > 0 {
		for _, s := range m.TaskIdList {
			l = len(s)
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if m.FileCount != 0 {
		n += 1 + sovSysRpcApi(uint64(m.FileCount))
	}
	if m.FileTotalSize != 0 {
		n += 1 + sovSysRpcApi(uint64(m.FileTotalSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeedPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.IsDefault {
		n += 2
	}
	if m.ConnState != 0 {
		n += 1 + sovSysRpcApi(uint64(m.ConnState))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRegisteredNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetSeedNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteSeedNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetSeedNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeedNodeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDataNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDataNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDataNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRegisteredNodeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetJobNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetJobNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateJobNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.InternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.ExternalPort)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportTaskEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskEvent != nil {
		l = m.TaskEvent.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportTaskResourceUsageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.PartyId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.NodeType != 0 {
		n += 1 + sovSysRpcApi(uint64(m.NodeType))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportUpFileSummaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovSysRpcApi(uint64(m.DataType))
	}
	l = len(m.MetadataOption)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportTaskResultFileSummaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.OriginId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovSysRpcApi(uint64(m.DataType))
	}
	l = len(m.MetadataOption)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryAvailableDataNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSize != 0 {
		n += 1 + sovSysRpcApi(uint64(m.DataSize))
	}
	if m.DataType != 0 {
		n += 1 + sovSysRpcApi(uint64(m.DataType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryAvailableDataNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryAvailableDataNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryFilePositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryFilePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.DataPath)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryFilePositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskResultFileSummaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskResultFileSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.MetadataName)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.MetadataId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.OriginId)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovSysRpcApi(uint64(m.DataType))
	}
	l = len(m.MetadataOption)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskResultFileSummaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskResultFileSummaryListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if len(m.TaskResultFiles) > 0 {
		for _, e := range m.TaskResultFiles {
			l = e.Size()
			n += 1 + l + sovSysRpcApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenerateObServerProxyWalletAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSysRpcApi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSysRpcApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSysRpcApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSysRpcApi(x uint64) (n int) {
	return sovSysRpcApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *YarnNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			m.NodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeType |= NodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceUsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceUsed == nil {
				m.ResourceUsed = &types.ResourceUsageOverview{}
			}
			if err := m.ResourceUsed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= YarnNodeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatePeers", wireType)
			}
			m.RelatePeers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelatePeers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalBootstrapNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalBootstrapNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMultiAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalMultiAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserverProxyWalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserverProxyWalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			m.NodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeType |= NodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeDetail == nil {
				m.NodeDetail = &YarnRegisteredPeerDetail{}
			}
			if err := m.NodeDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YarnRegisteredPeerDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YarnRegisteredPeerDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YarnRegisteredPeerDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnState", wireType)
			}
			m.ConnState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnState |= ConnState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskCount", wireType)
			}
			m.TaskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIdList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskIdList = append(m.TaskIdList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileCount", wireType)
			}
			m.FileCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileTotalSize", wireType)
			}
			m.FileTotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileTotalSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeedPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeedPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeedPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnState", wireType)
			}
			m.ConnState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnState |= ConnState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &YarnNodeInfo{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRegisteredNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRegisteredNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRegisteredNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSeedNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSeedNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSeedNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSeedNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSeedNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSeedNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSeedNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSeedNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSeedNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &SeedPeer{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeedNodeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeedNodeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeedNodeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &SeedPeer{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDataNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDataNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDataNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDataNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDataNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDataNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &YarnRegisteredPeerDetail{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDataNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDataNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDataNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegisteredNodeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegisteredNodeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegisteredNodeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &YarnRegisteredPeer{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetJobNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetJobNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetJobNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetJobNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetJobNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetJobNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &YarnRegisteredPeerDetail{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateJobNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateJobNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateJobNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportTaskEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportTaskEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportTaskEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskEvent == nil {
				m.TaskEvent = &types.TaskEvent{}
			}
			if err := m.TaskEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportTaskResourceUsageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportTaskResourceUsageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportTaskResourceUsageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			m.NodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeType |= NodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &types.ResourceUsageOverview{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportUpFileSummaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportUpFileSummaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportUpFileSummaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= constant.OrigindataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportTaskResultFileSummaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportTaskResultFileSummaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportTaskResultFileSummaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= constant.OrigindataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvailableDataNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvailableDataNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvailableDataNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
			}
			m.DataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= constant.OrigindataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvailableDataNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvailableDataNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvailableDataNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAvailableDataNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAvailableDataNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAvailableDataNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &QueryAvailableDataNode{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFilePositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFilePositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFilePositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFilePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFilePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFilePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFilePositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFilePositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFilePositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &QueryFilePosition{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskResultFileSummaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskResultFileSummaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskResultFileSummaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskResultFileSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskResultFileSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskResultFileSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= constant.OrigindataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskResultFileSummaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskResultFileSummaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskResultFileSummaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &GetTaskResultFileSummary{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskResultFileSummaryListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskResultFileSummaryListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskResultFileSummaryListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskResultFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskResultFiles = append(m.TaskResultFiles, &GetTaskResultFileSummary{})
			if err := m.TaskResultFiles[len(m.TaskResultFiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateObServerProxyWalletAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateObServerProxyWalletAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateObServerProxyWalletAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysRpcApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysRpcApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSysRpcApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSysRpcApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSysRpcApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSysRpcApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSysRpcApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSysRpcApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSysRpcApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSysRpcApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSysRpcApi = fmt.Errorf("proto: unexpected end of group")
)
