// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fighter/types/types.proto

package types

import (
	fmt "fmt"
	constant "github.com/datumtechs/datum-network-carrier/pb/common/constant"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Party struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	PartyId              string   `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Party) Reset()         { *m = Party{} }
func (m *Party) String() string { return proto.CompactTextString(m) }
func (*Party) ProtoMessage()    {}
func (*Party) Descriptor() ([]byte, []int) {
	return fileDescriptor_fca92964c5735e66, []int{0}
}
func (m *Party) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Party) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Party.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Party) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Party.Merge(m, src)
}
func (m *Party) XXX_Size() int {
	return m.Size()
}
func (m *Party) XXX_DiscardUnknown() {
	xxx_messageInfo_Party.DiscardUnknown(m)
}

var xxx_messageInfo_Party proto.InternalMessageInfo

func (m *Party) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Party) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Party) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *Party) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TaskReadyGoReq struct {
	TaskId                 string                       `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	PartyId                string                       `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	EnvId                  string                       `protobuf:"bytes,3,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
	Parties                []*Party                     `protobuf:"bytes,4,rep,name=parties,proto3" json:"parties,omitempty"`
	AlgorithmCode          string                       `protobuf:"bytes,5,opt,name=algorithm_code,json=algorithmCode,proto3" json:"algorithm_code,omitempty"`
	SelfCfgParams          string                       `protobuf:"bytes,6,opt,name=self_cfg_params,json=selfCfgParams,proto3" json:"self_cfg_params,omitempty"`
	AlgorithmDynamicParams string                       `protobuf:"bytes,7,opt,name=algorithm_dynamic_params,json=algorithmDynamicParams,proto3" json:"algorithm_dynamic_params,omitempty"`
	DataPartyIds           []string                     `protobuf:"bytes,8,rep,name=data_party_ids,json=dataPartyIds,proto3" json:"data_party_ids,omitempty"`
	ComputationPartyIds    []string                     `protobuf:"bytes,9,rep,name=computation_party_ids,json=computationPartyIds,proto3" json:"computation_party_ids,omitempty"`
	ResultPartyIds         []string                     `protobuf:"bytes,10,rep,name=result_party_ids,json=resultPartyIds,proto3" json:"result_party_ids,omitempty"`
	Duration               uint64                       `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"`
	Memory                 uint64                       `protobuf:"varint,12,opt,name=memory,proto3" json:"memory,omitempty"`
	Processor              uint32                       `protobuf:"varint,13,opt,name=processor,proto3" json:"processor,omitempty"`
	Bandwidth              uint64                       `protobuf:"varint,14,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	ConnectPolicyFormat    constant.ConnectPolicyFormat `protobuf:"varint,15,opt,name=connect_policy_format,json=connectPolicyFormat,proto3,enum=common.constant.ConnectPolicyFormat" json:"connect_policy_format,omitempty"`
	ConnectPolicy          string                       `protobuf:"bytes,16,opt,name=connect_policy,json=connectPolicy,proto3" json:"connect_policy,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                     `json:"-"`
	XXX_unrecognized       []byte                       `json:"-"`
	XXX_sizecache          int32                        `json:"-"`
}

func (m *TaskReadyGoReq) Reset()         { *m = TaskReadyGoReq{} }
func (m *TaskReadyGoReq) String() string { return proto.CompactTextString(m) }
func (*TaskReadyGoReq) ProtoMessage()    {}
func (*TaskReadyGoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fca92964c5735e66, []int{1}
}
func (m *TaskReadyGoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskReadyGoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskReadyGoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskReadyGoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskReadyGoReq.Merge(m, src)
}
func (m *TaskReadyGoReq) XXX_Size() int {
	return m.Size()
}
func (m *TaskReadyGoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskReadyGoReq.DiscardUnknown(m)
}

var xxx_messageInfo_TaskReadyGoReq proto.InternalMessageInfo

func (m *TaskReadyGoReq) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskReadyGoReq) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *TaskReadyGoReq) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *TaskReadyGoReq) GetParties() []*Party {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *TaskReadyGoReq) GetAlgorithmCode() string {
	if m != nil {
		return m.AlgorithmCode
	}
	return ""
}

func (m *TaskReadyGoReq) GetSelfCfgParams() string {
	if m != nil {
		return m.SelfCfgParams
	}
	return ""
}

func (m *TaskReadyGoReq) GetAlgorithmDynamicParams() string {
	if m != nil {
		return m.AlgorithmDynamicParams
	}
	return ""
}

func (m *TaskReadyGoReq) GetDataPartyIds() []string {
	if m != nil {
		return m.DataPartyIds
	}
	return nil
}

func (m *TaskReadyGoReq) GetComputationPartyIds() []string {
	if m != nil {
		return m.ComputationPartyIds
	}
	return nil
}

func (m *TaskReadyGoReq) GetResultPartyIds() []string {
	if m != nil {
		return m.ResultPartyIds
	}
	return nil
}

func (m *TaskReadyGoReq) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TaskReadyGoReq) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *TaskReadyGoReq) GetProcessor() uint32 {
	if m != nil {
		return m.Processor
	}
	return 0
}

func (m *TaskReadyGoReq) GetBandwidth() uint64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *TaskReadyGoReq) GetConnectPolicyFormat() constant.ConnectPolicyFormat {
	if m != nil {
		return m.ConnectPolicyFormat
	}
	return constant.ConnectPolicyFormat_ConnectPolicyFormat_Unknown
}

func (m *TaskReadyGoReq) GetConnectPolicy() string {
	if m != nil {
		return m.ConnectPolicy
	}
	return ""
}

type TaskReadyGoReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskReadyGoReply) Reset()         { *m = TaskReadyGoReply{} }
func (m *TaskReadyGoReply) String() string { return proto.CompactTextString(m) }
func (*TaskReadyGoReply) ProtoMessage()    {}
func (*TaskReadyGoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_fca92964c5735e66, []int{2}
}
func (m *TaskReadyGoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskReadyGoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskReadyGoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskReadyGoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskReadyGoReply.Merge(m, src)
}
func (m *TaskReadyGoReply) XXX_Size() int {
	return m.Size()
}
func (m *TaskReadyGoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskReadyGoReply.DiscardUnknown(m)
}

var xxx_messageInfo_TaskReadyGoReply proto.InternalMessageInfo

func (m *TaskReadyGoReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TaskReadyGoReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type TaskCancelReq struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	PartyId              string   `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskCancelReq) Reset()         { *m = TaskCancelReq{} }
func (m *TaskCancelReq) String() string { return proto.CompactTextString(m) }
func (*TaskCancelReq) ProtoMessage()    {}
func (*TaskCancelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fca92964c5735e66, []int{3}
}
func (m *TaskCancelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskCancelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskCancelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskCancelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCancelReq.Merge(m, src)
}
func (m *TaskCancelReq) XXX_Size() int {
	return m.Size()
}
func (m *TaskCancelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCancelReq.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCancelReq proto.InternalMessageInfo

func (m *TaskCancelReq) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskCancelReq) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

type TaskCancelReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskCancelReply) Reset()         { *m = TaskCancelReply{} }
func (m *TaskCancelReply) String() string { return proto.CompactTextString(m) }
func (*TaskCancelReply) ProtoMessage()    {}
func (*TaskCancelReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_fca92964c5735e66, []int{4}
}
func (m *TaskCancelReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskCancelReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskCancelReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskCancelReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCancelReply.Merge(m, src)
}
func (m *TaskCancelReply) XXX_Size() int {
	return m.Size()
}
func (m *TaskCancelReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCancelReply.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCancelReply proto.InternalMessageInfo

func (m *TaskCancelReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TaskCancelReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Party)(nil), "fighter.types.Party")
	proto.RegisterType((*TaskReadyGoReq)(nil), "fighter.types.TaskReadyGoReq")
	proto.RegisterType((*TaskReadyGoReply)(nil), "fighter.types.TaskReadyGoReply")
	proto.RegisterType((*TaskCancelReq)(nil), "fighter.types.TaskCancelReq")
	proto.RegisterType((*TaskCancelReply)(nil), "fighter.types.TaskCancelReply")
}

func init() { proto.RegisterFile("fighter/types/types.proto", fileDescriptor_fca92964c5735e66) }

var fileDescriptor_fca92964c5735e66 = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcb, 0x6e, 0xdb, 0x3a,
	0x10, 0x86, 0x21, 0xdf, 0x12, 0x33, 0xb1, 0x62, 0xf0, 0x9c, 0xa4, 0x4c, 0x50, 0x04, 0x82, 0x91,
	0x16, 0xda, 0x44, 0x06, 0xd2, 0x4d, 0x81, 0x66, 0x55, 0x17, 0x2d, 0xd2, 0x95, 0x21, 0x74, 0x51,
	0x64, 0x23, 0xd0, 0x24, 0x6d, 0x13, 0x31, 0x2f, 0x25, 0xa9, 0x04, 0x7a, 0x84, 0xbe, 0x59, 0x97,
	0x7d, 0x84, 0x22, 0x4f, 0x52, 0x90, 0xf2, 0x4d, 0xe8, 0xaa, 0xdd, 0x18, 0x33, 0xff, 0x7c, 0xff,
	0xd0, 0x23, 0x8e, 0x04, 0xce, 0xe7, 0x7c, 0xb1, 0x74, 0xcc, 0x8c, 0x5d, 0xa5, 0x99, 0xad, 0x7f,
	0x33, 0x6d, 0x94, 0x53, 0x70, 0xb0, 0x2e, 0x65, 0x41, 0xbc, 0x18, 0x11, 0x25, 0x84, 0x92, 0x63,
	0xa2, 0xa4, 0x75, 0x58, 0xba, 0xf1, 0xba, 0x5c, 0x30, 0x59, 0x8a, 0xda, 0x32, 0xba, 0x07, 0xdd,
	0x29, 0x36, 0xae, 0x82, 0x31, 0x68, 0x71, 0x8d, 0xa2, 0x24, 0x4a, 0xfb, 0x79, 0x8b, 0x6b, 0x08,
	0x41, 0x47, 0x2b, 0xe3, 0x50, 0x2b, 0x89, 0xd2, 0x6e, 0x1e, 0x62, 0x78, 0x0e, 0x0e, 0xb5, 0x87,
	0x0b, 0x4e, 0x51, 0x3b, 0x90, 0x07, 0x21, 0xbf, 0xa3, 0x1e, 0x97, 0x58, 0x30, 0xd4, 0x09, 0x72,
	0x88, 0x47, 0xdf, 0xbb, 0x20, 0xfe, 0x82, 0xed, 0x43, 0xce, 0x30, 0xad, 0x3e, 0xa9, 0x9c, 0x7d,
	0x83, 0x2f, 0xc0, 0x81, 0xc3, 0xf6, 0xc1, 0x37, 0xa8, 0x8f, 0xea, 0xf9, 0xf4, 0x8e, 0x36, 0x5a,
	0xb7, 0x9a, 0xad, 0x4f, 0x41, 0x8f, 0xc9, 0xc7, 0xdd, 0x99, 0x5d, 0x26, 0x1f, 0xef, 0x28, 0xcc,
	0x40, 0x20, 0x38, 0xb3, 0xa8, 0x93, 0xb4, 0xd3, 0xa3, 0x9b, 0xff, 0xb3, 0xc6, 0xf8, 0x59, 0x98,
	0x2b, 0xdf, 0x40, 0xf0, 0x15, 0x88, 0xf1, 0x6a, 0xa1, 0x0c, 0x77, 0x4b, 0x51, 0x10, 0x45, 0x19,
	0xea, 0x86, 0x76, 0x83, 0xad, 0x3a, 0x51, 0x94, 0xc1, 0xd7, 0xe0, 0xc4, 0xb2, 0xd5, 0xbc, 0x20,
	0xf3, 0x45, 0xa1, 0xb1, 0xc1, 0xc2, 0xa2, 0x5e, 0xcd, 0x79, 0x79, 0x32, 0x5f, 0x4c, 0x83, 0x08,
	0xdf, 0x02, 0xb4, 0x6b, 0x47, 0x2b, 0x89, 0x05, 0x27, 0x1b, 0xc3, 0x41, 0x30, 0x9c, 0x6d, 0xeb,
	0x1f, 0xea, 0xf2, 0xda, 0x79, 0x05, 0x62, 0x8a, 0x1d, 0x2e, 0x36, 0xf3, 0x5a, 0x74, 0x98, 0xb4,
	0xd3, 0x7e, 0x7e, 0xec, 0xd5, 0x69, 0x3d, 0xb4, 0x85, 0x37, 0xe0, 0x94, 0x28, 0xa1, 0x4b, 0x87,
	0x1d, 0x57, 0x72, 0x0f, 0xee, 0x07, 0xf8, 0xbf, 0xbd, 0xe2, 0xd6, 0x93, 0x82, 0xa1, 0x61, 0xb6,
	0x5c, 0xb9, 0x3d, 0x1c, 0x04, 0x3c, 0xae, 0xf5, 0x2d, 0x79, 0x01, 0x0e, 0x69, 0x69, 0x82, 0x1b,
	0x1d, 0x25, 0x51, 0xda, 0xc9, 0xb7, 0x39, 0x3c, 0x03, 0x3d, 0xc1, 0x84, 0x32, 0x15, 0x3a, 0x0e,
	0x95, 0x75, 0x06, 0x5f, 0x82, 0xbe, 0x36, 0x8a, 0x30, 0x6b, 0x95, 0x41, 0x83, 0x24, 0x4a, 0x07,
	0xf9, 0x4e, 0xf0, 0xd5, 0x19, 0x96, 0xf4, 0x89, 0x53, 0xb7, 0x44, 0x71, 0x30, 0xee, 0x04, 0xf8,
	0xd5, 0x4f, 0x23, 0x25, 0x23, 0xae, 0xd0, 0x6a, 0xc5, 0x49, 0x55, 0xcc, 0x95, 0x11, 0xd8, 0xa1,
	0x93, 0x24, 0x4a, 0xe3, 0x9b, 0xab, 0xac, 0x5e, 0xd5, 0x6c, 0xb3, 0xaa, 0xd9, 0xa4, 0xa6, 0xa7,
	0x01, 0xfe, 0x18, 0x58, 0x3f, 0xf3, 0x1f, 0xa2, 0xbf, 0xd6, 0x66, 0x67, 0x34, 0xac, 0xaf, 0xab,
	0x01, 0x8f, 0x6e, 0xc1, 0xb0, 0xb1, 0x8a, 0x7a, 0x55, 0xf9, 0x41, 0xad, 0xc3, 0xae, 0xb4, 0x61,
	0x17, 0xbb, 0xf9, 0x3a, 0x83, 0x43, 0xd0, 0x16, 0x76, 0xb1, 0x5e, 0x43, 0x1f, 0x8e, 0x26, 0x60,
	0xe0, 0xdd, 0x13, 0x2c, 0x09, 0x5b, 0xfd, 0xe3, 0x1e, 0x8f, 0xde, 0x81, 0x93, 0xfd, 0x26, 0x7f,
	0xf5, 0x0f, 0xde, 0x7f, 0xfe, 0xf1, 0x7c, 0x19, 0xfd, 0x7c, 0xbe, 0x8c, 0x7e, 0x3d, 0x5f, 0x46,
	0xf7, 0xb7, 0x0b, 0xee, 0x96, 0xe5, 0xcc, 0x3f, 0xb5, 0x31, 0xc5, 0xae, 0x14, 0x8e, 0x91, 0xa5,
	0xad, 0xc3, 0x6b, 0xc9, 0xdc, 0x93, 0x32, 0x0f, 0xd7, 0x04, 0x1b, 0xc3, 0x99, 0x19, 0xeb, 0xd9,
	0xb8, 0xf1, 0xc9, 0x98, 0xf5, 0xc2, 0xab, 0xff, 0xe6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb,
	0x7c, 0xf6, 0x9b, 0x4a, 0x04, 0x00, 0x00,
}

func (m *Party) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Party) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Party) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PartyId) > 0 {
		i -= len(m.PartyId)
		copy(dAtA[i:], m.PartyId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PartyId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskReadyGoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskReadyGoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskReadyGoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectPolicy) > 0 {
		i -= len(m.ConnectPolicy)
		copy(dAtA[i:], m.ConnectPolicy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ConnectPolicy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ConnectPolicyFormat != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectPolicyFormat))
		i--
		dAtA[i] = 0x78
	}
	if m.Bandwidth != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x70
	}
	if m.Processor != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Processor))
		i--
		dAtA[i] = 0x68
	}
	if m.Memory != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x60
	}
	if m.Duration != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ResultPartyIds) > 0 {
		for iNdEx := len(m.ResultPartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResultPartyIds[iNdEx])
			copy(dAtA[i:], m.ResultPartyIds[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResultPartyIds[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ComputationPartyIds) > 0 {
		for iNdEx := len(m.ComputationPartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ComputationPartyIds[iNdEx])
			copy(dAtA[i:], m.ComputationPartyIds[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ComputationPartyIds[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.DataPartyIds) > 0 {
		for iNdEx := len(m.DataPartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataPartyIds[iNdEx])
			copy(dAtA[i:], m.DataPartyIds[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DataPartyIds[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AlgorithmDynamicParams) > 0 {
		i -= len(m.AlgorithmDynamicParams)
		copy(dAtA[i:], m.AlgorithmDynamicParams)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AlgorithmDynamicParams)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SelfCfgParams) > 0 {
		i -= len(m.SelfCfgParams)
		copy(dAtA[i:], m.SelfCfgParams)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SelfCfgParams)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AlgorithmCode) > 0 {
		i -= len(m.AlgorithmCode)
		copy(dAtA[i:], m.AlgorithmCode)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AlgorithmCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.EnvId) > 0 {
		i -= len(m.EnvId)
		copy(dAtA[i:], m.EnvId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EnvId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PartyId) > 0 {
		i -= len(m.PartyId)
		copy(dAtA[i:], m.PartyId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PartyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskReadyGoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskReadyGoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskReadyGoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskCancelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskCancelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskCancelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PartyId) > 0 {
		i -= len(m.PartyId)
		copy(dAtA[i:], m.PartyId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PartyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskCancelReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskCancelReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskCancelReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Party) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	l = len(m.PartyId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskReadyGoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PartyId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.EnvId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Parties) > 0 {
		for _, e := range m.Parties {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AlgorithmCode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SelfCfgParams)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AlgorithmDynamicParams)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.DataPartyIds) > 0 {
		for _, s := range m.DataPartyIds {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ComputationPartyIds) > 0 {
		for _, s := range m.ComputationPartyIds {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResultPartyIds) > 0 {
		for _, s := range m.ResultPartyIds {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Duration != 0 {
		n += 1 + sovTypes(uint64(m.Duration))
	}
	if m.Memory != 0 {
		n += 1 + sovTypes(uint64(m.Memory))
	}
	if m.Processor != 0 {
		n += 1 + sovTypes(uint64(m.Processor))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovTypes(uint64(m.Bandwidth))
	}
	if m.ConnectPolicyFormat != 0 {
		n += 1 + sovTypes(uint64(m.ConnectPolicyFormat))
	}
	l = len(m.ConnectPolicy)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskReadyGoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskCancelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PartyId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskCancelReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Party) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Party: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Party: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskReadyGoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskReadyGoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskReadyGoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, &Party{})
			if err := m.Parties[len(m.Parties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgorithmCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlgorithmCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfCfgParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelfCfgParams = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgorithmDynamicParams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlgorithmDynamicParams = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPartyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPartyIds = append(m.DataPartyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputationPartyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComputationPartyIds = append(m.ComputationPartyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultPartyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultPartyIds = append(m.ResultPartyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processor", wireType)
			}
			m.Processor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Processor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectPolicyFormat", wireType)
			}
			m.ConnectPolicyFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectPolicyFormat |= constant.ConnectPolicyFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskReadyGoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskReadyGoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskReadyGoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskCancelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskCancelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskCancelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskCancelReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskCancelReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskCancelReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
