// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fighter/api/compute/compute_svc.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
	types "pb/fighter/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UploadShardReq struct {
	// Types that are valid to be assigned to Data:
	//	*UploadShardReq_Meta
	//	*UploadShardReq_Content
	Data                 isUploadShardReq_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UploadShardReq) Reset()         { *m = UploadShardReq{} }
func (m *UploadShardReq) String() string { return proto.CompactTextString(m) }
func (*UploadShardReq) ProtoMessage()    {}
func (*UploadShardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3f37d1c05dceca, []int{0}
}
func (m *UploadShardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadShardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadShardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadShardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadShardReq.Merge(m, src)
}
func (m *UploadShardReq) XXX_Size() int {
	return m.Size()
}
func (m *UploadShardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadShardReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadShardReq proto.InternalMessageInfo

type isUploadShardReq_Data interface {
	isUploadShardReq_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UploadShardReq_Meta struct {
	Meta *UploadShardReq_Info `protobuf:"bytes,1,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}
type UploadShardReq_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (*UploadShardReq_Meta) isUploadShardReq_Data()    {}
func (*UploadShardReq_Content) isUploadShardReq_Data() {}

func (m *UploadShardReq) GetData() isUploadShardReq_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UploadShardReq) GetMeta() *UploadShardReq_Info {
	if x, ok := m.GetData().(*UploadShardReq_Meta); ok {
		return x.Meta
	}
	return nil
}

func (m *UploadShardReq) GetContent() []byte {
	if x, ok := m.GetData().(*UploadShardReq_Content); ok {
		return x.Content
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UploadShardReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UploadShardReq_Meta)(nil),
		(*UploadShardReq_Content)(nil),
	}
}

type UploadShardReq_Info struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	DataId               string   `protobuf:"bytes,2,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadShardReq_Info) Reset()         { *m = UploadShardReq_Info{} }
func (m *UploadShardReq_Info) String() string { return proto.CompactTextString(m) }
func (*UploadShardReq_Info) ProtoMessage()    {}
func (*UploadShardReq_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3f37d1c05dceca, []int{0, 0}
}
func (m *UploadShardReq_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadShardReq_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadShardReq_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadShardReq_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadShardReq_Info.Merge(m, src)
}
func (m *UploadShardReq_Info) XXX_Size() int {
	return m.Size()
}
func (m *UploadShardReq_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadShardReq_Info.DiscardUnknown(m)
}

var xxx_messageInfo_UploadShardReq_Info proto.InternalMessageInfo

func (m *UploadShardReq_Info) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *UploadShardReq_Info) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

type UploadShardReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadShardReply) Reset()         { *m = UploadShardReply{} }
func (m *UploadShardReply) String() string { return proto.CompactTextString(m) }
func (*UploadShardReply) ProtoMessage()    {}
func (*UploadShardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3f37d1c05dceca, []int{1}
}
func (m *UploadShardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadShardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadShardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadShardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadShardReply.Merge(m, src)
}
func (m *UploadShardReply) XXX_Size() int {
	return m.Size()
}
func (m *UploadShardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadShardReply.DiscardUnknown(m)
}

var xxx_messageInfo_UploadShardReply proto.InternalMessageInfo

func (m *UploadShardReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UploadShardReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type GetStatusReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TotalCpu             uint32   `protobuf:"varint,3,opt,name=total_cpu,json=totalCpu,proto3" json:"total_cpu,omitempty"`
	UsedCpu              uint32   `protobuf:"varint,4,opt,name=used_cpu,json=usedCpu,proto3" json:"used_cpu,omitempty"`
	IdleCpu              uint32   `protobuf:"varint,5,opt,name=idle_cpu,json=idleCpu,proto3" json:"idle_cpu,omitempty"`
	TotalMemory          uint64   `protobuf:"varint,6,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	UsedMemory           uint64   `protobuf:"varint,7,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
	IdleMemory           uint64   `protobuf:"varint,8,opt,name=idle_memory,json=idleMemory,proto3" json:"idle_memory,omitempty"`
	TotalDisk            uint64   `protobuf:"varint,9,opt,name=total_disk,json=totalDisk,proto3" json:"total_disk,omitempty"`
	UsedDisk             uint64   `protobuf:"varint,10,opt,name=used_disk,json=usedDisk,proto3" json:"used_disk,omitempty"`
	IdleDisk             uint64   `protobuf:"varint,11,opt,name=idle_disk,json=idleDisk,proto3" json:"idle_disk,omitempty"`
	TotalBandwidth       uint64   `protobuf:"varint,12,opt,name=total_bandwidth,json=totalBandwidth,proto3" json:"total_bandwidth,omitempty"`
	UsedBandwidth        uint64   `protobuf:"varint,13,opt,name=used_bandwidth,json=usedBandwidth,proto3" json:"used_bandwidth,omitempty"`
	IdleBandwidth        uint64   `protobuf:"varint,14,opt,name=idle_bandwidth,json=idleBandwidth,proto3" json:"idle_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatusReply) Reset()         { *m = GetStatusReply{} }
func (m *GetStatusReply) String() string { return proto.CompactTextString(m) }
func (*GetStatusReply) ProtoMessage()    {}
func (*GetStatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3f37d1c05dceca, []int{2}
}
func (m *GetStatusReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatusReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusReply.Merge(m, src)
}
func (m *GetStatusReply) XXX_Size() int {
	return m.Size()
}
func (m *GetStatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusReply proto.InternalMessageInfo

func (m *GetStatusReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetStatusReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetStatusReply) GetTotalCpu() uint32 {
	if m != nil {
		return m.TotalCpu
	}
	return 0
}

func (m *GetStatusReply) GetUsedCpu() uint32 {
	if m != nil {
		return m.UsedCpu
	}
	return 0
}

func (m *GetStatusReply) GetIdleCpu() uint32 {
	if m != nil {
		return m.IdleCpu
	}
	return 0
}

func (m *GetStatusReply) GetTotalMemory() uint64 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

func (m *GetStatusReply) GetUsedMemory() uint64 {
	if m != nil {
		return m.UsedMemory
	}
	return 0
}

func (m *GetStatusReply) GetIdleMemory() uint64 {
	if m != nil {
		return m.IdleMemory
	}
	return 0
}

func (m *GetStatusReply) GetTotalDisk() uint64 {
	if m != nil {
		return m.TotalDisk
	}
	return 0
}

func (m *GetStatusReply) GetUsedDisk() uint64 {
	if m != nil {
		return m.UsedDisk
	}
	return 0
}

func (m *GetStatusReply) GetIdleDisk() uint64 {
	if m != nil {
		return m.IdleDisk
	}
	return 0
}

func (m *GetStatusReply) GetTotalBandwidth() uint64 {
	if m != nil {
		return m.TotalBandwidth
	}
	return 0
}

func (m *GetStatusReply) GetUsedBandwidth() uint64 {
	if m != nil {
		return m.UsedBandwidth
	}
	return 0
}

func (m *GetStatusReply) GetIdleBandwidth() uint64 {
	if m != nil {
		return m.IdleBandwidth
	}
	return 0
}

type GetTaskDetailsReq struct {
	TaskIds              []string `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskDetailsReq) Reset()         { *m = GetTaskDetailsReq{} }
func (m *GetTaskDetailsReq) String() string { return proto.CompactTextString(m) }
func (*GetTaskDetailsReq) ProtoMessage()    {}
func (*GetTaskDetailsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3f37d1c05dceca, []int{3}
}
func (m *GetTaskDetailsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskDetailsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskDetailsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskDetailsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskDetailsReq.Merge(m, src)
}
func (m *GetTaskDetailsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskDetailsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskDetailsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskDetailsReq proto.InternalMessageInfo

func (m *GetTaskDetailsReq) GetTaskIds() []string {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

type GetTaskDetailsReply struct {
	Status               int32                         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string                        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TaskDetails          []*GetTaskDetailsReply_Detail `protobuf:"bytes,3,rep,name=task_details,json=taskDetails,proto3" json:"task_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GetTaskDetailsReply) Reset()         { *m = GetTaskDetailsReply{} }
func (m *GetTaskDetailsReply) String() string { return proto.CompactTextString(m) }
func (*GetTaskDetailsReply) ProtoMessage()    {}
func (*GetTaskDetailsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3f37d1c05dceca, []int{4}
}
func (m *GetTaskDetailsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskDetailsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskDetailsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskDetailsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskDetailsReply.Merge(m, src)
}
func (m *GetTaskDetailsReply) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskDetailsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskDetailsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskDetailsReply proto.InternalMessageInfo

func (m *GetTaskDetailsReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetTaskDetailsReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetTaskDetailsReply) GetTaskDetails() []*GetTaskDetailsReply_Detail {
	if m != nil {
		return m.TaskDetails
	}
	return nil
}

type GetTaskDetailsReply_Detail struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName             string   `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	ContractId           string   `protobuf:"bytes,3,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ElapsedTime          int64    `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	RemainTime           int64    `protobuf:"varint,5,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	Progress             string   `protobuf:"bytes,6,opt,name=progress,proto3" json:"progress,omitempty"`
	Phase                string   `protobuf:"bytes,7,opt,name=phase,proto3" json:"phase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskDetailsReply_Detail) Reset()         { *m = GetTaskDetailsReply_Detail{} }
func (m *GetTaskDetailsReply_Detail) String() string { return proto.CompactTextString(m) }
func (*GetTaskDetailsReply_Detail) ProtoMessage()    {}
func (*GetTaskDetailsReply_Detail) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a3f37d1c05dceca, []int{4, 0}
}
func (m *GetTaskDetailsReply_Detail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskDetailsReply_Detail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskDetailsReply_Detail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskDetailsReply_Detail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskDetailsReply_Detail.Merge(m, src)
}
func (m *GetTaskDetailsReply_Detail) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskDetailsReply_Detail) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskDetailsReply_Detail.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskDetailsReply_Detail proto.InternalMessageInfo

func (m *GetTaskDetailsReply_Detail) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *GetTaskDetailsReply_Detail) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *GetTaskDetailsReply_Detail) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *GetTaskDetailsReply_Detail) GetElapsedTime() int64 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func (m *GetTaskDetailsReply_Detail) GetRemainTime() int64 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *GetTaskDetailsReply_Detail) GetProgress() string {
	if m != nil {
		return m.Progress
	}
	return ""
}

func (m *GetTaskDetailsReply_Detail) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadShardReq)(nil), "fighter.api.compute.UploadShardReq")
	proto.RegisterType((*UploadShardReq_Info)(nil), "fighter.api.compute.UploadShardReq.Info")
	proto.RegisterType((*UploadShardReply)(nil), "fighter.api.compute.UploadShardReply")
	proto.RegisterType((*GetStatusReply)(nil), "fighter.api.compute.GetStatusReply")
	proto.RegisterType((*GetTaskDetailsReq)(nil), "fighter.api.compute.GetTaskDetailsReq")
	proto.RegisterType((*GetTaskDetailsReply)(nil), "fighter.api.compute.GetTaskDetailsReply")
	proto.RegisterType((*GetTaskDetailsReply_Detail)(nil), "fighter.api.compute.GetTaskDetailsReply.Detail")
}

func init() {
	proto.RegisterFile("fighter/api/compute/compute_svc.proto", fileDescriptor_5a3f37d1c05dceca)
}

var fileDescriptor_5a3f37d1c05dceca = []byte{
	// 833 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0x4d, 0x53, 0xd6, 0xc7, 0xd0, 0x56, 0x9c, 0x4d, 0x90, 0x48, 0x8c, 0x22, 0xab, 0x4c,
	0xd5, 0x12, 0x39, 0x50, 0x80, 0x7b, 0x29, 0x82, 0xa2, 0x07, 0x3b, 0x85, 0xad, 0x43, 0x8b, 0x82,
	0x49, 0x2f, 0x05, 0x0a, 0x63, 0xa5, 0x5d, 0x4b, 0x84, 0xf8, 0x15, 0xee, 0xca, 0x85, 0x7a, 0xec,
	0xa1, 0x2f, 0xd0, 0xf7, 0xe8, 0x43, 0xf4, 0xd4, 0x63, 0x81, 0xa0, 0xf7, 0xc2, 0xe8, 0xad, 0x2f,
	0x51, 0xcc, 0x2c, 0xf5, 0x61, 0x43, 0x49, 0x9d, 0x8b, 0xcd, 0x99, 0xdf, 0x7f, 0xe6, 0xcf, 0xe5,
	0xce, 0xae, 0xa0, 0x7f, 0x19, 0x4d, 0xa6, 0x5a, 0x16, 0x03, 0x9e, 0x47, 0x83, 0x71, 0x96, 0xe4,
	0x73, 0x2d, 0x97, 0xff, 0x2f, 0xd4, 0xd5, 0x38, 0xc8, 0x8b, 0x4c, 0x67, 0xec, 0x41, 0x29, 0x0b,
	0x78, 0x1e, 0x05, 0x25, 0x76, 0x9f, 0x4c, 0xb2, 0x6c, 0x12, 0xcb, 0x01, 0x49, 0x46, 0xf3, 0xcb,
	0x81, 0x4c, 0x72, 0xbd, 0x30, 0x15, 0x6e, 0xa7, 0x84, 0xd8, 0x97, 0xa7, 0x69, 0xa6, 0xb9, 0x8e,
	0xb2, 0x54, 0x95, 0xb4, 0xbd, 0xb4, 0xd5, 0x8b, 0x5c, 0x2a, 0xf3, 0xd7, 0x20, 0xef, 0x37, 0x0b,
	0x9a, 0xdf, 0xe5, 0x71, 0xc6, 0xc5, 0xab, 0x29, 0x2f, 0x44, 0x28, 0xdf, 0xb0, 0x2f, 0xa1, 0x92,
	0x48, 0xcd, 0x5b, 0x56, 0xcf, 0xf2, 0x9d, 0x63, 0x3f, 0xd8, 0xf2, 0x32, 0xc1, 0xcd, 0x92, 0x60,
	0x98, 0x5e, 0x66, 0xe7, 0x3b, 0x21, 0xd5, 0x31, 0x17, 0x6a, 0xe3, 0x2c, 0xd5, 0x32, 0xd5, 0xad,
	0xdd, 0x9e, 0xe5, 0xef, 0x9f, 0xef, 0x84, 0xcb, 0x84, 0xfb, 0x39, 0x54, 0x50, 0xcb, 0x1e, 0x43,
	0x4d, 0x73, 0x35, 0xbb, 0x88, 0x04, 0xd9, 0x34, 0xc2, 0x2a, 0x86, 0x43, 0x81, 0x40, 0x70, 0xcd,
	0x11, 0xec, 0x1a, 0x80, 0xe1, 0x50, 0x9c, 0x54, 0xa1, 0x82, 0x4f, 0xde, 0x17, 0x70, 0x78, 0xc3,
	0x3c, 0x8f, 0x17, 0xec, 0x11, 0x54, 0x95, 0xe6, 0x7a, 0xae, 0xa8, 0xd9, 0x5e, 0x58, 0x46, 0xec,
	0x10, 0xec, 0x44, 0x4d, 0xca, 0x46, 0xf8, 0xe8, 0xfd, 0x6e, 0x43, 0xf3, 0x4c, 0xea, 0x57, 0xc4,
	0x3f, 0xb0, 0x98, 0x3d, 0x81, 0x86, 0xce, 0x34, 0x8f, 0x2f, 0xc6, 0xf9, 0xbc, 0x65, 0xf7, 0x2c,
	0xff, 0x20, 0xac, 0x53, 0xe2, 0x34, 0x9f, 0xb3, 0x36, 0xd4, 0xe7, 0x4a, 0x0a, 0x62, 0x15, 0x62,
	0x35, 0x8c, 0x4b, 0x14, 0x89, 0x58, 0x12, 0xda, 0x33, 0x08, 0x63, 0x44, 0x1f, 0xc1, 0xbe, 0x69,
	0x99, 0xc8, 0x24, 0x2b, 0x16, 0xad, 0x6a, 0xcf, 0xf2, 0x2b, 0xa1, 0x43, 0xb9, 0xaf, 0x29, 0xc5,
	0x8e, 0xc0, 0xa1, 0xc6, 0xa5, 0xa2, 0x46, 0x0a, 0xc0, 0xd4, 0x5a, 0x40, 0xed, 0x4b, 0x41, 0xdd,
	0x08, 0x30, 0x55, 0x0a, 0x9e, 0x02, 0x18, 0x13, 0x11, 0xa9, 0x59, 0xab, 0x41, 0xdc, 0xac, 0xe4,
	0x65, 0xa4, 0x66, 0xb8, 0x2c, 0x32, 0x20, 0x0a, 0x44, 0x69, 0x29, 0x4b, 0x48, 0xcd, 0x09, 0x3a,
	0x06, 0x62, 0x82, 0xe0, 0xa7, 0x70, 0xcf, 0x34, 0x1e, 0xf1, 0x54, 0xfc, 0x18, 0x09, 0x3d, 0x6d,
	0xed, 0x93, 0xa4, 0x49, 0xe9, 0x93, 0x65, 0x96, 0xf5, 0xa1, 0x49, 0x16, 0x6b, 0xdd, 0x01, 0xe9,
	0x0e, 0x30, 0x7b, 0x43, 0x46, 0x66, 0x6b, 0x59, 0xd3, 0xc8, 0x30, 0xbb, 0x92, 0x79, 0x01, 0xdc,
	0x3f, 0x93, 0xfa, 0x35, 0x57, 0xb3, 0x97, 0x52, 0xf3, 0x28, 0x56, 0x38, 0xb5, 0x6d, 0xa8, 0x97,
	0x13, 0x85, 0x1b, 0x69, 0xfb, 0x8d, 0xb0, 0x66, 0x46, 0x4a, 0x79, 0xff, 0xee, 0xc2, 0x83, 0xdb,
	0x05, 0x1f, 0xb6, 0xf3, 0x21, 0xec, 0x53, 0x73, 0x61, 0xca, 0x5b, 0x76, 0xcf, 0xf6, 0x9d, 0xe3,
	0xc1, 0xd6, 0xa3, 0xb1, 0xc5, 0x29, 0x30, 0x41, 0xe8, 0xe8, 0x35, 0x70, 0xff, 0xb2, 0xa0, 0x6a,
	0x9e, 0xdf, 0x7d, 0x1a, 0x70, 0xe2, 0x10, 0xa4, 0x3c, 0x91, 0xe5, 0xfb, 0xd0, 0x2a, 0xbf, 0xe1,
	0x89, 0xc4, 0x7d, 0xc7, 0x63, 0x55, 0xf0, 0xb1, 0xc6, 0x4a, 0x9b, 0x30, 0x2c, 0x53, 0x43, 0x81,
	0xc3, 0x25, 0x63, 0x9e, 0xe3, 0x87, 0xd7, 0x51, 0x22, 0x69, 0x2c, 0xed, 0xd0, 0x29, 0x73, 0xaf,
	0x23, 0xd3, 0xa3, 0x90, 0x09, 0x8f, 0x52, 0xa3, 0xd8, 0x23, 0x05, 0x98, 0x14, 0x09, 0x5c, 0xa8,
	0xe7, 0x45, 0x36, 0x29, 0xa4, 0x52, 0x34, 0x9c, 0x8d, 0x70, 0x15, 0xb3, 0x87, 0xb0, 0x97, 0x4f,
	0xb9, 0x92, 0x34, 0x93, 0x8d, 0xd0, 0x04, 0xc7, 0x6f, 0x2b, 0x70, 0xef, 0xd4, 0x7c, 0x8b, 0x6f,
	0x8b, 0xec, 0x2a, 0x12, 0xb2, 0x60, 0x02, 0x1a, 0xab, 0x53, 0xc7, 0x1e, 0x05, 0xe6, 0xb2, 0x0a,
	0x96, 0x37, 0x59, 0xf0, 0x15, 0xde, 0x64, 0xee, 0xb3, 0x77, 0x7d, 0xce, 0x8d, 0xd3, 0xea, 0xb9,
	0x3f, 0xbf, 0xfd, 0xe7, 0xd7, 0xdd, 0x87, 0x8c, 0xad, 0xae, 0xcf, 0xc9, 0xaa, 0xf1, 0x2f, 0x16,
	0x1d, 0xee, 0x8d, 0xaf, 0xcf, 0x3e, 0xb9, 0xd3, 0x16, 0xbd, 0x71, 0xfd, 0xbb, 0x6e, 0xa5, 0xe7,
	0xd1, 0x0b, 0x74, 0xbc, 0xc7, 0x9b, 0x2f, 0xb0, 0xa1, 0x7a, 0x61, 0x3d, 0x67, 0x3f, 0x80, 0xb3,
	0x71, 0x47, 0xb1, 0x67, 0x77, 0xb8, 0x42, 0xdd, 0xfe, 0xff, 0x8b, 0xd0, 0x7e, 0xc7, 0xb7, 0xd8,
	0x4f, 0x70, 0xff, 0x9c, 0xa7, 0x22, 0x96, 0x68, 0x1b, 0x4a, 0x2e, 0x16, 0x67, 0x19, 0x7b, 0xba,
	0xaa, 0x37, 0xd7, 0xfb, 0x06, 0xc3, 0xf6, 0x47, 0xef, 0xc3, 0xd8, 0xb8, 0x4f, 0xeb, 0x3a, 0xf2,
	0xdc, 0xd5, 0xba, 0xa6, 0xb7, 0x3d, 0x70, 0x69, 0x57, 0x70, 0x68, 0xbc, 0x4f, 0x79, 0x3a, 0x96,
	0x31, 0x52, 0xd6, 0xd9, 0xd2, 0xdb, 0x60, 0x74, 0xee, 0xbe, 0x87, 0xa2, 0xf1, 0xc7, 0x64, 0xdc,
	0xf5, 0xda, 0xb7, 0x8c, 0xd7, 0x06, 0x2f, 0xac, 0xe7, 0x27, 0x9d, 0x3f, 0xae, 0xbb, 0xd6, 0x9f,
	0xd7, 0x5d, 0xeb, 0xef, 0xeb, 0xae, 0xf5, 0x7d, 0x33, 0x1f, 0x0d, 0x36, 0x7e, 0x4a, 0x47, 0x55,
	0x1a, 0xa5, 0xcf, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x72, 0xc3, 0xec, 0x60, 0x60, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ComputeProviderClient is the client API for ComputeProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComputeProviderClient interface {
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatusReply, error)
	GetTaskDetails(ctx context.Context, in *GetTaskDetailsReq, opts ...grpc.CallOption) (*GetTaskDetailsReply, error)
	UploadShard(ctx context.Context, opts ...grpc.CallOption) (ComputeProvider_UploadShardClient, error)
	HandleTaskReadyGo(ctx context.Context, in *types.TaskReadyGoReq, opts ...grpc.CallOption) (*types.TaskReadyGoReply, error)
	HandleCancelTask(ctx context.Context, in *types.TaskCancelReq, opts ...grpc.CallOption) (*types.TaskCancelReply, error)
}

type computeProviderClient struct {
	cc *grpc.ClientConn
}

func NewComputeProviderClient(cc *grpc.ClientConn) ComputeProviderClient {
	return &computeProviderClient{cc}
}

func (c *computeProviderClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatusReply, error) {
	out := new(GetStatusReply)
	err := c.cc.Invoke(ctx, "/fighter.api.compute.ComputeProvider/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeProviderClient) GetTaskDetails(ctx context.Context, in *GetTaskDetailsReq, opts ...grpc.CallOption) (*GetTaskDetailsReply, error) {
	out := new(GetTaskDetailsReply)
	err := c.cc.Invoke(ctx, "/fighter.api.compute.ComputeProvider/GetTaskDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeProviderClient) UploadShard(ctx context.Context, opts ...grpc.CallOption) (ComputeProvider_UploadShardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ComputeProvider_serviceDesc.Streams[0], "/fighter.api.compute.ComputeProvider/UploadShard", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeProviderUploadShardClient{stream}
	return x, nil
}

type ComputeProvider_UploadShardClient interface {
	Send(*UploadShardReq) error
	CloseAndRecv() (*UploadShardReply, error)
	grpc.ClientStream
}

type computeProviderUploadShardClient struct {
	grpc.ClientStream
}

func (x *computeProviderUploadShardClient) Send(m *UploadShardReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computeProviderUploadShardClient) CloseAndRecv() (*UploadShardReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadShardReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *computeProviderClient) HandleTaskReadyGo(ctx context.Context, in *types.TaskReadyGoReq, opts ...grpc.CallOption) (*types.TaskReadyGoReply, error) {
	out := new(types.TaskReadyGoReply)
	err := c.cc.Invoke(ctx, "/fighter.api.compute.ComputeProvider/HandleTaskReadyGo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeProviderClient) HandleCancelTask(ctx context.Context, in *types.TaskCancelReq, opts ...grpc.CallOption) (*types.TaskCancelReply, error) {
	out := new(types.TaskCancelReply)
	err := c.cc.Invoke(ctx, "/fighter.api.compute.ComputeProvider/HandleCancelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeProviderServer is the server API for ComputeProvider service.
type ComputeProviderServer interface {
	GetStatus(context.Context, *emptypb.Empty) (*GetStatusReply, error)
	GetTaskDetails(context.Context, *GetTaskDetailsReq) (*GetTaskDetailsReply, error)
	UploadShard(ComputeProvider_UploadShardServer) error
	HandleTaskReadyGo(context.Context, *types.TaskReadyGoReq) (*types.TaskReadyGoReply, error)
	HandleCancelTask(context.Context, *types.TaskCancelReq) (*types.TaskCancelReply, error)
}

// UnimplementedComputeProviderServer can be embedded to have forward compatible implementations.
type UnimplementedComputeProviderServer struct {
}

func (*UnimplementedComputeProviderServer) GetStatus(ctx context.Context, req *emptypb.Empty) (*GetStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedComputeProviderServer) GetTaskDetails(ctx context.Context, req *GetTaskDetailsReq) (*GetTaskDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskDetails not implemented")
}
func (*UnimplementedComputeProviderServer) UploadShard(srv ComputeProvider_UploadShardServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadShard not implemented")
}
func (*UnimplementedComputeProviderServer) HandleTaskReadyGo(ctx context.Context, req *types.TaskReadyGoReq) (*types.TaskReadyGoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTaskReadyGo not implemented")
}
func (*UnimplementedComputeProviderServer) HandleCancelTask(ctx context.Context, req *types.TaskCancelReq) (*types.TaskCancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCancelTask not implemented")
}

func RegisterComputeProviderServer(s *grpc.Server, srv ComputeProviderServer) {
	s.RegisterService(&_ComputeProvider_serviceDesc, srv)
}

func _ComputeProvider_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeProviderServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fighter.api.compute.ComputeProvider/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeProviderServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeProvider_GetTaskDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeProviderServer).GetTaskDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fighter.api.compute.ComputeProvider/GetTaskDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeProviderServer).GetTaskDetails(ctx, req.(*GetTaskDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeProvider_UploadShard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputeProviderServer).UploadShard(&computeProviderUploadShardServer{stream})
}

type ComputeProvider_UploadShardServer interface {
	SendAndClose(*UploadShardReply) error
	Recv() (*UploadShardReq, error)
	grpc.ServerStream
}

type computeProviderUploadShardServer struct {
	grpc.ServerStream
}

func (x *computeProviderUploadShardServer) SendAndClose(m *UploadShardReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computeProviderUploadShardServer) Recv() (*UploadShardReq, error) {
	m := new(UploadShardReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ComputeProvider_HandleTaskReadyGo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.TaskReadyGoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeProviderServer).HandleTaskReadyGo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fighter.api.compute.ComputeProvider/HandleTaskReadyGo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeProviderServer).HandleTaskReadyGo(ctx, req.(*types.TaskReadyGoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeProvider_HandleCancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.TaskCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeProviderServer).HandleCancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fighter.api.compute.ComputeProvider/HandleCancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeProviderServer).HandleCancelTask(ctx, req.(*types.TaskCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComputeProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fighter.api.compute.ComputeProvider",
	HandlerType: (*ComputeProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _ComputeProvider_GetStatus_Handler,
		},
		{
			MethodName: "GetTaskDetails",
			Handler:    _ComputeProvider_GetTaskDetails_Handler,
		},
		{
			MethodName: "HandleTaskReadyGo",
			Handler:    _ComputeProvider_HandleTaskReadyGo_Handler,
		},
		{
			MethodName: "HandleCancelTask",
			Handler:    _ComputeProvider_HandleCancelTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadShard",
			Handler:       _ComputeProvider_UploadShard_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fighter/api/compute/compute_svc.proto",
}

func (m *UploadShardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadShardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadShardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UploadShardReq_Meta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadShardReq_Meta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComputeSvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UploadShardReq_Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadShardReq_Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Content != nil {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UploadShardReq_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadShardReq_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadShardReq_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadShardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadShardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadShardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStatusReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatusReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IdleBandwidth != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.IdleBandwidth))
		i--
		dAtA[i] = 0x70
	}
	if m.UsedBandwidth != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.UsedBandwidth))
		i--
		dAtA[i] = 0x68
	}
	if m.TotalBandwidth != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.TotalBandwidth))
		i--
		dAtA[i] = 0x60
	}
	if m.IdleDisk != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.IdleDisk))
		i--
		dAtA[i] = 0x58
	}
	if m.UsedDisk != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.UsedDisk))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalDisk != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.TotalDisk))
		i--
		dAtA[i] = 0x48
	}
	if m.IdleMemory != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.IdleMemory))
		i--
		dAtA[i] = 0x40
	}
	if m.UsedMemory != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.UsedMemory))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalMemory != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.TotalMemory))
		i--
		dAtA[i] = 0x30
	}
	if m.IdleCpu != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.IdleCpu))
		i--
		dAtA[i] = 0x28
	}
	if m.UsedCpu != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.UsedCpu))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalCpu != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.TotalCpu))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskDetailsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskDetailsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskDetailsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskIds) > 0 {
		for iNdEx := len(m.TaskIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskIds[iNdEx])
			copy(dAtA[i:], m.TaskIds[iNdEx])
			i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.TaskIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskDetailsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskDetailsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskDetailsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskDetails) > 0 {
		for iNdEx := len(m.TaskDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComputeSvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskDetailsReply_Detail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskDetailsReply_Detail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskDetailsReply_Detail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Phase) > 0 {
		i -= len(m.Phase)
		copy(dAtA[i:], m.Phase)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.Phase)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Progress) > 0 {
		i -= len(m.Progress)
		copy(dAtA[i:], m.Progress)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.Progress)))
		i--
		dAtA[i] = 0x32
	}
	if m.RemainTime != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.RemainTime))
		i--
		dAtA[i] = 0x28
	}
	if m.ElapsedTime != 0 {
		i = encodeVarintComputeSvc(dAtA, i, uint64(m.ElapsedTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskName) > 0 {
		i -= len(m.TaskName)
		copy(dAtA[i:], m.TaskName)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.TaskName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintComputeSvc(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintComputeSvc(dAtA []byte, offset int, v uint64) int {
	offset -= sovComputeSvc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UploadShardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadShardReq_Meta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	return n
}
func (m *UploadShardReq_Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = len(m.Content)
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	return n
}
func (m *UploadShardReq_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadShardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovComputeSvc(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStatusReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovComputeSvc(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	if m.TotalCpu != 0 {
		n += 1 + sovComputeSvc(uint64(m.TotalCpu))
	}
	if m.UsedCpu != 0 {
		n += 1 + sovComputeSvc(uint64(m.UsedCpu))
	}
	if m.IdleCpu != 0 {
		n += 1 + sovComputeSvc(uint64(m.IdleCpu))
	}
	if m.TotalMemory != 0 {
		n += 1 + sovComputeSvc(uint64(m.TotalMemory))
	}
	if m.UsedMemory != 0 {
		n += 1 + sovComputeSvc(uint64(m.UsedMemory))
	}
	if m.IdleMemory != 0 {
		n += 1 + sovComputeSvc(uint64(m.IdleMemory))
	}
	if m.TotalDisk != 0 {
		n += 1 + sovComputeSvc(uint64(m.TotalDisk))
	}
	if m.UsedDisk != 0 {
		n += 1 + sovComputeSvc(uint64(m.UsedDisk))
	}
	if m.IdleDisk != 0 {
		n += 1 + sovComputeSvc(uint64(m.IdleDisk))
	}
	if m.TotalBandwidth != 0 {
		n += 1 + sovComputeSvc(uint64(m.TotalBandwidth))
	}
	if m.UsedBandwidth != 0 {
		n += 1 + sovComputeSvc(uint64(m.UsedBandwidth))
	}
	if m.IdleBandwidth != 0 {
		n += 1 + sovComputeSvc(uint64(m.IdleBandwidth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskDetailsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskIds) > 0 {
		for _, s := range m.TaskIds {
			l = len(s)
			n += 1 + l + sovComputeSvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskDetailsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovComputeSvc(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	if len(m.TaskDetails) > 0 {
		for _, e := range m.TaskDetails {
			l = e.Size()
			n += 1 + l + sovComputeSvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTaskDetailsReply_Detail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	if m.ElapsedTime != 0 {
		n += 1 + sovComputeSvc(uint64(m.ElapsedTime))
	}
	if m.RemainTime != 0 {
		n += 1 + sovComputeSvc(uint64(m.RemainTime))
	}
	l = len(m.Progress)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovComputeSvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComputeSvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComputeSvc(x uint64) (n int) {
	return sovComputeSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UploadShardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComputeSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadShardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadShardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UploadShardReq_Info{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &UploadShardReq_Meta{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &UploadShardReq_Content{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComputeSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadShardReq_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComputeSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComputeSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadShardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComputeSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadShardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadShardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComputeSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatusReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComputeSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCpu", wireType)
			}
			m.TotalCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCpu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCpu", wireType)
			}
			m.UsedCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedCpu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleCpu", wireType)
			}
			m.IdleCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleCpu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMemory", wireType)
			}
			m.TotalMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMemory", wireType)
			}
			m.UsedMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleMemory", wireType)
			}
			m.IdleMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisk", wireType)
			}
			m.TotalDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDisk", wireType)
			}
			m.UsedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleDisk", wireType)
			}
			m.IdleDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBandwidth", wireType)
			}
			m.TotalBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBandwidth", wireType)
			}
			m.UsedBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleBandwidth", wireType)
			}
			m.IdleBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComputeSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskDetailsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComputeSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskDetailsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskDetailsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskIds = append(m.TaskIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComputeSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskDetailsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComputeSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskDetailsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskDetailsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskDetails = append(m.TaskDetails, &GetTaskDetailsReply_Detail{})
			if err := m.TaskDetails[len(m.TaskDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComputeSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskDetailsReply_Detail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComputeSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElapsedTime", wireType)
			}
			m.ElapsedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElapsedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComputeSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComputeSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComputeSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComputeSvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComputeSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComputeSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComputeSvc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComputeSvc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComputeSvc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComputeSvc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComputeSvc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComputeSvc = fmt.Errorf("proto: unexpected end of group")
)
