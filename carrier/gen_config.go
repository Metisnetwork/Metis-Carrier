// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package carrier

import (
	"time"

	"github.com/RosettaFlow/Carrier-Go/core"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		CarrierDB                core.CarrierDB
		NoPruning                bool
		SkipBcVersionCheck       bool `toml:"-"`
		DatabaseHandles          int  `toml:"-"`
		DatabaseCache            int
		TrieCache                int
		TrieTimeout              time.Duration
		TrieDBCache              int
		DBDisabledGC             bool
		DBGCInterval             uint64
		DBGCTimeout              time.Duration
		DBGCMpt                  bool
		DBGCBlock                int
		VMWasmType               string
		VmTimeoutDuration        uint64
		BodyCacheLimit           int
		BlockCacheLimit          int
		MaxFutureBlocks          int
		BadBlockLimit            int
		TriesInMemory            int
		BlockChainVersion        int
		DefaultTxsCacheSize      int
		DefaultBroadcastInterval time.Duration
		Debug                    bool
	}
	var enc Config
	enc.CarrierDB = c.CarrierDB
	enc.NoPruning = c.NoPruning
	enc.SkipBcVersionCheck = c.SkipBcVersionCheck
	enc.DatabaseHandles = c.DatabaseHandles
	enc.DatabaseCache = c.DatabaseCache
	enc.TrieCache = c.TrieCache
	enc.TrieTimeout = c.TrieTimeout
	enc.TrieDBCache = c.TrieDBCache
	enc.DBDisabledGC = c.DBDisabledGC
	enc.DBGCInterval = c.DBGCInterval
	enc.DBGCTimeout = c.DBGCTimeout
	enc.DBGCMpt = c.DBGCMpt
	enc.DBGCBlock = c.DBGCBlock
	enc.VMWasmType = c.VMWasmType
	enc.VmTimeoutDuration = c.VmTimeoutDuration
	enc.BodyCacheLimit = c.BodyCacheLimit
	enc.BlockCacheLimit = c.BlockCacheLimit
	enc.MaxFutureBlocks = c.MaxFutureBlocks
	enc.BadBlockLimit = c.BadBlockLimit
	enc.TriesInMemory = c.TriesInMemory
	enc.BlockChainVersion = c.BlockChainVersion
	enc.DefaultTxsCacheSize = c.DefaultTxsCacheSize
	enc.DefaultBroadcastInterval = c.DefaultBroadcastInterval
	enc.Debug = c.Debug
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		CarrierDB                core.CarrierDB
		NoPruning                *bool
		SkipBcVersionCheck       *bool `toml:"-"`
		DatabaseHandles          *int  `toml:"-"`
		DatabaseCache            *int
		TrieCache                *int
		TrieTimeout              *time.Duration
		TrieDBCache              *int
		DBDisabledGC             *bool
		DBGCInterval             *uint64
		DBGCTimeout              *time.Duration
		DBGCMpt                  *bool
		DBGCBlock                *int
		VMWasmType               *string
		VmTimeoutDuration        *uint64
		BodyCacheLimit           *int
		BlockCacheLimit          *int
		MaxFutureBlocks          *int
		BadBlockLimit            *int
		TriesInMemory            *int
		BlockChainVersion        *int
		DefaultTxsCacheSize      *int
		DefaultBroadcastInterval *time.Duration
		Debug                    *bool
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.CarrierDB != nil {
		c.CarrierDB = dec.CarrierDB
	}
	if dec.NoPruning != nil {
		c.NoPruning = *dec.NoPruning
	}
	if dec.SkipBcVersionCheck != nil {
		c.SkipBcVersionCheck = *dec.SkipBcVersionCheck
	}
	if dec.DatabaseHandles != nil {
		c.DatabaseHandles = *dec.DatabaseHandles
	}
	if dec.DatabaseCache != nil {
		c.DatabaseCache = *dec.DatabaseCache
	}
	if dec.TrieCache != nil {
		c.TrieCache = *dec.TrieCache
	}
	if dec.TrieTimeout != nil {
		c.TrieTimeout = *dec.TrieTimeout
	}
	if dec.TrieDBCache != nil {
		c.TrieDBCache = *dec.TrieDBCache
	}
	if dec.DBDisabledGC != nil {
		c.DBDisabledGC = *dec.DBDisabledGC
	}
	if dec.DBGCInterval != nil {
		c.DBGCInterval = *dec.DBGCInterval
	}
	if dec.DBGCTimeout != nil {
		c.DBGCTimeout = *dec.DBGCTimeout
	}
	if dec.DBGCMpt != nil {
		c.DBGCMpt = *dec.DBGCMpt
	}
	if dec.DBGCBlock != nil {
		c.DBGCBlock = *dec.DBGCBlock
	}
	if dec.VMWasmType != nil {
		c.VMWasmType = *dec.VMWasmType
	}
	if dec.VmTimeoutDuration != nil {
		c.VmTimeoutDuration = *dec.VmTimeoutDuration
	}
	if dec.BodyCacheLimit != nil {
		c.BodyCacheLimit = *dec.BodyCacheLimit
	}
	if dec.BlockCacheLimit != nil {
		c.BlockCacheLimit = *dec.BlockCacheLimit
	}
	if dec.MaxFutureBlocks != nil {
		c.MaxFutureBlocks = *dec.MaxFutureBlocks
	}
	if dec.BadBlockLimit != nil {
		c.BadBlockLimit = *dec.BadBlockLimit
	}
	if dec.TriesInMemory != nil {
		c.TriesInMemory = *dec.TriesInMemory
	}
	if dec.BlockChainVersion != nil {
		c.BlockChainVersion = *dec.BlockChainVersion
	}
	if dec.DefaultTxsCacheSize != nil {
		c.DefaultTxsCacheSize = *dec.DefaultTxsCacheSize
	}
	if dec.DefaultBroadcastInterval != nil {
		c.DefaultBroadcastInterval = *dec.DefaultBroadcastInterval
	}
	if dec.Debug != nil {
		c.Debug = *dec.Debug
	}
	return nil
}
